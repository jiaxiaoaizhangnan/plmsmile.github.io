<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PLM&#39;s Notes</title>
  
  <subtitle>好好学习，天天笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://plmsmile.github.io/"/>
  <updated>2018-11-25T08:30:09.283Z</updated>
  <id>http://plmsmile.github.io/</id>
  
  <author>
    <name>PLM</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QANet</title>
    <link href="http://plmsmile.github.io/2018/08/30/49-qanet/"/>
    <id>http://plmsmile.github.io/2018/08/30/49-qanet/</id>
    <published>2018-08-30T05:47:34.000Z</published>
    <updated>2018-11-25T08:30:09.283Z</updated>
    
    <content type="html"><![CDATA[<p>常年<a href="https://rajpurkar.github.io/SQuAD-explorer/" target="_blank" rel="noopener">SQuAD榜单</a>排名第一的模型。<a href="https://arxiv.org/abs/1804.09541" target="_blank" rel="noopener">QANet: Combining Local Convolution with Global Self-Attention for Reading Comprehension</a><a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="论文模型"><a href="#论文模型" class="headerlink" title="论文模型"></a>论文模型</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>机器阅读任务就不说了。这个模型的主要创新点在于</p><ul><li>卷积（可分离卷积）捕捉局部信息 （并行计算，加速）</li><li>Self-Attention捕捉全局信息</li><li>数据扩增</li></ul><p>一个<code>Encoder Block</code>主要是，其中<a href="https://plmsmile.github.io/2018/08/29/48-attention-is-all-you-need/#encoder">Transformer的EncoderBlock</a>只有Attention和FFN，没有卷积。</p><ul><li>Positional Encoder</li><li><a href="https://plmsmile.github.io/2018/04/11/38-convolution/#xception">可分离卷积</a> （多个，提高内存效率和泛化性）</li><li><a href="https://plmsmile.github.io/2018/08/29/48-attention-is-all-you-need/#self-attention">Self-Attention</a></li><li>前向神经网络</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/qanet/01-qanet.png" style="display:block; margin:auto" width="60%"></p><h2 id="Input-Embedding"><a href="#Input-Embedding" class="headerlink" title="Input Embedding"></a>Input Embedding</h2><p><strong>词向量</strong></p><p>Glove 300维，Fix；UNK词向量可以训练</p><p><strong>字向量</strong></p><ul><li>CNN字符向量，200维，可以训练</li><li>每个单词的字符最多16个</li><li>对单词的16个字符的向量过<strong>卷积</strong>（可分离卷积）</li><li>选择所有字符中<strong>最大的向量</strong>作为单词的最终字符向量</li></ul><p><strong>拼接</strong></p><p>对词向量和字符向量拼接起来，$[x_w;x_c] \in \mathcal{R}^{d_w+d_c}$。再过两层的<code>HighwayNetwork</code>，得到最终的单词向量表示。</p><h2 id="Embedding-Encoder"><a href="#Embedding-Encoder" class="headerlink" title="Embedding Encoder"></a>Embedding Encoder</h2><p>每一个Encoder块是由卷积、Self-Attention、全连接层组成，一共有4个Encoder块。输入向量维数是$d=500(200+300)$，输出是$d=128$</p><ul><li>可分离卷积：<code>kernal size=7</code>，<code>d = 128</code>。变成128维向量</li><li>Self-Attention：8头注意力，<a href="https://plmsmile.github.io/2018/03/25/33-attention-summary/#%E9%94%AE%E5%80%BC%E5%AF%B9%E6%B3%A8%E6%84%8F%E5%8A%9B">键值对注意力</a></li><li>全连接：输出也是128</li><li>QANet:层归一化+残差连接：$f(\rm{LayerNorm}(x)) + x$</li><li>Transformer 是<code>Add&amp;Norm</code>，$\rm{LayerNorm(f(x) +x)}$</li></ul><h2 id="Attention-Layer"><a href="#Attention-Layer" class="headerlink" title="Attention Layer"></a>Attention Layer</h2><p>Context: $n$个单词，Question：m个单词。$C \in \mathcal{R}^{n\times d}$，$Q \in \mathcal{R}^{m \times d}$</p><p><strong>关联性矩阵</strong> </p><p>采用的是BiDAF的计算策略：<br>$$<br>S = f(q, c) = W_0 [q, c, q \odot c] \in \mathcal{R} ^{n \times m}<br>$$<br>DCN： $S = C \cdot Q^T \in \mathcal{R}^{n \times m}$</p><p><strong>Context2Query Attention</strong></p><p>C2Q的attention weights，对行做softmax<br>$$<br>A^Q = \rm{softmax}(S) \in \mathcal{R}^{n \times m}<br>$$<br>C2Q <strong>Attention</strong>（Context）<br>$$<br>S^C = A^Q \cdot Q \in \mathcal{R} ^{n \times d}<br>$$<br><strong>Query2Context Attention</strong></p><p>Q2C Attention weights，对列做Softmax<br>$$<br>A^C = \rm{softmax}(S^T) \in \mathcal{R}^{m \times n}<br>$$<br>Q2C Attention（Query）<br>$$<br>S^Q = A^C \cdot C  \in \mathcal{R}^{m \times d}<br>$$<br>Context的<strong>Coattention</strong>，参考自<a href="https://plmsmile.github.io/2018/03/15/32-dynamic-coattention-network/#coattention%E6%B7%B1%E5%B1%82%E7%90%86%E8%A7%A3">DCN的Coattention</a><br>$$<br>C^C = A^Q \cdot S^Q \in \mathcal{R}^{n \times d}<br>$$<br>最终得到两个对Context的编码</p><ul><li>普通Attention：$A = S^C \in \mathcal{R}^{n \times d}$</li><li>Coattention：$B = C^C \in \mathcal{R}^{n \times d}$</li></ul><h2 id="Model-Encoder"><a href="#Model-Encoder" class="headerlink" title="Model Encoder"></a>Model Encoder</h2><p>输入是3个关于Context的矩阵信息：</p><ul><li><strong>原始Context</strong>：$C \in \mathcal{R}^{n\times d}$</li><li>Context的<strong>Attention</strong>： $A \in \mathcal{R}^{n\times d}$</li><li>Context的<strong>Coattention</strong>：$B \in \mathcal{R}^{n \times d}$</li></ul><p>每个单词的编码信息为上面三个矩阵的一个拼接：<br>$$<br>f(w) = [c, a, c \odot a, c \odot b]<br>$$<br>一个有7个Encoder-Block，每个Encoder-Block：2个卷积层、Self-Attention、FFN。其它参数和Embedding Encoder一样。</p><p>一共有3个Model-Encoder，共享所有参数。输出依次为$M_0, M_1, M_2$</p><h2 id="Output-Layer"><a href="#Output-Layer" class="headerlink" title="Output Layer"></a>Output Layer</h2><p>这一层是和特定任务相关的。输出各个位置作为开始和结束位置的概率：<br>$$<br>p^1 = \rm{softmax}(W_1[M_0; M_1]), \quad p^2 = \rm{softmax}(W_1[M_0; M_2])<br>$$<br>目标函数<br>$$<br>L(\theta) = -\frac{1}{N} \sum_{i}^N [\log(p^1_{y_i^1}) + \log(p^2_{y_i^2})]<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常年&lt;a href=&quot;https://rajpurkar.github.io/SQuAD-explorer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SQuAD榜单&lt;/a&gt;排名第一的模型。&lt;a href=&quot;https://arxiv.org/abs/1804.09541&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;QANet: Combining Local Convolution with Global Self-Attention for Reading Comprehension&lt;/a&gt;
    
    </summary>
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/categories/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="Self-Attention" scheme="http://plmsmile.github.io/tags/Self-Attention/"/>
    
      <category term="可分离卷积" scheme="http://plmsmile.github.io/tags/%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Transformer</title>
    <link href="http://plmsmile.github.io/2018/08/29/48-attention-is-all-you-need/"/>
    <id>http://plmsmile.github.io/2018/08/29/48-attention-is-all-you-need/</id>
    <published>2018-08-29T07:41:32.000Z</published>
    <updated>2018-11-25T08:30:09.233Z</updated>
    
    <content type="html"><![CDATA[<p>大名鼎鼎的Transformer，<a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">Attention Is All You Need</a><a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="Transformer概览"><a href="#Transformer概览" class="headerlink" title="Transformer概览"></a>Transformer概览</h1><h2 id="论文结构"><a href="#论文结构" class="headerlink" title="论文结构"></a>论文结构</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/02-multi-head-attention.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/01-transformer.png" style="display:block; margin:auto" width="40%"></p><h2 id="总览结构"><a href="#总览结构" class="headerlink" title="总览结构"></a>总览结构</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/30-transformer_resideual_layer_norm_3.png" style="display:block; margin:auto" width="80%"></p><h1 id="图解总览"><a href="#图解总览" class="headerlink" title="图解总览"></a>图解总览</h1><p>其实也是一个<code>Encoder-Decoder</code>的翻译模型。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/03-the_transformer_3.png" style="display:block; margin:auto" width="70%"></p><p>由一个Encoders和一个Decoders组成。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/04-The_transformer_encoders_decoders.png" style="display:block; margin:auto" width="70%"></p><p>Encoders由多个Encoder块组成。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/05-The_transformer_encoder_decoder_stack.png" style="display:block; margin:auto" width="70%"></p><h1 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h1><h2 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h2><p><strong>1个Encoder由Self-Attention和FFN组成</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/06-Transformer_encoder.png" style="display:block; margin:auto" width="70%"></p><p><strong>一个Encoder的结果再给到下一个Encoder</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/10-encoder_with_tensors_2.png" style="display:block; margin:auto" width="70%"></p><p><strong>Encoder-Decoder</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/07-Transformer_decoder.png" style="display:block; margin:auto" width="70%"></p><h2 id="编码实例"><a href="#编码实例" class="headerlink" title="编码实例"></a>编码实例</h2><p>对一个句子进行编码</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/08-embeddings.png" style="display:block; margin:auto" width="60%"></p><p><code>Self-Attention</code>会对每一个单词进行编码，得到对应的向量。$\mathbf{x_1}, \mathbf{x_2}, \mathbf{x_3} \to \mathbf{z_1}, \mathbf{z_2}, \mathbf{z_3}$，再给到FFN，会得到一个Encoder的结果$\mathbf{r_1}, \mathbf{r_2}, \mathbf{r_3}$， 再继续给到下一个Encoder</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/09-encoder_with_tensors.png" style="display:block; margin:auto" width="70%"></p><h1 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/10-encoder_with_tensors_2.png" style="display:block; margin:auto" width="70%"></p><h2 id="Self-Attention"><a href="#Self-Attention" class="headerlink" title="Self-Attention"></a>Self-Attention</h2><p><strong>1. 乘以3个矩阵生成3个向量：Query、Key、Value</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/12-transformer_self_attention_vectors.png" style="display:block; margin:auto" width="70%"></p><p><strong>2. 计算与每个位置的score</strong></p><p>编码一个单词时，会计算它与句子中其他单词的得分。会得到每个单词对于当前单词的关注程度。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/13-transformer_self_attention_score.png" style="display:block; margin:auto" width="70%"></p><p><strong>3. 归一化和softmax得到每个概率</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/14-self-attention_softmax.png" style="display:block; margin:auto" width="70%"></p><p><strong>4. 依概率结合每个单词的向量</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/15-self-attention-output.png" style="display:block; margin:auto" width="70%"></p><p><strong>Attention图示</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/11-transformer_self-attention_visualization.png" style="display:block; margin:auto" width="60%"></p><h2 id="矩阵形式"><a href="#矩阵形式" class="headerlink" title="矩阵形式"></a>矩阵形式</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/16-self-attention-matrix-calculation.png" style="display:block; margin:auto" width="60%"></p><p><strong>其实就是一个注意力矩阵公式</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/17-self-attention-matrix-calculation-2.png" style="display:block; margin:auto" width="60%"></p><h2 id="多头注意力"><a href="#多头注意力" class="headerlink" title="多头注意力"></a>多头注意力</h2><p>其实就是多个KV注意力。从两个方面提升了<code>Attention Layer</code>的优点</p><ul><li>让模型能够关注到句子中的各个不同位置</li><li>Attention Layer可以有多个不同的表示子空间<code>representation subspaces</code></li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/18-transformer_attention_heads_qkv.png" style="display:block; margin:auto" width="70%"></p><p><strong>多头注意力矩阵形式</strong></p><p>经过多头注意力映射，会生成多个注意力$Z_0, Z_1, \cdots, Z_7$。 </p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/19-transformer_attention_heads_z.png" style="display:block; margin:auto" width="60%"></p><p>把这些注意力头拼接起来，再乘以一个大矩阵，最终融合得到一个信息矩阵。会给到FFN进行计算。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/20-transformer_attention_heads_weight_matrix_o.png" style="display:block; margin:auto" width="70%"></p><h2 id="注意力总结"><a href="#注意力总结" class="headerlink" title="注意力总结"></a>注意力总结</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/21-transformer_multi-headed_self-attention-recap.png" style="display:block; margin:auto" width="80%"></p><h2 id="Attention图示"><a href="#Attention图示" class="headerlink" title="Attention图示"></a>Attention图示</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/22-transformer_self-attention_visualization_2.png" style="display:block; margin:auto" width="40%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/23-transformer_self-attention_visualization_3.png" style="display:block; margin:auto" width="40%"></p><h1 id="前向神经网络"><a href="#前向神经网络" class="headerlink" title="前向神经网络"></a>前向神经网络</h1><p><code>Position-wise Feed-Forward Network</code>，会对每个位置过两个线性层，其中使用<a href="https://plmsmile.github.io/2017/11/23/cs224n-notes3-neural-networks/#relu">ReLU</a>作为激活函数。<br>$$<br>\rm{FFN}(x) = \rm{Linear}(\rm{ReLU}(\rm{Linear}(x))) = \rm{max}(0, xW_1 + b_1)W_2 + b_2<br>$$</p><h1 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码"></a>位置编码</h1><p><strong>词向量+位置信息=带位置信息的词向量</strong><br>$$<br>\rm{PE}(pos, 2i) = \sin (\rm{pos} / 10000^{\frac{2i}{d}})<br>$$</p><p>$$<br>\rm{PE}(pos, \rm{2i+1}) = \cos (\rm{pos} / 10000^{\frac{2i}{d}})<br>$$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/24-transformer_positional_encoding_vectors.png" style="display:block; margin:auto" width="70%"></p><p><strong>示例</strong></p><p>再把sin和cos的两个值拼接起来，就得到如下图所示。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/26-transformer_positional_encoding_example.png" style="display:block; margin:auto" width="70%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/27-transformer_positional_encoding_large_example.png" style="display:block; margin:auto" width="60%"></p><h1 id="Encoder-Block"><a href="#Encoder-Block" class="headerlink" title="Encoder-Block"></a>Encoder-Block</h1><h2 id="残差连接"><a href="#残差连接" class="headerlink" title="残差连接"></a>残差连接</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/28-transformer_resideual_layer_norm.png" style="display:block; margin:auto" width="50%"></p><h2 id="层归一化"><a href="#层归一化" class="headerlink" title="层归一化"></a>层归一化</h2><p><a href="https://plmsmile.github.io/2018/03/30/35-nerual-network-optim/#%E5%B1%82%E5%BD%92%E4%B8%80%E5%8C%96">层归一化</a></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/29-transformer_resideual_layer_norm_2.png" style="display:block; margin:auto" width="50%"></p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/30-transformer_resideual_layer_norm_3.png" style="display:block; margin:auto" width="80%"></p><h1 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h1><h2 id="单步"><a href="#单步" class="headerlink" title="单步"></a>单步</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/31-transformer_decoding_1.gif" style="display:block; margin:auto" width="60%"></p><h2 id="多步"><a href="#多步" class="headerlink" title="多步"></a>多步</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/32-transformer_decoding_2.gif" style="display:block; margin:auto" width="60%"></p><h2 id="Linear-Softmax"><a href="#Linear-Softmax" class="headerlink" title="Linear-Softmax"></a>Linear-Softmax</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/33-transformer_decoder_output_softmax.png" style="display:block; margin:auto" width="50%"></p><h1 id="模型样例"><a href="#模型样例" class="headerlink" title="模型样例"></a>模型样例</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/34-vocabulary.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/35-one-hot-vocabulary-example.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/36-output_target_probability_distributions.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/paper/transformer/37-output_trained_model_probability_distributions.png" style="display:block; margin:auto" width="60%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大名鼎鼎的Transformer，&lt;a href=&quot;https://arxiv.org/abs/1706.03762&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Attention Is All You Need&lt;/a&gt;
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Self-Attention" scheme="http://plmsmile.github.io/tags/Self-Attention/"/>
    
      <category term="机器翻译" scheme="http://plmsmile.github.io/tags/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Transformer" scheme="http://plmsmile.github.io/tags/Transformer/"/>
    
      <category term="多头注意力" scheme="http://plmsmile.github.io/tags/%E5%A4%9A%E5%A4%B4%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
    
      <category term="残差连接" scheme="http://plmsmile.github.io/tags/%E6%AE%8B%E5%B7%AE%E8%BF%9E%E6%8E%A5/"/>
    
      <category term="层归一化" scheme="http://plmsmile.github.io/tags/%E5%B1%82%E5%BD%92%E4%B8%80%E5%8C%96/"/>
    
      <category term="位置编码" scheme="http://plmsmile.github.io/tags/%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Bidirectional Attention Flow</title>
    <link href="http://plmsmile.github.io/2018/05/22/47-bidaf/"/>
    <id>http://plmsmile.github.io/2018/05/22/47-bidaf/</id>
    <published>2018-05-22T12:01:43.000Z</published>
    <updated>2018-11-25T08:30:09.193Z</updated>
    
    <content type="html"><![CDATA[<p>阅读理解中很经典很有名的BiDAF模型。<a id="more"></a> </p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h2><p>$$<br>P = (w^P_1, w^P_2, \cdots, w^P_m)<br>$$</p><p>$$<br>Q = (w^Q_1,w^Q_2, \cdots, w^Q_n)<br>$$</p><p>$$<br>A = (w^A_1, w^A_2, \cdots, w^A_k)<br>$$</p><p>$$<br>p_{start} \quad p_{end}<br>$$</p><ul><li>望燕</li><li>枝俏</li><li>索寒</li><li>盘峰</li><li>漫枫</li><li>照月、焕月、（<del>揽月</del>）</li><li>后阳</li><li>（蚍蜉 ）撼树</li><li>永诀</li><li>（龙岩 ）上杭</li><li>黔驴</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阅读理解中很经典很有名的BiDAF模型。
    
    </summary>
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/categories/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/tags/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
      <category term="BiDAF" scheme="http://plmsmile.github.io/tags/BiDAF/"/>
    
  </entry>
  
  <entry>
    <title>R-Net (Gated Self-Matching Networks)</title>
    <link href="http://plmsmile.github.io/2018/05/15/46-rnet-selfmatch/"/>
    <id>http://plmsmile.github.io/2018/05/15/46-rnet-selfmatch/</id>
    <published>2018-05-15T02:46:49.000Z</published>
    <updated>2018-11-25T08:30:09.149Z</updated>
    
    <content type="html"><![CDATA[<p>微软亚研院和北大的阅读理解模型R-Net。<a id="more"></a> </p><blockquote><ol><li>Gated Attention-based RNN 来获得question-aware passage representation，即编码P</li><li>Self-matching Attention来修正编码P，即P与自己做match，有效从全文中编码信息</li><li>Pointer Network预测开始和结束位置</li></ol></blockquote><p>论文地址：</p><ul><li><a href="http://www.aclweb.org/anthology/P17-1018" target="_blank" rel="noopener">Gated Self-Matching Networks for Reading Comprehension and Question Answering</a></li><li><a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2017/05/r-net.pdf" target="_blank" rel="noopener">R-NET: MACHINE READING COMPREHENSION WITH SELF-MATCHING NETWORKS </a></li></ul><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="经典模型"><a href="#经典模型" class="headerlink" title="经典模型"></a>经典模型</h2><p><strong>1. Match-LSTM</strong></p><p><a href="https://plmsmile.github.io/2018/05/09/45-match-lstm/">Match-LSTM and Answer Pointer笔记</a></p><p><strong>2. Dynamic Coatteion Network</strong></p><p><a href="https://plmsmile.github.io/2018/03/15/32-dynamic-coattention-network/">DCN笔记</a>。<a href="https://plmsmile.github.io/2018/03/14/31-co-attention-vqa/">Coattention</a>同时处理P和Q，动态迭代预测答案的位置。</p><p><strong>3. Bi-Directional Attention Flow Network</strong></p><h2 id="本文模型概要"><a href="#本文模型概要" class="headerlink" title="本文模型概要"></a>本文模型概要</h2><p><strong>1. BiRNN 分别编码P和Q</strong> </p><p>分别编码Question和Passage</p><p><strong>2. gated matching layer 编码Q-Aware的Passage</strong></p><p><code>Gated Attention-based RNN</code>。在<a href="https://plmsmile.github.io/2018/05/09/45-match-lstm/#match-lstm">Match-LSTM</a>上添加了<strong>门机制</strong>。</p><ul><li>段落有多个部分，根据与Q的相关程度，分配重要性权值</li><li>忽略不重要的，强调重要的部分</li></ul><p><strong>3. self-matching layer</strong></p><p>再次从整个Passage中提取信息。它的<code>缺点</code>：</p><ul><li>RNN只能存储少部分上下文内容</li><li>一个候选答案不知道其他部分的线索</li></ul><p>解决方法：<strong>对P做self-match</strong>。使用Gated Attention-based RNN对P和P自己做match。</p><p><strong>4. pointer-network</strong></p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>BiRNN，GARNN（P+Q），GARNN-Selfmatch（P+P），Pointer Network</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/rnet.png" style="display:block; margin:auto" width="80%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/gan-selfmatch.png" style="display:block; margin:auto" width="80%"></p><h2 id="BiRNN编码Q和P"><a href="#BiRNN编码Q和P" class="headerlink" title="BiRNN编码Q和P"></a>BiRNN编码Q和P</h2><p>$Q={w_t^Q}_{t=1}^m$，$P={w_t^P}_{t=1}^n$。 P是n个单词，Q是m个单词。</p><p><strong>词向量和字符向量</strong></p><p><code>词向量</code>：${e_t^Q}_{t=1}^m$、${e_t^P}_{t=1}^n$</p><p><code>字符向量</code>：${c_t^Q}_{t=1}^m$、${c_t^P}_{t=1}^n$</p><p>字符向量，使用RNN，用每个单词的最后时刻的隐状态，作为字符向量。有助于处理OOV词汇。</p><p><strong>编码Question和Passage</strong><br>$$<br>\mathbf u_t^Q = \rm{BiRNN }(u_{t-1}^Q, [e_t^Q, c_t^Q])<br>$$</p><p>$$<br>\mathbf u_t^P = \rm{BiRNN }(u_{t-1}^P, [e_t^P, c_t^P])<br>$$</p><h2 id="Gated-Attention-based-RNN"><a href="#Gated-Attention-based-RNN" class="headerlink" title="Gated Attention-based RNN"></a>Gated Attention-based RNN</h2><p>要基于U（$U^Q$）去编码P（$U^P$） ，得到<strong>Question-Aware的Passage编码</strong>，$V^P$。</p><p><strong>1. Attention RNN</strong></p><p>$p_t$与$q_j$两个单词的<strong>相关性函数</strong>（能量函数）<br>$$<br>s_j^t = v^T \tanh (W_u^Q\mathbf u_j^Q + W_u^P \mathbf u_t^P + W_v^P \mathbf v_{t-1}^P), \quad j = 1, \cdots, m<br>$$<br>$p_t$与所有Q单词的<strong>注意力权值</strong>$\mathbf \alpha^t$ <code>doc 2 query attention</code><br>$$<br>\alpha_{j}^t = \rm{softmax}(s_j^t)<br>$$<br>$p_t$基于$\mathbf \alpha^t$<strong>对$Q$的信息汇总</strong>（注意力）<code>attention pooling vector of the whole question</code><br>$$<br>\mathbf c_t = \sum_{i=1}^m \alpha_i^t \mathbf u_i^Q<br>$$<br>实际上：$\mathbf c_t  = \rm{attn}(U^Q, [\mathbf u_t^P, \mathbf v_{t-1}^P])​$。</p><p><strong>注意力$\mathbf c_t $</strong>和<strong>上一时刻隐状态 $\mathbf v_{t-1}^P$</strong>，输入RNN，<strong>计算当前的信息</strong><br>$$<br>\mathbf v_t^P = \rm{RNN}(\mathbf v_{t-1}^P, \mathbf c_t)<br>$$<br>每个$\mathbf v_t^P$动态地合并了来自整个Q的匹配信息。</p><p><strong>2. Match RNN</strong></p><p> <a href="https://plmsmile.github.io/2018/05/09/45-match-lstm/#match-lstm">Match-LSTM</a>。在输入RNN计算时，把当前$\mathbf u_t^P$也输入进去，带上Passage的信息。输入是<strong>$\rm{input}=[\mathbf u_t^P, \mathbf c_t]$</strong>。<br>$$<br>\mathbf v_t^P = \rm{RNN}(\mathbf v_{t-1}^P, [\mathbf u_t^P, \mathbf c_t])<br>$$<br><strong>3. Gated Attention-based RNN</strong></p><p>用门机制去控制每个$p_t$的重要程度。<br>$$<br>g_t = \rm{sigmoid}(W_g \cdot [\mathbf u_t^P, \mathbf c_t])<br>$$</p><p>$$<br>[\mathbf u_t^P, \mathbf c_t]^* = g_t \odot [\mathbf u_t^P, \mathbf c_t]<br>$$</p><p>$$<br>\mathbf v_t^P = \rm{RNN}(\mathbf v_{t-1}^P, [\mathbf u_t^P, \mathbf c_t]^*)<br>$$</p><p>GARNN的<strong>门机制</strong></p><ul><li>与GRU和LSTM不同</li><li>门机制是基于<strong>当前$p_t$</strong>和它的对应的Q的<strong>注意力向量$\mathbf c_t$</strong>（包含当前$p_t$和Q的关系）</li><li><code>模拟</code>了阅读理解中，<strong>只有$P$的一部分才与问题相关</strong>的特点</li></ul><p>最终得到了<code>question-aware passage representation</code> ：${\mathbf v_t^P}_{t=1}^n$。它的缺点如下：</p><ul><li>对Passage的上下文感知太少</li><li>候选答案对它窗口之外的线索未知</li><li>Question和Passage在词法、句法上有区别</li></ul><h2 id="Self-Matching-Attention"><a href="#Self-Matching-Attention" class="headerlink" title="Self-Matching Attention"></a>Self-Matching Attention</h2><p>为了充分利用Passage的上下文信息。${\mathbf v_t^P}_{t=1}^n$</p><p><strong>对P做self-match</strong>。使用Gated Attention-based RNN对P和P自己做match。</p><p>注意力计算<br>$$<br>s_j^t = v^T \tanh (W_v^P \mathbf v_j^P + W_v^{\bar P} \mathbf v_t^P), \quad j = 1, \cdots, n<br>$$</p><p>$$<br>\alpha_{j}^t = \rm{softmax}(s_j^t)<br>$$</p><p>$$<br>\mathbf c_t = \sum_{i=1}^n \alpha_i^t \mathbf v_i^P<br>$$</p><p>RNN计算<br>$$<br>\mathbf h_t^P = \rm{BiRNN}(\mathbf h_{t-1}^P, [\mathbf v_t^P, \mathbf c_t]^*)<br>$$<br>Self-Matching根据当前p单词、Q，从整个Passage中提取信息。<strong>最终得到Passage的表达$H^P$</strong>。</p><h2 id="Output-Layer"><a href="#Output-Layer" class="headerlink" title="Output Layer"></a>Output Layer</h2><p>其实就是个<a href="https://plmsmile.github.io/2018/05/09/45-match-lstm/#answer-pointer%E5%B1%82">Pointer Network的边界模型</a>，预测起始位置$p^1$和结束位置$p^2$。用RNN计算两次。</p><p><strong>1. 基于Q计算初始隐状态</strong></p><p>初始<code>hidden state</code>是Question的<code>attention-pooling vector</code><br>$$<br>\mathbf h_{t-1}^Q = \mathbf r^Q<br>$$<br>基于Q的编码和一组参数$V_r^Q$，利用注意力机制计算$\mathbf r^Q$<br>$$<br>\mathbf r^Q = \rm{attn}(U^Q, V_r^Q)<br>$$</p><p>$$<br>s_j = \mathbf v^T \tanh(W_u^Q \mathbf u_j^Q + W_v^Q V_r^Q), \quad j = 1, \cdots, m<br>$$</p><p>$$<br>\alpha_i = \rm{softmax}(s_i) = \frac{\exp(s_i)}{\sum_{j=1}^m \exp(s_j)}<br>$$</p><p>$$<br>\mathbf r^Q = \sum_{i=1}^m \alpha_i  \mathbf u_i^Q<br>$$</p><p><strong>2. RNN计算开始位置和结束位置</strong></p><p>计算t时刻的<code>attention-pooling passage</code> （<strong>注意力$\mathbf c_t$</strong>）<br>$$<br>s_j^t = \mathbf v^T \tanh(W_h^P\mathbf h_j^P + W_h^a \mathbf h_{t-1}^a)<br>$$</p><p>$$<br>\alpha_i^t = \rm{softmax}(s_j^t)<br>$$</p><p>$$<br>\mathbf c_t = \sum_{i=1}^n \alpha_i^t \mathbf h_i^P<br>$$</p><p>RNN前向计算<br>$$<br>\mathbf h_t^a = \rm{RNN} (\mathbf h_{t-1}^a, \mathbf c_t)<br>$$<br>基于注意力权值去选择位置<br>$$<br>p^t = \arg \max_{i}(a_i^t)<br>$$</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p><strong>数据集</strong></p><p>训练集80%，验证集10%，测试10%</p><p><strong>分词</strong></p><p>斯坦福的CoreNLP中的tokenizer</p><p><strong>词向量</strong></p><p>预训练好的Glove Vectors。训练中保持不变。</p><p><strong>字符向量</strong></p><p>单层的双向GRU，末尾隐状态作为该单词的字符向量</p><p><strong>BiRNN编码Question和Passage</strong></p><p>3层的双向GRU</p><p><strong>Hidden Size大小</strong></p><p>所有都是75</p><p><strong>Dropout</strong></p><p>每层之间的DropOut比例是0.2</p><p><strong>优化器</strong></p><p><a href="https://plmsmile.github.io/2018/03/30/35-nerual-network-optim/#%E5%AD%A6%E4%B9%A0%E7%8E%87%E9%80%92%E5%87%8F">AdaDelta</a>。初始学习率为1，衰减率$\beta = 0.95$，$\epsilon = 1e^{-6}$</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/results.png" style="display:block; margin:auto" width="80%"></p><h2 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/gating-match.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/question-passage-analysis.png" style="display:block; margin:auto" width="80%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微软亚研院和北大的阅读理解模型R-Net。
    
    </summary>
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/categories/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器阅读" scheme="http://plmsmile.github.io/tags/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB/"/>
    
      <category term="Gated Attention RNN" scheme="http://plmsmile.github.io/tags/Gated-Attention-RNN/"/>
    
      <category term="Self-Matching" scheme="http://plmsmile.github.io/tags/Self-Matching/"/>
    
      <category term="RNet" scheme="http://plmsmile.github.io/tags/RNet/"/>
    
      <category term="Pointer Network" scheme="http://plmsmile.github.io/tags/Pointer-Network/"/>
    
  </entry>
  
  <entry>
    <title>Match-LSTM and Answer Pointer</title>
    <link href="http://plmsmile.github.io/2018/05/09/45-match-lstm/"/>
    <id>http://plmsmile.github.io/2018/05/09/45-match-lstm/</id>
    <published>2018-05-09T06:20:56.000Z</published>
    <updated>2018-11-25T08:30:09.115Z</updated>
    
    <content type="html"><![CDATA[<p>最初的Match-LSTM阅读理解模型。<a id="more"></a> </p><p>论文地址：<a href="https://arxiv.org/abs/1608.07905" target="_blank" rel="noopener">Machine Comprehension Using Match-LSTM and Answer Pointer</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="阅读理解任务"><a href="#阅读理解任务" class="headerlink" title="阅读理解任务"></a>阅读理解任务</h2><p>后面会详细补充。</p><p>传统解决问答的方法：语言分析、特征工程等，具体包括句法分析、命名实体识别、问题分类、语义分析等。</p><h2 id="Squad数据集"><a href="#Squad数据集" class="headerlink" title="Squad数据集"></a>Squad数据集</h2><ul><li>答案是文章中出现的任意长度片段</li><li>Wiki文章为主</li><li>众包人工标注产生</li><li>每个问题3人标注，降低了人工标注误差</li><li>数量较大：500多篇文章，2万多个段落，10万个问题</li><li>鼓励用自己的语言提问</li></ul><h2 id="Match-LSTM"><a href="#Match-LSTM" class="headerlink" title="Match-LSTM"></a>Match-LSTM</h2><p><strong>1. 文本蕴含任务</strong></p><p>一个前提集合P，一个假设H。去预测P里是否能蕴含出H。</p><p><strong>2. Match-LSTM</strong></p><p>有K个前提${P_1, \cdots, P_K}$，1个假设$H$。假设的长度为m。遍历假设的每一个词汇$h_i$</p><ul><li><p>在$h_i$处，利用注意力机制，综合K个前提，得到一个向量$p_i$ </p></li><li><p>聚合匹配$[h_i, p_i]$一起，给到LSTM</p></li></ul><p>其实类似于Attention-Based NMT的解码过程。</p><h2 id="Pointer-Net"><a href="#Pointer-Net" class="headerlink" title="Pointer-Net"></a>Pointer-Net</h2><p>从一个输入序列中，选择一个位置作为输出。</p><ul><li>序列模型：选择多个位置，就组成一个序列</li><li>边界模型：选择开始和结束位置，中间的片段是答案</li></ul><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>段落$P$有m个单词，问题$Q$有n个单词。</p><h2 id="LSTM编码层"><a href="#LSTM编码层" class="headerlink" title="LSTM编码层"></a>LSTM编码层</h2><p>单向LSTM编码<br>$$<br>H^p = \rm{LSTM}(P), \quad H^q = \rm{LSTM}(Q)<br>$$<br>取每一时刻的隐状态，得到对文章和问题的编码。$H^p \in \mathbb  R^{m \times h}, H^q \in \mathbb R^{n \times h}$。$h$是编码的维度。</p><h2 id="Match-LSTM层"><a href="#Match-LSTM层" class="headerlink" title="Match-LSTM层"></a>Match-LSTM层</h2><p>这一层实际上是一个LSTM，<strong>输入依次是P中的各个单词$p_i$</strong>。每一时刻，利用注意力机制计算相对应的Q的编码。</p><p><strong>问题–前提，段落–假设，看问题蕴含P的哪些部分</strong>。</p><p>先计算<code>注意力权值</code><br>$$<br>\overrightarrow{ G_i} = \tanh (W^qH^q + (W^p\mathbf h_i^p + W^r \overrightarrow{\mathbf h_{i-1}^r} + \mathbf b^p) \otimes \mathbf e_Q)<br>$$</p><p>$$<br>\overrightarrow{ \mathbf \alpha_i} = \rm{softmax}(\mathbf w^T  \overrightarrow{ G_i} + b \otimes \mathbf e_Q)<br>$$</p><p>利用注意力机制，计算所有Q基于当前$p_i$的<code>注意力</code>，把<strong>注意力和$\mathbf h_i^p$拼接起来</strong><br>$$<br>\overrightarrow {\mathbf z_i} = [\mathbf h_i^p, \underbrace{H^q \overrightarrow{ \mathbf \alpha_i}}_{\color{blue}{\rm{attention}}}]<br>$$<br>把match后的结果，输入到LSTM，<br>$$<br>\overrightarrow {\mathbf h_i^r} = \rm{LSTM}(\overrightarrow {\mathbf z_i}, \overrightarrow {\mathbf h_{i-1}^r})<br>$$<br>定义从右向左，得到$\overleftarrow {\mathbf h_i^r}$。最终，拼接两个方向的向量，得到<br>$$<br>H^r = [\overrightarrow{H^r}, \overleftarrow{H^r}] \quad \in \mathbb R^{m \times 2h}<br>$$</p><h2 id="Answer-Pointer层"><a href="#Answer-Pointer层" class="headerlink" title="Answer-Pointer层"></a>Answer-Pointer层</h2><p>输入Match-LSTM层对Passage的编码结果$H^r$，输出一个序列。</p><p><strong>序列模型</strong></p><p>不断生成一个序列$\mathbf a = (a_1, a_2, \cdots)$，表示P中的位置。</p><p>在P的末尾设置一个停止标记，如果选择它，则停止迭代。新的$\bar H^r \in \mathbb R^{(m+1) \times 2h}$</p><p>1、计算<strong>注意力权值</strong>$\mathbf \beta_k$，$\beta_{k,j}$表示，选$p_j$作为$a_k$的概率<br>$$<br>F_k = \tanh(V \bar H^r + (W^a \mathbf h_{k-1}^a + \mathbf b^a) \otimes \mathbf e_{(m+1)})<br>$$</p><p>$$<br>\mathbf \beta_k = \rm{softmax}(\mathbf v^TF_k + \mathbf c \otimes \mathbf e_{(m+1)})<br>$$</p><p>2、使用<strong>注意力机制</strong>得到<strong>当前时刻需要的$H^r$的信息</strong>，结合<strong>上一时刻的隐状态</strong>，输入到LSTM中<br>$$<br>\mathbf h_k^a = \overrightarrow{\rm{LSTM}} ( \underbrace{\bar H^r \mathbf \beta_k^T}<em>{\color{blue}{\rm{attention}}}, \mathbf h</em>{k-1}^r)<br>$$<br>答案的概率计算如下：<br>$$<br>p(\mathbf a \mid H^r) = \prod_{k} p(a_k \mid a_1, \cdots, a_{k-1}, H^r)<br>$$</p><p>$$<br>p(a_k = j \mid a_1, \cdots, a_{k-1}, H^r) = \beta_{k,j}<br>$$</p><p>目标函数：<br>$$</p><ul><li>\sum_{n=1}^N \log p(\mathbf a_n \mid P_n, Q_n)<br>$$<br><strong>边界模型</strong></li></ul><p>不用预测完整的序列，只<strong>预测开始和结束位置</strong>就可以了。<br>$$<br>p(\mathbf a \mid H^r) = p(a_s \mid H^r) \cdot p(a_e \mid a_s, H^r)<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最初的Match-LSTM阅读理解模型。
    
    </summary>
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/categories/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器阅读" scheme="http://plmsmile.github.io/tags/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB/"/>
    
      <category term="Match-LSTM" scheme="http://plmsmile.github.io/tags/Match-LSTM/"/>
    
      <category term="Pointer Net" scheme="http://plmsmile.github.io/tags/Pointer-Net/"/>
    
  </entry>
  
  <entry>
    <title>强化学习在NLP中的应用</title>
    <link href="http://plmsmile.github.io/2018/05/03/44-reinforce-nlp/"/>
    <id>http://plmsmile.github.io/2018/05/03/44-reinforce-nlp/</id>
    <published>2018-05-03T06:00:55.000Z</published>
    <updated>2018-11-25T08:30:09.059Z</updated>
    
    <content type="html"><![CDATA[<p>强化学习在自然语言处理中的应用。<a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="阿里小蜜的任务型问答"><a href="#阿里小蜜的任务型问答" class="headerlink" title="阿里小蜜的任务型问答"></a>阿里小蜜的任务型问答</h1><p>小蜜包含<code>QA问答</code>、<code>开放域聊天</code>、<code>任务型对话</code>。</p><h2 id="任务型对话"><a href="#任务型对话" class="headerlink" title="任务型对话"></a>任务型对话</h2><blockquote><p>1、TaskBot：由任务驱动的多轮对话，每一轮去读取用户的slot信息，直到槽填满，全部ok</p><p>2、Action Policy：强化学习去管理多轮对话，小蜜每一轮给出一个动作，询问用户或者完成订单</p><p>3、Belief Tracker：深度学习去提取slot信息，LSTM-CRF标注</p></blockquote><p><strong>1. TaskBot</strong></p><p>任务型对话是指<strong>由任务驱动的多轮对话</strong>。在对话中帮助用户完成某个任务，比如订机票、订酒店等。</p><ul><li><code>传统</code>：用<a href="https://plmsmile.github.io/2018/05/02/43-intent-detection-slot-filling/">slot filling</a>来做，但需要大量人工模板、规则和训练语料</li><li><code>小蜜</code>：基于<strong>强化学习</strong>和<strong>Neural Belief Tracker</strong>的<strong>端到端</strong>可训练的TaskBot方案</li></ul><p>在每轮对话中，都需要抽取用户当前给的<strong>slot状态</strong>（<strong>任务需要的组件信息</strong>）。不断地去填满所有的slot，最后去下单。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/vslots.png" style="display:block; margin:auto" width="60%"></p><p><strong>2. Action Policy - 强化学习</strong></p><p>系统如何给用户合适的回复：接着询问用户、出订单。使用<a href="https://plmsmile.github.io/2018/04/01/37-reinforce-learning/">强化学习</a>去<strong>管理这个多轮对话</strong>。各个定义如下：</p><ul><li>智能体：小蜜（系统）</li><li><strong>策略</strong>：小蜜给用户的回答，反问哪个slot、出订单</li><li>环境：用户</li><li><strong>状态</strong>：用户回答中提取出的slot状态（信息）</li><li><strong>反馈</strong>：继续聊天、退出、下单</li></ul><p><strong>3. Belief Tracker - 深度学习</strong></p><p>Belief Tracker用来提取用户的slot状态，实际是一个序列标注问题。使用<code>LSTM-CRF</code>进行标注。传统是<a href="[slot filling](https://plmsmile.github.io/2018/05/02/43-intent-detection-slot-filling/">slot filling</a>)</p><h2 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h2><p>系统分为下面三层。</p><ul><li><code>数据预处理层</code> ： 分词、实体抽取等。</li><li><code>端到端的对话管理层</code> ：强化学习</li><li><code>任务生成层</code></li></ul><p>强化学习包括：</p><ul><li><strong>Intent Network</strong> ：处理用户输入</li><li><strong>Neural Belief Tracker</strong> ：记录读取slot信息</li><li><strong>Policy Network</strong> ：决定小蜜的回答：反问哪个slot 或 出订单。</li></ul><h2 id="Intent-Network"><a href="#Intent-Network" class="headerlink" title="Intent Network"></a>Intent Network</h2><p><a href="https://plmsmile.github.io/2018/03/31/36-alime-chat/#%E6%84%8F%E5%9B%BE%E5%88%86%E7%B1%BB">阿里小蜜意图分类</a>。使用CNN学一个<code>sentence embedding</code>来表示用户的意图。后面给到Policy Network。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/cnn.png" style="display:block; margin:auto" width="70%"></p><h2 id="Belief-Tracker"><a href="#Belief-Tracker" class="headerlink" title="Belief Tracker"></a>Belief Tracker</h2><p>使用BiLSTM-CRF来进行标记句子，提取出slot信息。</p><table><thead><tr><th style="text-align:center">句子</th><th style="text-align:center">first</th><th style="text-align:center">class</th><th style="text-align:center">fares</th><th style="text-align:center">from</th><th style="text-align:center">Boston</th><th style="text-align:center">to</th><th style="text-align:center">Denver</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Slots</strong></td><td style="text-align:center">B-机舱类别</td><td style="text-align:center">I-机舱类别</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">B-出发地</td><td style="text-align:center">O</td><td style="text-align:center">B-目的地</td></tr></tbody></table><h2 id="Policy-Network"><a href="#Policy-Network" class="headerlink" title="Policy Network"></a>Policy Network</h2><p>四个关键：episode、reward、state、action。</p><p><strong>1. 一轮交互的定义</strong></p><ul><li>episode开始：识别出用户意图为<code>购买机票</code></li><li>episode结束：用户<code>成功购买机票</code> 或 <code>退出会话</code></li></ul><p><strong>2. 反馈</strong></p><p>获取用户的反馈非常关键。</p><ul><li>收集线上用户的反馈，如用户下单、退出等行为</li><li>使用预训练环境</li></ul><p>预训练环境的两部分反馈</p><ul><li>Action Policy ：<a href="https://plmsmile.github.io/2018/04/22/41-strategy-learning/#%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6">策略梯度</a> 更新模型。正反馈$r=1$，负反馈$r=-1$</li><li>Belief Tracker：仅使用正反馈作为正例，出现错误由小二标出正确的slots</li></ul><p><strong>3. 状态</strong></p><p>当前slot：Intent Network得到的Sentence Embedding，再过Belief Tracker得到的slot信息。</p><p>使用当前slot+历史slot，过线性层，softmax，到各个Action。</p><p><strong>4. 动作</strong></p><p>订机票，Action是离散的。主要是：<strong>对各个Slot的反问</strong>和<strong>下单</strong>。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/pretrained-alime.png" style="display:block; margin:auto" width="70%"></p><h2 id="整体模型"><a href="#整体模型" class="headerlink" title="整体模型"></a>整体模型</h2><p>符号定义</p><ul><li>$q_i$ ：当前用户的问题</li><li>$a_{i-1}$ ：上一轮问题的答案</li><li>$S_i$ ：历史slot信息</li></ul><p>$$<br>\begin{align}<br>&amp; O_i = \rm{IntentNet}(q_i)  \<br>&amp; C_i = \rm{BeliefTracker}(q_i, a_{i-1}) \<br>&amp; X_i = O_i \oplus C_i \oplus S_{i-1} \<br>&amp; H_i = \rm{Linear} (X_i) \<br>&amp; P(\cdot) = \rm{Softmax}(H_i)<br>\end{align}<br>$$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/TaskBot.png" style="display:block; margin:auto" width="70%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强化学习在自然语言处理中的应用。
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="强化学习" scheme="http://plmsmile.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TaskBot" scheme="http://plmsmile.github.io/tags/TaskBot/"/>
    
  </entry>
  
  <entry>
    <title>意图识别和槽填充</title>
    <link href="http://plmsmile.github.io/2018/05/02/43-intent-detection-slot-filling/"/>
    <id>http://plmsmile.github.io/2018/05/02/43-intent-detection-slot-filling/</id>
    <published>2018-05-02T06:11:38.000Z</published>
    <updated>2018-11-25T08:30:08.983Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1609.01454" target="_blank" rel="noopener">Attention-Based Recurrent Neural Network Models for Joint Intent Detection and Slot Filling</a> <a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="语义理解的两个方面"><a href="#语义理解的两个方面" class="headerlink" title="语义理解的两个方面"></a>语义理解的两个方面</h2><p><strong>1. 语义理解的两个主要方面</strong></p><p>在对话系统中，<code>Spoken language understanding</code>（语言理解）很重要。主要是下面两个关键点：</p><ul><li>理解说话人的意图 – <strong>意图检测</strong>（Intent Detection）</li><li>从句子中提取语义成分 – <strong>槽填充</strong>（Slot Filling）</li></ul><p><strong>2. 意图检测</strong></p><p>意图检测是一个语义句子的<code>分类问题</code>。可以用SVM、DNN来进行分类。 </p><p><strong>3. 槽填充</strong></p><p>槽填充是要读取句子中的一些语义成分，是一个<code>序列标注问题</code>。可以用MEMMs来做。</p><p><strong>4. 处理</strong></p><p>传统一般是用两个模型去分别处理意图检测和槽填充，现在可以使用一个模型<a href="https://plmsmile.github.io/2017/10/10/attention-model/#encoder-decoder">Encoder-Decoder</a>去同时解决这两个问题。</p><p><strong>5. 对齐和注意力</strong></p><p>序列标注具有明确的对齐信息。</p><p>输入n，输出n，相同长度。输入和输出每一个位置严格<strong>对齐</strong>。Alignment-based RNN。</p><p>输入n，输出m，不同长度，本身不具有对齐信息。需要<a href="https://plmsmile.github.io/2017/10/10/attention-model/#attention-model">注意力机制</a>来进行对齐。Attention-based Encoder-Decoder。</p><h2 id="槽填充"><a href="#槽填充" class="headerlink" title="槽填充"></a>槽填充</h2><p><strong>1. 问题</strong></p><p><strong>槽填充</strong>是一个序列标注问题，具有明确的对齐信息。</p><table><thead><tr><th style="text-align:center">句子</th><th style="text-align:center">first</th><th style="text-align:center">class</th><th style="text-align:center">fares</th><th style="text-align:center">from</th><th style="text-align:center">Boston</th><th style="text-align:center">to</th><th style="text-align:center">Denver</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Slots</strong></td><td style="text-align:center">B-机舱类别</td><td style="text-align:center">I-机舱类别</td><td style="text-align:center">O</td><td style="text-align:center">O</td><td style="text-align:center">B-出发地</td><td style="text-align:center">O</td><td style="text-align:center">B-目的地</td></tr></tbody></table><p><strong>意图</strong>：订机票。</p><p>本质上是学得一个<strong>映射函数</strong>$\cal {X \to Y}$。训练样本：${ (\mathbf x^{(n)}, \mathbf y^{(n)}), n=1,\cdots, N }$。</p><p><strong>2. RNN 槽填充</strong></p><p>符号定义</p><ul><li>$\mathbf x$ ：输入序列</li><li>$\mathbf y$ ：输出序列</li><li>$y_t$ ：第t个单词的slot lable</li></ul><p>预测$y_t$，需要$\mathbf x$和$y_{t-1}$。</p><p><strong>训练</strong>是找到一个最大的使概率似然最大的参数$\theta$ ：<br>$$<br>\arg \max_{\theta} \prod P(y_t \mid y_{t-1}, \mathbf x; \theta)<br>$$<br><strong>预测</strong>是找到最大概率的标记序列$\mathbf y$<br>$$<br>\mathbf {\hat y} = \arg \max_{\mathbf y} P(\mathbf y \mid \mathbf x)<br>$$<br><strong>3. RNN Encoder-Decoder 槽填充</strong></p><p>序列标注有明确的对齐信息，所以先没有使用注意力机制。把$\mathbf x$编码为语义向量$\mathbf c$：<br>$$<br>P(\mathbf y) = \prod_{t=1}^T P(y_t \mid y_{t-1}, \mathbf c)<br>$$<br>Seq2Seq可以处理不同长度的映射信息，这时没有明确的对齐信息。但是可以使用注意力机制来进行<code>软对齐Soft Alignment</code>。</p><h1 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h1><h2 id="Seq2Seq方法"><a href="#Seq2Seq方法" class="headerlink" title="Seq2Seq方法"></a>Seq2Seq方法</h2><p>Encoder-Decoder with Aligned Inputs</p><p><strong>1. 编码</strong></p><p>使用双向RNN对输入序列进行编码，$\mathbf {h_i} = [fh_i, bh_i]$。</p><p><strong>2. 意图识别</strong></p><p>最后时刻的隐状态$\mathbf {h_T}$携带了整个句子的信息，使用它进行意图分类。</p><p><strong>3.  槽填充</strong></p><p>用单向RNN作为Decoder。初始$\mathbf s_0= \mathbf h_T$。有3种方式：</p><p>a. 只有注意力输入</p><p>b. 只有对齐输入</p><p>c. 有注意力和对齐两个输入</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/en-decoder-slot-filling.png" style="display:block; margin:auto" width="60%"></p><p><strong>4. 带注意力和对齐输入的RNN槽填充计算方式</strong><br>$$<br>s_0 = h_T<br>$$<br>计算注意力的上下文$\mathbf c_i$<br>$$<br>\alpha_{ij} = \rm{softmax}(e_{ij})<br>$$</p><p>$$<br>e_{ij} = g(\mathbf s_{i-1}, \mathbf h_k)<br>$$</p><p>$$<br>\mathbf c_i = \sum_{j=1}^T\alpha_{ij} \mathbf h_j<br>$$</p><p>计算新的状态<br>$$<br>s_i = f(\mathbf s_{i-1}, y_{i-1}, \mathbf h_i, \mathbf c_i)<br>$$</p><h2 id="基于注意力的RNN"><a href="#基于注意力的RNN" class="headerlink" title="基于注意力的RNN"></a>基于注意力的RNN</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/atten-rnn-slot-filling.png" style="display:block; margin:auto" width="60%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1609.01454&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Attention-Based Recurrent Neural Network Models for Joint Intent Detection and Slot Filling&lt;/a&gt;
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="注意力" scheme="http://plmsmile.github.io/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
    
      <category term="意图检测" scheme="http://plmsmile.github.io/tags/%E6%84%8F%E5%9B%BE%E6%A3%80%E6%B5%8B/"/>
    
      <category term="槽填充" scheme="http://plmsmile.github.io/tags/%E6%A7%BD%E5%A1%AB%E5%85%85/"/>
    
      <category term="RNN" scheme="http://plmsmile.github.io/tags/RNN/"/>
    
      <category term="对齐" scheme="http://plmsmile.github.io/tags/%E5%AF%B9%E9%BD%90/"/>
    
  </entry>
  
  <entry>
    <title>强化学习算法小结</title>
    <link href="http://plmsmile.github.io/2018/04/24/42-reinforce-conclusion-simple/"/>
    <id>http://plmsmile.github.io/2018/04/24/42-reinforce-conclusion-simple/</id>
    <published>2018-04-24T08:28:41.000Z</published>
    <updated>2018-11-25T08:30:08.939Z</updated>
    
    <content type="html"><![CDATA[<p>强化学习算法的简单总结，主要包括基于值函数/策略函数的学习方法、Actor-Critic算法。<a id="more"></a> </p><p>强化学习笔记： <a href="https://plmsmile.github.io/2018/04/01/37-reinforce-learning/">强化学习基础</a> 、<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/">基于值函数的学习方法</a>、<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/">基于值函数的学习方法</a> </p><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="强化学习的目标"><a href="#强化学习的目标" class="headerlink" title="强化学习的目标"></a>强化学习的目标</h1><p>强化学习的目标是<strong>学习到一个策略$\pi_{\theta}(a\mid s)$</strong>，来<strong>最大化这个策略的期望回报</strong>。<strong>希望智能体能够获得更多的回报</strong>。本质上是策略搜索。<br>$$<br>J(\theta) = E_{\tau \sim p_{\theta}(\tau)} [\sum_{t=0}^{T-1}\gamma ^tr_{t+1}]<br>$$</p><p>$$<br>J(\theta) = \int p_{\theta}(\tau) \cdot G(\tau) \, {\rm d}\tau<br>$$</p><h1 id="基于值函数的学习方法"><a href="#基于值函数的学习方法" class="headerlink" title="基于值函数的学习方法"></a>基于值函数的学习方法</h1><h2 id="策略迭代"><a href="#策略迭代" class="headerlink" title="策略迭代"></a>策略迭代</h2><p>已知模型。利用<strong>贝尔曼方程</strong>（<code>算均值</code>）迭代计算出$V(s)$，再算出$Q(s,a)$。选择最好的动作$a$去优化策略$\pi(s)$。<br>$$<br>\forall s, \quad<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>\forall s, \qquad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$</p><h2 id="值迭代"><a href="#值迭代" class="headerlink" title="值迭代"></a>值迭代</h2><p>已知模型。利用<strong>贝尔曼最优方程</strong>迭代算出$V(s)$，再算出$Q(s,a)$。选择最好的动作$a$去优化策略$\pi(s)$。<br>$$<br>\forall s \in S, \quad V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$</p><p>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>\forall s, \quad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$</p><h2 id="蒙特卡罗"><a href="#蒙特卡罗" class="headerlink" title="蒙特卡罗"></a>蒙特卡罗</h2><p>未知模型。从$(s,a)$<strong>随机游走，采集N个样本</strong>。使用<strong>所有轨迹回报平均值近似估计$Q(s,a)$</strong> ，再去改进策略。重复，直至收敛。<br>$$<br>Q^\pi(s, a)  \approx \hat Q^\pi(s, a) = \frac{1}{N} \sum_{n=1}^NG(\tau^{(n)})<br>$$</p><h2 id="时序差分算法"><a href="#时序差分算法" class="headerlink" title="时序差分算法"></a>时序差分算法</h2><p>无需知道完整轨迹就能对策略进行评估。</p><p>时序差分学习=动态规划-贝尔曼估计$G(\tau)$ + 蒙特卡罗采样-增量计算$Q(s,a)$</p><p>贝尔曼估计轨迹总回报$G(\tau)$<br>$$<br>G(\tau) \leftarrow r(s, a, s^\prime) + \gamma \cdot Q(s^\prime, a^\prime)<br>$$<br>增量计算$Q(s,a)$<br>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot<br>(\underbrace{ r+ \gamma \cdot Q(s^\prime, a^\prime)}<em>{\color{blue}{实际值}} -<br>\underbrace{Q(s, a)}</em>{\color{blue}{预期值}})<br>$$</p><h2 id="SARSA"><a href="#SARSA" class="headerlink" title="SARSA"></a>SARSA</h2><p>同策略的时序差分算法，是Q学习的改进。</p><p>1、当前状态$s$，当前动作$a$ （初始时选择$a=\pi^\epsilon(s)$，后续是更新得到的）</p><p>2、<strong>执行动作</strong>$a$，得到<strong>新状态</strong>$s^\prime$，得到<strong>奖励</strong>$r(s,a,s^\prime)$</p><p>4、<strong>依概率选择新动作</strong>$a = \pi^\epsilon(s^\prime)$，<strong>新状态新动作的值函数</strong>：$Q(s^\prime, a^\prime)$</p><p>5、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>6、更新状态和动作：$s = s^\prime, a = a^\prime$</p><h2 id="Q学习"><a href="#Q学习" class="headerlink" title="Q学习"></a>Q学习</h2><p>1、当前状态$s$，选择当前动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$、得到新状态$s^\prime$和奖励 $r(s,a,s^\prime)$</p><p>3、<strong>不依概率选择新动作</strong>，而是<strong>直接选择最大的值函数$\max_\limits{a^\prime}Q(s^\prime, a^\prime)$</strong></p><p>4、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot \max_{a^\prime} Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>5、更新状态：$s = s^\prime$</p><h2 id="Q网络"><a href="#Q网络" class="headerlink" title="Q网络"></a>Q网络</h2><p>使用神经网络$Q_{\phi}(\mathbf{s,a})$去近似值函数$Q(s,a)$。两个问题：实际目标值不稳定；样本之间具有强相关性。<br>$$<br>L(s, a, s^\prime; \phi) = \left(<br>\underbrace{r + \gamma \cdot \max_{a^\prime} Q_\phi(\mathbf s^\prime, \mathbf a^\prime)}<em>{\color{blue}{实际目标值}} -<br>\underbrace{Q</em>\phi(\mathbf s, \mathbf a)}_{\color{blue}{\text{网络值}}}<br>\right)^2<br>$$</p><h2 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h2><p>深度Q网络：</p><ul><li><strong>目标网络冻结</strong>-<strong>稳定目标值</strong>。$Q_{\phi}(\mathbf{s,a})$训练网络，$Q_{\hat \phi}(\mathbf{s,a})$目标值网络。定期更新参数$\hat \phi \leftarrow \phi$ </li><li><strong>经验池的经验回放</strong>-<strong>去除样本相关性</strong>- 每次采集一条数据放入经验池，再从经验池取数据进行训练。 </li></ul><p><strong>生成新数据加入经验池</strong></p><p>1、状态$s$， 选择动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$， 得到$r$和$s^\prime$</p><p>3、$(s,a, r, s^\prime)$ 加入经验池$\cal D$</p><p><strong>采经验池中采样一条数据计算</strong></p><p>1、从$\cal D$中采样一条数据，$(ss,aa, rr, ss^\prime)$。 （<strong>去除样本相关性</strong>）</p><p>2、<strong>计算实际目标值</strong>$Q_{\hat \psi}(\mathbf{ss, aa})$。 （<strong>解决目标值不稳定的问题</strong>）<br>$$<br>Q_{\hat \psi}(\mathbf{ss, aa}) =<br>\begin{cases}<br>&amp; rr, &amp; ss^\prime 为终态 \<br>&amp; rr + \gamma \cdot \max_\limits{\mathbf a^\prime}Q_{\hat \phi}(\mathbf {ss^\prime}, \mathbf {a^\prime}), &amp;其它<br>\end{cases}<br>$$<br>3、<code>损失函数</code>如下，<strong>梯度下降法去训练Q网络</strong><br>$$<br>J(\phi)<br>= \left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - y \right)^2<br>=\left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - Q_{\hat \psi}(\mathbf{ss, aa}) \right)^2<br>$$<br><strong>状态前进</strong></p><p>$s \leftarrow s^\prime$</p><p><strong>更新目标Q网络的参数</strong></p><p>每隔C步更新：$\hat \phi \leftarrow \phi$ </p><h1 id="基于策略函数的学习方法"><a href="#基于策略函数的学习方法" class="headerlink" title="基于策略函数的学习方法"></a>基于策略函数的学习方法</h1><p><code>策略搜索</code>本质上是一个<code>优化问题</code>，无需值函数可以直接优化策略。参数化的策略可以处理连续状态和动作。</p><p><strong>策略梯度</strong> ：是一种基于梯度的强化学习方法。</p><p><strong>策略连续可微假设</strong>：假设$\pi_{\theta}(a \mid s)$是一个关于$\theta$的连续可微函数。</p><p>最大化策略的期望回报<br>$$<br>J(\theta) = \int p_{\theta}(\tau) \cdot G(\tau) \, {\rm d}\tau<br>$$</p><h2 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h2><p>$$<br>\frac{\partial J(\theta)}{\partial \theta}  \triangleq E_{\tau \sim  p_{\theta}(\tau)} \left[ \color{blue}{\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau)} \cdot G(\tau)\right]<br>$$</p><p>$$<br>\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau) =  \sum_{t=0}^{T-1} \frac{\partial}{\partial \theta}  \color{blue}{ \log\pi_{\theta}(a_t \mid s_t)}<br>$$</p><p>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; =  E_{\tau \sim p_{\theta}(\tau)}\left[<br>\sum_{t=0}^{T-1} \left(\frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t) \cdot \gamma^t G(\tau_{t:T})\right)<br>\right]<br>\end{align}<br>$$</p><h2 id="REINFORCE算法"><a href="#REINFORCE算法" class="headerlink" title="REINFORCE算法"></a>REINFORCE算法</h2><p>期望用采样的方式来近似，随机采样N个轨迹。<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; \approx  \frac{1}{N}\sum_{n=1}^    N<br>\left[<br>\sum_{t=0}^{T-1} \left(\frac{\partial}{\partial \theta}  \log\pi_{\theta}(a^{(n)}_t \mid s^{(n)}<em>t) \cdot \gamma^t G(\tau^{(n)}</em>{t:T})\right)<br>\right]<br>\end{align}<br>$$<br>1、根据$\pi_\theta(a\mid s)$<strong>生成一条完整的轨迹</strong> ：$\tau = s_0, a_0, s_1,a_1, \cdots, s_{T-1}, a_{T-1}, s_{T}$</p><p>2、<strong>在每一时刻更新参数</strong> (0~T)</p><p>先计算<strong>当前时刻的回报$G(\tau_{t:T})$</strong>，再更新参数：<br>$$<br>\theta \leftarrow \theta + \alpha \cdot \gamma^tG(\tau_{t:T}) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>$$</p><p>缺点：</p><ul><li>需要完整的轨迹</li><li>不同轨迹之间的策略梯度方差大，导致训练不稳定</li></ul><h2 id="带基准函数的REINFORCE算法"><a href="#带基准函数的REINFORCE算法" class="headerlink" title="带基准函数的REINFORCE算法"></a>带基准函数的REINFORCE算法</h2><p>每个时刻$t$的策略梯度<br>$$<br>\frac{\partial J_t(\theta)}{\partial \theta} =<br>E_{s_t,a_t}\left[<br>\alpha \cdot \gamma^tG(\tau_{t:T}) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>\right]<br>$$<br><strong>基准函数</strong></p><ul><li>为了减小策略梯度的方差</li><li>引入与$a_t$无关的基准函数$b(s_t) = V(s_t)$</li><li>越相关方差越小，所以选择值函数</li></ul><p>每一时刻的策略梯度为：<br>$$<br>\frac{\partial \hat J_t(\theta)}{\partial \theta} =<br>E_{s_t,a_t}\left[<br>\alpha \cdot \gamma^t<br>\left( \color{blue} {G(\tau_{t:T})  - b(s_t)}\right)\cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>\right]<br>$$<br>1、根据策略$\pi_\theta(a\mid s)$<strong>生成一条完整轨迹</strong> ：$\tau = s_0, a_0, s_1,a_1, \cdots, s_{T-1}, a_{T-1}, s_{T}$</p><p>2、在每一时刻更新参数</p><p>计算<strong>当前时刻的轨迹回报$G(\tau_{t:T})$</strong> ，再利用<code>基准函数(值函数)</code>进行修正，得到$\delta$<br>$$<br>\delta \leftarrow  G(\tau_{t:T}) - V_{\phi} (s_t)<br>$$<br>更新<strong>值函数$V_\phi(s)$的参数$\phi$</strong><br>$$<br>\phi \leftarrow  \phi + \beta \cdot \delta \cdot \frac{\partial}{ \partial \phi} V_{\phi}(s_t)<br>$$<br>更新<strong>策略函数$\pi_\theta(a \mid s)$的参数$\theta$</strong><br>$$<br>\theta \leftarrow  \theta + \alpha \cdot \gamma^t\delta \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>$$<br><code>缺点</code>： 需要根据策略采集一条完整的轨迹。</p><h1 id="Actor-Critic算法"><a href="#Actor-Critic算法" class="headerlink" title="Actor-Critic算法"></a>Actor-Critic算法</h1><p><code>演员-评论家</code>算法结合了<code>策略梯度</code>和<code>时序差分</code>算法。不需要一条完整的轨迹，可以单步更新参数，无需等到回合结束才进行更新。</p><p><strong>演员</strong></p><p>根据$s$和策略$\pi_\theta(a\mid s)$，执行动作$a$，环境变为$s^\prime$，得到奖励$r$</p><p><strong>评论员</strong></p><p>根据<code>真实奖励</code>$r$和<code>之前的标准</code>，<strong>打分（估计回报）</strong>：$r + \gamma V_\phi(s^\prime)$ ，<strong>再调整自己的打分标准$\phi$</strong>。$\min_{\phi} \left(\hat G(\tau_{t:T}) - V_{\phi}(s_{t}) \right)^2$</p><p>使评分更加接近环境的真实回报。</p><p><strong>演员</strong></p><p>演员<strong>根据评论的打分</strong>，<strong>调整自己的策略$\pi_\theta$</strong>，争取下次做得更好。$\theta \leftarrow  \theta + \alpha \cdot \gamma^t \left( G(\tau_{t:T}) - V_{\phi} (s_t)\right) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)$</p><p><strong>1. 执行策略，生成样本</strong><br>$$<br>s, a, r, s^\prime<br>$$<br><strong>2. 估计回报，生成$\delta$</strong><br>$$<br>G(s) = r + \gamma V_\phi(s^\prime), \quad \delta  =  G(s) - V_{\phi}(s)<br>$$<br><strong>3. 更新值函数和策略</strong><br>$$<br>\phi  \leftarrow  \phi + \beta \cdot \delta \cdot \frac{\partial V_{\phi}(s)}{\partial \phi}<br>$$</p><p>$$<br>\theta  \leftarrow  \theta + \alpha \cdot \lambda \delta \cdot \frac{\partial }{\partial \theta} \log \pi_\theta(a\mid s)<br>$$</p><p><strong>4. 更新折扣率和状态</strong><br>$$<br>\lambda \leftarrow \lambda \cdot \gamma, \quad s \leftarrow s^\prime<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;强化学习算法的简单总结，主要包括基于值函数/策略函数的学习方法、Actor-Critic算法。
    
    </summary>
    
      <category term="强化学习" scheme="http://plmsmile.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="策略梯度" scheme="http://plmsmile.github.io/tags/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6/"/>
    
      <category term="策略迭代" scheme="http://plmsmile.github.io/tags/%E7%AD%96%E7%95%A5%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="值迭代" scheme="http://plmsmile.github.io/tags/%E5%80%BC%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="蒙特卡罗" scheme="http://plmsmile.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/"/>
    
      <category term="时序差分" scheme="http://plmsmile.github.io/tags/%E6%97%B6%E5%BA%8F%E5%B7%AE%E5%88%86/"/>
    
      <category term="SARSA" scheme="http://plmsmile.github.io/tags/SARSA/"/>
    
      <category term="Q学习" scheme="http://plmsmile.github.io/tags/Q%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Q网络" scheme="http://plmsmile.github.io/tags/Q%E7%BD%91%E7%BB%9C/"/>
    
      <category term="DQN" scheme="http://plmsmile.github.io/tags/DQN/"/>
    
  </entry>
  
  <entry>
    <title>基于策略函数的学习方法</title>
    <link href="http://plmsmile.github.io/2018/04/22/41-strategy-learning/"/>
    <id>http://plmsmile.github.io/2018/04/22/41-strategy-learning/</id>
    <published>2018-04-22T05:44:08.000Z</published>
    <updated>2018-11-25T08:30:08.899Z</updated>
    
    <content type="html"><![CDATA[<p>基于策略函数的学习方法和Actor-Critc算法。<a id="more"></a> </p><p><a href="https://plmsmile.github.io/2018/04/01/37-reinforce-learning/">强化学习基础</a> 、<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/">基于值函数的学习方法</a></p><p><img src="" style="display:block; margin:auto" width="60%"></p><h1 id="基于策略函数的学习方法"><a href="#基于策略函数的学习方法" class="headerlink" title="基于策略函数的学习方法"></a>基于策略函数的学习方法</h1><h2 id="强化学习目标"><a href="#强化学习目标" class="headerlink" title="强化学习目标"></a>强化学习目标</h2><p>强化学习的目标是<strong>学习到一个策略$\pi_{\theta}(a\mid s)$</strong>，来<strong>最大化这个策略的期望回报</strong>。<strong>希望智能体能够获得更多的回报</strong>。本质上是策略搜索。<br>$$<br>J(\theta) = E_{\tau \sim p_{\theta}(\tau)} [\sum_{t=0}^{T-1}\gamma ^tr_{t+1}]<br>$$</p><p>$$<br>J(\theta) = \int p_{\theta}(\tau) \cdot G(\tau) \, {\rm d}\tau<br>$$</p><p><code>策略搜索</code>本质上是一个<code>优化问题</code>，无需值函数可以直接优化策略。参数化的策略可以处理连续状态和动作。</p><ul><li><strong>基于梯度的优化</strong></li><li>无梯度的优化</li></ul><h2 id="策略梯度"><a href="#策略梯度" class="headerlink" title="策略梯度"></a>策略梯度</h2><p><strong>1. 思想和假设</strong></p><p><strong>策略梯度</strong> ：是一种基于梯度的强化学习方法。</p><p><strong>策略连续可微假设</strong>：假设$\pi_{\theta}(a \mid s)$是一个关于$\theta$的连续可微函数。</p><p><strong>2. 优化目标</strong></p><p>最大化策略的期望回报。</p><p>$$<br>J(\theta) = \int p_{\theta}(\tau) \cdot G(\tau) \, {\rm d}\tau<br>$$</p><p><strong>3. 策略梯度推导</strong></p><p>采用梯度上升法来优化参数$\theta$来使得$J(\theta)$最大。</p><p><strong>策略梯度$\frac{\partial J(\theta)}{\partial \theta}$</strong>的推导如下：</p><p>1、参数$\theta$的优化方向是总回报$G(\tau)$大的轨迹$\tau$，其概率$p_\theta(\tau)$也就越大。<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; = \frac{\partial} {\partial \theta}  \int p_{\theta}(\tau) \cdot G(\tau) \, {\rm d}\tau<br>= \int \left(\frac{\partial}{\partial \theta}  p_{\theta}(\tau)\right) \cdot G(\tau) \, {\rm d}\tau \<br>&amp; =  \int \color{blue}{p_{\theta}(\tau)} \cdot \left(\color{blue}{\frac{1} {p_{\theta}(\tau)}}\frac{\partial}{\partial \theta}  p_{\theta}(\tau)\right) \cdot G(\tau) \, {\rm d}\tau \<br>&amp; = \int p_{\theta}(\tau) \cdot \left( \color{blue}{ \frac{\partial}{\partial \theta} \log  p_{\theta}(\tau) }\right) \cdot G(\tau) \, {\rm d}\tau \<br>&amp; \triangleq E_{\tau \sim  p_{\theta}(\tau)} \left[ \color{blue}{\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau)} \cdot G(\tau)\right]<br>\end{align}<br>$$<br>2、梯度只和策略相关，轨迹的梯度 == 各个时刻的梯度的求和<br>$$<br>\begin{align}<br>\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau)<br>&amp; = \frac{\partial}{\partial \theta} \log \left( p(s_0) \cdot \prod_{t=0}^{T-1} \underbrace {\pi_{\theta}(a_t \mid s_t) }<em>{\color{blue}{执行动作}} \underbrace{p(s</em>{t+1} \mid s_t,a_t)}_{\color{blue}{环境改变}}\right) \<br>&amp; = \frac{\partial}{\partial \theta} \log  \left( \log p(s_0) + \color{blue}{\sum_{t=0}^{T-1} \log\pi_{\theta}(a_t \mid s_t) }+  \sum_{t=0}^{T-1} \log p(s_{t+1} \mid s_t,a_t)  \right) \<br>&amp; = \sum_{t=0}^{T-1} \frac{\partial}{\partial \theta}  \color{blue}{ \log\pi_{\theta}(a_t \mid s_t)}<br>\end{align}<br>$$<br>3、策略梯度 == 轨迹的梯度*轨迹的回报 的期望<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; = E_{\tau \sim p_{\theta}(\tau)}\left[<br>\left(\sum_{t=0}^{T-1} \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t) \right)<br>\cdot G(\tau)\right] \<br>&amp; =  E_{\tau \sim p_{\theta}(\tau)}\left[<br>\left(\sum_{t=0}^{T-1} \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t) \right)<br>\cdot<br>\left( \color{blue}{G(\tau_{1:k-1}) + \gamma^k \cdot G(\tau_{k:T})}\right)<br>\right] \<br>&amp; =  E_{\tau \sim p_{\theta}(\tau)}\left[<br>\sum_{t=0}^{T-1} \left(\frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t) \cdot \gamma^t G(\tau_{t:T})\right)<br>\right]<br>\end{align}<br>$$<br>其中$G(\tau_{t:T})​$是从时刻$t​$作为起始时刻收到的总回报<br>$$<br>G(\tau_{t:T}) =  \sum_{i=t}^{T-1} \gamma ^{i-t} r_{i+1}<br>$$<br><strong>4. 总结</strong></p><p>$$<br>\frac{\partial J(\theta)}{\partial \theta}  \triangleq E_{\tau \sim  p_{\theta}(\tau)} \left[ \color{blue}{\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau)} \cdot G(\tau)\right]<br>$$</p><p>$$<br>\frac{\partial}{\partial \theta} \log  p_{\theta}(\tau) =  \sum_{t=0}^{T-1} \frac{\partial}{\partial \theta}  \color{blue}{ \log\pi_{\theta}(a_t \mid s_t)}<br>$$</p><p>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; =  E_{\tau \sim p_{\theta}(\tau)}\left[<br>\sum_{t=0}^{T-1} \left(\frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t) \cdot \gamma^t G(\tau_{t:T})\right)<br>\right]<br>\end{align}<br>$$</p><h2 id="REINFORCE算法"><a href="#REINFORCE算法" class="headerlink" title="REINFORCE算法"></a>REINFORCE算法</h2><p><strong>期望</strong>可以通过<strong>采样的方法来近似</strong>。对于当前策略$\pi_\theta$，可以<strong>随机游走采集N个轨迹</strong>。$\tau^{(1)},\cdots, \tau^{(N)}$<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta}<br>&amp; \approx  \frac{1}{N}\sum_{n=1}^    N<br>\left[<br>\sum_{t=0}^{T-1} \left(\frac{\partial}{\partial \theta}  \log\pi_{\theta}(a^{(n)}_t \mid s^{(n)}<em>t) \cdot \gamma^t G(\tau^{(n)}</em>{t:T})\right)<br>\right]<br>\end{align}<br>$$<br>可微分策略函数$\pi_\theta(a\mid s)​$，折扣率$\gamma​$，学习率$\alpha​$ </p><p>初始化参数$\theta$， 训练，直到$\theta$收敛</p><p>1、<strong>根据$\pi_\theta(a\mid s)$生成一条轨迹</strong><br>$$<br>\tau = s_0, a_0, s_1,a_1, \cdots, s_{T-1}, a_{T-1}, s_{T}<br>$$<br>2、<strong>在每一时刻更新参数</strong> (0~T)</p><ul><li>计算$G(\tau_{t:T})$</li><li>$\theta \leftarrow \theta + \alpha \cdot \gamma^tG(\tau_{t:T}) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)$</li></ul><p>REINFORCE算法<code>缺点</code>：<strong>不同路径之间的方差很大，导致训练不稳定</strong>；需要根据一个策略<strong>采集一条完整的轨迹</strong>。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/reinforce.png" style="display:block; margin:auto" width="80%"></p><h2 id="带基准线的REINFORCE算法"><a href="#带基准线的REINFORCE算法" class="headerlink" title="带基准线的REINFORCE算法"></a>带基准线的REINFORCE算法</h2><blockquote><p>值函数作为基准函数，去减小策略梯度的方差</p></blockquote><p>由于不同轨迹之间的方差很大，导致训练不稳定，使用基准函数去减小策略梯度的方差。</p><p><strong>1. 减小方差的办法</strong></p><p>目标：估计函数$f$的期望，同时要减小$f$的方差。</p><p>方法</p><ul><li>引入已知期望的函数$g$</li><li><strong>$\hat f = f - \alpha(g - E[g])$</strong> </li><li>推导可知： $E[f] = E[\hat f]$</li><li>用$g$去减小$f$的方差， $D(f)=Var(f)$</li></ul><p>$$<br>D(\hat f) = D(f) - 2\alpha \cdot \rm{Cov}(f,g) + \alpha^2 \cdot D(g)<br>$$</p><p>$$<br>令\frac{\partial D(\hat f)}{\partial \alpha} = 0 \quad \to \quad \frac{D(\hat f)}{D(f)} = 1 - \rho^2(f, g)<br>$$</p><p>所以<strong>，$f$和$g$的相关性越高，$D(\hat f)$越小</strong>。</p><p><strong>2. 带基准线的REINFORCE算法核心</strong></p><p>每个时刻$t$的策略梯度<br>$$<br>\frac{\partial J_t(\theta)}{\partial \theta} =<br>E_{s_t,a_t}\left[<br>\alpha \cdot \gamma^tG(\tau_{t:T}) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>\right]<br>$$<br>为了<strong>减小策略梯度的方差</strong>，引入一个和$a_t$无关的<strong>基准函数$b(s_t)$</strong>，策略梯度为：<br>$$<br>\frac{\partial \hat J_t(\theta)}{\partial \theta} =<br>E_{s_t,a_t}\left[<br>\alpha \cdot \gamma^t<br>\left( \color{blue} {G(\tau_{t:T})  - b(s_t)}\right)\cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>\right]<br>$$<br>因为$b(s_t)$与$a_t$无关，可以证明得到：（使用积分求平均，$\int_{a_t} \pi_{\theta}(a_t \mid s_t) \,{\rm d}  a_t= 1$）<br>$$<br>E_{a_t}\left[<br>b(s_t)\cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>\right] =  \frac{\partial}{\partial \theta} (b(s_t) \cdot 1) = 0<br>$$<br>所以得到：$\frac{\partial J_t(\theta)}{\partial \theta} = \frac{\partial \hat J_t(\theta)}{\partial \theta}​$</p><p><strong>4. 基准函数的选择</strong></p><p>为了减小策略梯度的方差，希望<strong>$b(s_t)$与$G(\tau_{t:T})$ 越相关越好</strong>，所以选择<strong>$b(s_t) = V(s_t)$</strong>（<a href="https://plmsmile.github.io/2018/04/01/37-reinforce-learning/#%E5%80%BC%E5%87%BD%E6%95%B0">值函数</a>）。</p><p>1、可学习的函数$V_{\phi}(s_t)$来近似值函数，类似于<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/#%E6%B7%B1%E5%BA%A6q%E7%BD%91%E7%BB%9C">Q网络</a><br>$$<br>\phi^* = \arg \min_{\phi} \left(V(s_t) - V_{\phi}(s_t)\right)^2<br>$$<br>2、<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/#%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E9%87%87%E6%A0%B7%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95">蒙塔卡罗方法</a>进行估计值函数 也就是<a href="https://plmsmile.github.io/2018/04/21/40-value-learning/#%E6%80%BB%E4%BD%93%E6%80%9D%E6%83%B3-1">增量计算</a>Q(s,a)嘛。</p><p><strong>5. 带基准线的REINFORCE算法步骤</strong></p><p>输入</p><ul><li>状态空间和动作空间，$\cal {S,A}$</li><li>可微分的策略函数$\pi_\theta(a \mid s)$</li><li>可微分的状态值函数$V_{\phi}(s_t)$</li><li>折扣率$\gamma$，学习率$\alpha, \beta$</li></ul><p>随机初始化参数$\theta, \phi$</p><p>不断训练，直到$\theta$收敛</p><p>1、根据策略$\pi_\theta(a\mid s)$<strong>生成一条完整轨迹</strong> ：$\tau = s_0, a_0, s_1,a_1, \cdots, s_{T-1}, a_{T-1}, s_{T}$</p><p>2、在每一时刻更新参数</p><p>计算<strong>当前时刻的轨迹回报$G(\tau_{t:T})$</strong> ，再利用<code>基准函数(值函数)</code>进行修正，得到$\delta$<br>$$<br>\delta \leftarrow  G(\tau_{t:T}) - V_{\phi} (s_t)<br>$$<br>更新<strong>值函数$V_\phi(s)$的参数$\phi$</strong><br>$$<br>\phi \leftarrow  \phi + \beta \cdot \delta \cdot \frac{\partial}{ \partial \phi} V_{\phi}(s_t)<br>$$<br>更新<strong>策略函数$\pi_\theta(a \mid s)$的参数$\theta$</strong><br>$$<br>\theta \leftarrow  \theta + \alpha \cdot \gamma^t\delta \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>$$<br><code>缺点</code>： 需要根据策略采集一条完整的轨迹。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/reinforce-base.png" style="display:block; margin:auto" width="80%"></p><h1 id="Actor-Critic算法"><a href="#Actor-Critic算法" class="headerlink" title="Actor-Critic算法"></a>Actor-Critic算法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p><code>演员-评论员算法</code>是一种结合<code>策略梯度</code>和<code>时序差分学习</code>的强化学习方法。</p><p>开始，演员随机表演，评论员随机打分；不断学习，评论员评分越来越准，演员的动作越来越好。</p><ul><li>演员：<strong>策略函数$\pi_\theta(s,a)$</strong>，学习一个策略来得到尽可能高的回报</li><li>评论员：<strong>值函数$V_\phi(s)$</strong>，评估当前策略函数（演员）的好坏</li></ul><p><strong>演员</strong></p><p>根据$s$和策略$\pi_\theta(a\mid s)$，执行动作$a$，环境变为$s^\prime$，得到奖励$r$</p><p><strong>评论员</strong></p><p>根据<code>真实奖励</code>$r$和<code>之前的标准</code>，<strong>打分（估计回报）</strong>：$r + \gamma V_\phi(s^\prime)$ ，<strong>再调整自己的打分标准$\phi$</strong>。$\min_{\phi} \left(\hat G(\tau_{t:T}) - V_{\phi}(s_{t}) \right)^2$</p><p>使评分更加接近环境的真实回报。</p><p><strong>演员</strong></p><p>演员根据评论的打分，调整自己的策略$\pi_\theta$，争取下次做得更好。</p><p><code>优点</code>：可以单步更新参数，不需要等到回合结束才进行更新。</p><h2 id="值函数的三个功能"><a href="#值函数的三个功能" class="headerlink" title="值函数的三个功能"></a>值函数的三个功能</h2><p><strong>1. 估计轨迹真实回报（打分）</strong><br>$$<br>\hat G(\tau_{t:T}) = r_{t+1} + \gamma V_{\phi}(s_{t+1})<br>$$<br><strong>2. 更新值函数参数$\phi$ （调整打分标准）</strong><br>$$<br>\min_{\phi} \left(\hat G(\tau_{t:T}) - V_{\phi}(s_{t}) \right)^2<br>$$<br><strong>3. 更新策略参数$\theta$时，作为基函数来减少策略梯度的方差（调整策略）</strong><br>$$<br>\theta \leftarrow  \theta + \alpha \cdot \gamma^t \left( G(\tau_{t:T}) - V_{\phi} (s_t)\right) \cdot \frac{\partial}{\partial \theta}  \log\pi_{\theta}(a_t \mid s_t)<br>$$</p><h2 id="算法实现步骤"><a href="#算法实现步骤" class="headerlink" title="算法实现步骤"></a>算法实现步骤</h2><p><strong>输入</strong></p><ul><li>状态空间和动作空间，$\cal {S,A}$</li><li>可微分的策略函数$\pi_\theta(a \mid s)$</li><li>可微分的状态值函数$V_{\phi}(s_t)$</li><li>折扣率$\gamma$，学习率$\alpha &gt;0,  \beta&gt;0$</li></ul><p><strong>随机初始化参数$\theta, \phi$</strong></p><p><strong>迭代直到$\theta$收敛，初始状态$s$, $\lambda=1$</strong></p><p>从s开始，直到$s$为终止状态</p><p>1、状态s，选择动作$a = \pi_\theta(a\mid s)$</p><p>2、执行动作$a$，得到即时奖励$r$和新状态$s^\prime$</p><p>3、利用值函数作为基函数计算$\delta$，$\delta  \leftarrow  r + \gamma V_{\phi}(s^\prime) - V_{\phi}(s)$</p><p>4、更新值函数：$\phi  \leftarrow  \phi + \beta \cdot \delta \cdot \frac{\partial V_{\phi}(s)}{\partial \phi}$</p><p>5、更新策略函数：$\theta  \leftarrow  \theta + \alpha \cdot \lambda \delta \cdot \frac{\partial }{\partial \theta} \log \pi_\theta(a\mid s)$</p><p>6、更新折扣率和状态：$\lambda \leftarrow \lambda \cdot \gamma, \quad s \leftarrow s^\prime$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/actor-critic.png" style="display:block; margin:auto" width="80%"></p><h1 id="强化学习算法总结"><a href="#强化学习算法总结" class="headerlink" title="强化学习算法总结"></a>强化学习算法总结</h1><h2 id="方法总览"><a href="#方法总览" class="headerlink" title="方法总览"></a>方法总览</h2><p><strong>1. 通用步骤</strong></p><ol><li>执行策略，生成样本</li><li>估计回报</li><li>更新策略</li></ol><p><strong>2. 值函数与策略函数的比较</strong></p><p><code>值函数的方法</code></p><p>策略更新，导致值函数的改变比较大，对收敛性有一定的影响</p><p><code>策略函数的方法</code></p><p>策略更新，<strong>更加平稳</strong>。</p><p>缺点：策略函数的解空间很大，难以进行充分采样，导致方差较大，容易陷入局部最优解。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/reinforce-all.png" style="display:block; margin:auto" width="75%"></p><h2 id="四个典型方法"><a href="#四个典型方法" class="headerlink" title="四个典型方法"></a>四个典型方法</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/four-compare.png" style="display:block; margin:auto" width="70%"></p><h2 id="与监督学习的区别"><a href="#与监督学习的区别" class="headerlink" title="与监督学习的区别"></a>与监督学习的区别</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">强化学习</th><th style="text-align:center">监督学习</th></tr></thead><tbody><tr><td style="text-align:center">样本</td><td style="text-align:center">与环境进行交互产生样本，进行试错学习</td><td style="text-align:center">人工收集并标注</td></tr><tr><td style="text-align:center">反馈</td><td style="text-align:center">只有奖励，并且是延迟的</td><td style="text-align:center">需要明确的指导信息（每个状态对应一个动作）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于策略函数的学习方法和Actor-Critc算法。
    
    </summary>
    
      <category term="强化学习" scheme="http://plmsmile.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="策略函数" scheme="http://plmsmile.github.io/tags/%E7%AD%96%E7%95%A5%E5%87%BD%E6%95%B0/"/>
    
      <category term="策略梯度" scheme="http://plmsmile.github.io/tags/%E7%AD%96%E7%95%A5%E6%A2%AF%E5%BA%A6/"/>
    
      <category term="REINFORCE" scheme="http://plmsmile.github.io/tags/REINFORCE/"/>
    
      <category term="基准函数" scheme="http://plmsmile.github.io/tags/%E5%9F%BA%E5%87%86%E5%87%BD%E6%95%B0/"/>
    
      <category term="Actot-Critic" scheme="http://plmsmile.github.io/tags/Actot-Critic/"/>
    
      <category term="强化学习算法总结" scheme="http://plmsmile.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>基于值函数的学习</title>
    <link href="http://plmsmile.github.io/2018/04/21/40-value-learning/"/>
    <id>http://plmsmile.github.io/2018/04/21/40-value-learning/</id>
    <published>2018-04-21T05:14:36.000Z</published>
    <updated>2018-11-25T08:30:08.851Z</updated>
    
    <content type="html"><![CDATA[<p>基于值函数的学习方法：贝尔曼方程，动态规划、蒙特卡洛、时续差分、Q网络。<a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="70%"></p><blockquote><p>强化学习基于值函数的学习方法。最重要要是SARSA、Q学习、DQN。但是这些都依赖于前面的动态规划和蒙特卡罗方法。</p></blockquote><p><a href="https://plmsmile.github.io/2018/04/01/37-reinforce-learning/">强化学习基础笔记</a></p><h1 id="贝尔曼和贝尔曼最优方程"><a href="#贝尔曼和贝尔曼最优方程" class="headerlink" title="贝尔曼和贝尔曼最优方程"></a>贝尔曼和贝尔曼最优方程</h1><blockquote><ol><li>$V(s)$函数和$Q(s,a)$函数</li><li>贝尔曼方程（选择所有可能的均值）</li><li>贝尔曼最优方程（直接选择最大值）</li></ol></blockquote><h2 id="V函数与Q函数"><a href="#V函数与Q函数" class="headerlink" title="V函数与Q函数"></a>V函数与Q函数</h2><p>V函数：以<strong>s为初始状态</strong>，执行策略$\pi$得到的<code>期望回报</code>（所有轨迹回报的均值）<br>$$<br>V^\pi(s) = E_{\tau \sim p(\tau)} [\sum_{t=0}^{T-1}r_{t+1} \mid \tau_{s_0} = s]<br>$$<br>Q函数：以<strong>s为初始状态，执行动作a</strong>，执行策略$\pi$得到的期望回报<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br>利用V函数去计算Q函数<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><h2 id="贝尔曼方程"><a href="#贝尔曼方程" class="headerlink" title="贝尔曼方程"></a>贝尔曼方程</h2><p>$V(s)$的贝尔曼方程，选择<strong>所有a的期望回报</strong>， 也是<strong>Q函数的均值</strong>，$V(s)=E_a[Q(s, a)]$<br>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}[Q^\pi(s, a)]<br>$$</p><p>$Q(s,a)$函数的贝尔曼方程<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma E_{a\prime \sim \pi(a\prime \mid s\prime)}[Q^\pi(s\prime, a\prime)]]<br>$$</p><h2 id="贝尔曼最优方程"><a href="#贝尔曼最优方程" class="headerlink" title="贝尔曼最优方程"></a>贝尔曼最优方程</h2><p>$V(s)$函数的贝尔曼最优方程，实际上是<strong>直接选择所有a中的最大回报</strong> ：<br>$$<br>V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$<br>$Q(s,a)$函数的贝尔曼最优方程<br>$$<br>Q^<em>(s, a) =  E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma \max_\limits{a\prime}Q^</em>(s^\prime, a^\prime)]<br>$$</p><h1 id="值函数的学习方法"><a href="#值函数的学习方法" class="headerlink" title="值函数的学习方法"></a>值函数的学习方法</h1><blockquote><ol><li>穷举所有策略选择最好策略（没用）</li><li>迭代优化策略，<strong>根据策略的值函数去优化策略</strong> （重点）</li><li>动态规划（已知状态转移概率$p(s^\prime \mid s, a)$和奖励函数$r(s, a, s^\prime)$）</li><li>蒙特卡罗方法（不知模型），先采一些样本，再优化</li><li>时序差分学习算法：SARAS和Q学习</li><li>深度Q网络</li></ol></blockquote><p>值函数（$V^\pi(s)$、$Q^\pi(s, a)$ ）用来对策略$\pi(a \mid s)$进行评估。</p><p><strong>1. 穷举策略法</strong></p><p>如果策略有限，可以对所有策略进行评估，选出最优策略<br>$$<br>\forall s, \qquad \pi^* = \arg \max_\limits{\pi} V^\pi(s)<br>$$<br>策略空间$\vert \mathcal A\vert^{\vert \mathcal S\vert}$非常大，根本无法搜索。</p><p><strong>2. 迭代法优化策略</strong> </p><p>步骤如下，直到收敛</p><ol><li>随机初始化一个策略</li><li><strong>计算该策略的值函数</strong>：<code>动态规划</code>， <code>蒙特卡罗</code> </li><li><strong>根据值函数来设置新的策略</strong></li></ol><p>比如</p><p>给一个初始策略$\pi(a\mid s)$， 根据$Q^\pi(s, a)$去不断迭代去优化，得到新的策略函数$\pi^\prime (a\mid s)$（<strong>确定性策略</strong>），直到收敛。<br>$$<br>\pi^\prime (a\mid s) =<br>\begin {cases}<br>&amp; 1  &amp; a  = \arg \max_\limits{\hat a}Q^\pi(s, \hat a) \<br>&amp; 0 &amp;  \text{others}\<br>\end {cases}<br>$$<br><strong>新策略的值函数</strong>会不断变大：<br>$$<br>Q^{\pi^\prime}(s, \hat a) \ge Q^\pi(s, \hat a)<br>$$</p><h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><h2 id="总体思想"><a href="#总体思想" class="headerlink" title="总体思想"></a>总体思想</h2><blockquote><ol><li>思想：已知模型，通过贝尔曼方程来<strong>迭代计算值函数</strong>，通过<strong>值函数去优化策略</strong>为固定策略</li><li>两种方法：策略迭代-贝尔曼方程（所有可能的均值），值迭代-贝尔曼最优方程（直接）</li><li>缺点：要求模型已知，效率太低</li></ol></blockquote><p>基于模型的强化学习，叫做<code>模型相关的强化学习</code>，或有模型的强化学习。</p><p><strong>1. 动态规划思想</strong></p><ul><li><strong>已知模型</strong>：状态转移概率$p(s \prime \mid s, a)$ 和奖励$r(s, a, s\prime)$ </li><li>可以通过<code>贝尔曼方程</code>或<code>贝尔曼最优方程</code>来<strong>迭代计算值函数$V(s)$ </strong>，再<strong>通过$V(s)$去计算$Q(s,a)$</strong> </li><li><strong>通过值函数来优化策略</strong>，一般为优化为固定策略$\pi(s)=a$</li></ul><p><strong>2. 两种方法</strong></p><ul><li>策略迭代算法 ： <code>贝尔曼方程</code>更新值函数，算出所有值函数，计算均值</li><li>值迭代算法：<code>贝尔曼最优方程</code>更新值函数，<strong>直接优化计算最大值</strong></li></ul><p><strong>3. 缺点</strong></p><ul><li>要求模型已知：$p(s \prime \mid s, a)$、 $r(s, a, s\prime)$ </li><li>效率太低：可以通过神经网络来近似计算值函数</li></ul><h2 id="策略迭代算法"><a href="#策略迭代算法" class="headerlink" title="策略迭代算法"></a>策略迭代算法</h2><blockquote><ol><li>已知模型：状态转移概率$p(s^\prime \mid s, a)$和奖励函数$r(s, a, s^\prime)$</li><li>使用<code>贝尔曼方程</code>迭代计算$V^{\pi}(s)$，<strong>求均值</strong>， $V^{\pi}(s) = E_{a}E_{s^\prime}[r(s,a,s^\prime)+ \gamma V^\pi(s\prime)]$</li><li>利用$V^{\pi}(s)$去计算$Q^{\pi}(s,a)$。<strong>求均值</strong>，$Q^\pi(s, a) = E_{s\prime} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]$</li><li>根据$Q^\pi(s, a)$更新策略$\pi(s)=a$，选择最好的动作a，<strong>更新为固定策略</strong></li></ol></blockquote><p><strong>1. 初始化策略</strong><br>$$<br>\forall s, \forall a, \quad \pi(a \mid s) = \frac{1}{\vert \cal A\vert}<br>$$<br><strong>2. 使用贝尔曼方程迭代计算值函数$V^\pi(s)$</strong><br>$$<br>\forall s, \quad<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br><strong>3. 利用值函数$V^\pi(s)$计算$Q^\pi(s, a)$</strong><br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br><strong>4. 根据$Q^\pi(s, a)$更新策略，选择最好的动作a，更新为固定策略</strong><br>$$<br>\forall s, \qquad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/strategy-iter.png" style="display:block; margin:auto" width="70%"></p><h2 id="值迭代算法"><a href="#值迭代算法" class="headerlink" title="值迭代算法"></a>值迭代算法</h2><blockquote><ol><li>最优值函数：最优策略对应的值函数</li><li>贝尔曼最优方程：$V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]$ ，直接选择最大的a</li><li>值迭代算法：最优方程更新值函数$V(s)$， 计算$Q(s,a)$， 更新策略$\pi(s)=a$</li></ol></blockquote><p><strong>1. 最优值函数</strong></p><p><strong>最优策略$\pi^*$对应的值函数</strong>就是<code>最优值函数</code><br>$$<br>V^<em>(s) = \max_\limits{a} Q^</em>(s, a)<br>$$<br><strong>2. 贝尔曼最优方程</strong><br>$$<br>V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$</p><p>$$<br>Q^<em>(s, a) =  E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma \max_\limits{a\prime}Q^</em>(s^\prime, a^\prime)]<br>$$</p><p><strong>3. 值迭代算法</strong></p><p>值迭代算法：使用<strong>贝尔曼最优方程去更新值函数</strong>，收敛时的值函数就是最优值函数，对应的策略也是最优的策略。</p><p>1、 <strong>初始化值函数</strong><br>$$<br>\forall s \in S, \quad V(s) = 0<br>$$<br>2、 <strong>使用贝尔曼最优方程更新$V(s)$，直到收敛</strong><br>$$<br>\forall s \in S, \quad V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$<br>3、 <strong>计算$Q(s,a)$</strong><br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br>4、 <strong>更新策略$\pi(s)=a$</strong><br>$$<br>\forall s, \quad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$<br>5、 <strong>输出策略$\pi$</strong></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/value-iter.png" style="display:block; margin:auto" width="70%"></p><h1 id="蒙特卡罗采样学习方法"><a href="#蒙特卡罗采样学习方法" class="headerlink" title="蒙特卡罗采样学习方法"></a>蒙特卡罗采样学习方法</h1><blockquote><ol><li>蒙特卡罗方法：随机游走采集样本，估计 $Q^\pi(s, a)  \approx  \frac{1}{N} \sum_{n=1}^NG(\tau^{(n)})$，根据Q去改进策略 </li><li>$\epsilon 贪心法$: 依概率选择$\pi^\epsilon (s) = \pi(s)$</li><li>同策略和异策略：采样与改进策略相同为同策略</li><li>需要拿到完整的轨迹才能对策略评估更新模型，效率较低</li></ol></blockquote><p><code>模型无关的强化学习</code>也称为无模型的强化学习。蒙特卡罗方法：</p><blockquote><p>在不知$p(s \prime \mid s, a)$、 $r(s, a, s\prime)$ 的情况下， 需要智能体和环境进行交互，并且收集一些样本。然后根据这些样本去求解马尔可夫决策过程最优策略 </p></blockquote><p>Q函数$Q^\pi(s, a)$，初始状态为$s$， 执行动作$a$后，策略$\pi$能得到的期望总回报。<br>$$<br>Q^\pi(s, a) = E_{\tau \sim p(\tau)} [G(\tau) \mid \tau_{s_0} = s, \tau_{a_0} = a]<br>$$<br>模型未知，Q函数可以通过采样来计算。</p><p><strong>1. 蒙特卡罗方法</strong></p><p>1、从状态$s$、 动作$a$开始<strong>随机游走</strong>探索环境， <strong>采集N个样本</strong>（N个轨迹）</p><p>2、得到N个轨迹$\tau^{(1)}, \cdots, \tau^{(N)}$，得到它们的总回报$G(\tau^{(1)}), \cdots, G(\tau^{(N)})$</p><p>3、利用<strong>轨迹的总回报去估计出$Q^\pi(s, a)$</strong> 。 $Q^\pi(s, a)  \approx \hat Q^\pi(s, a) = \frac{1}{N} \sum_{n=1}^NG(\tau^{(n)})$</p><p>4、基于$Q^\pi(s, a)$ 去<strong>改进策略</strong>， <strong>$\epsilon$贪心法</strong></p><p>5、在新的策略下，再去采集样本、去估计Q，再去改进策略，直到收敛</p><p><strong>2. 利用和探索</strong></p><p>如果采用<code>确定性策略</code> :</p><ul><li>则每次试验得到的轨迹是一样的</li><li>只能计算出$Q^\pi(s, \pi(s))$ ，无法计算出$Q^\pi(s, a\prime)$，即无法计算出其它的$a\prime$的Q函数</li><li>只对当前环境进行了利用，而没有探索</li><li>而试验的轨迹应该覆盖所有的状态和动作，以找到更好的策略</li></ul><p>采用<strong>$\epsilon$贪心法</strong><br>$$<br>\pi^\epsilon(s) =<br>\begin {cases}<br>&amp; \pi(s)  &amp; \text{依概率 } 1-\epsilon \<br>&amp; a\prime \quad\text{(随机选择)} &amp;  \text{依概率 } \epsilon\<br>\end {cases}<br>$$<br> <strong>3. 同策略和异策略</strong></p><ul><li>同策略：采样策略$\pi^\epsilon(s)$， 改进策略$\pi^\epsilon(s)$， 相同</li><li>异策略：采样策略$\pi^\epsilon(s)$， 改进策略$\pi(s)$， 不同。可以使用重要性采样、重要性权重来优化$\pi$</li></ul><h1 id="时序差分学习算法"><a href="#时序差分学习算法" class="headerlink" title="时序差分学习算法"></a>时序差分学习算法</h1><h2 id="总体思想-1"><a href="#总体思想-1" class="headerlink" title="总体思想"></a>总体思想</h2><blockquote><ol><li>无需知道完整轨迹就能对策略进行评估。时序差分学习=蒙特卡罗+动态规划</li><li>贝尔曼<strong>估计轨迹的回报</strong>。$G(\tau_{0:T}^{(N)}) = r(s, a, s^\prime) + \gamma \cdot \hat Q^\pi_{N-1}(s^\prime, a^ \prime)$</li><li><strong>增量计算$\hat Q_N^\pi(s,a)$</strong>。 $\hat Q_N^\pi(s,a)  = \hat Q_{N-1}^\pi(s,a) + \alpha \cdot \left(G(\tau ^{(N)}) - \hat Q_{N-1}^\pi(s,a) \right)$</li></ol></blockquote><p>蒙特卡罗方法需要拿到完整的轨迹，才能对策略进行评估。</p><p>时序差分学习（temporal-difference learning）结合了动态规划和蒙特卡罗方法。</p><p><strong>1. 增量计算$\hat Q_N^\pi(s,a)$</strong></p><p>蒙特卡罗方法：从状态$s$，动作$a$开始，随机游走，采样N个样本</p><p>$G(\tau ^{(N)})$ ：第N次试验的总回报</p><p>$\hat Q_N^\pi(s,a)$ ：第N次试验后值函数的平均值，推导如下：<br>$$<br>\begin{align}<br>\hat Q_N^\pi(s,a)<br>&amp; = \frac{1}{N} \sum_{i=1}^NG(\tau ^{(i)}) \<br>&amp; = \frac{1}{N} \left(G(\tau ^{(N)}) + \color{blue}{\sum_{i=1}^{N-1}G(\tau ^{(i)})} \right) \<br>&amp; = \frac{1}{N} \left(G(\tau ^{(N)}) + \color{blue}{(N-1) \hat Q_{N-1}^\pi(s,a)} \right) \<br>&amp; = \hat Q_{N-1}^\pi(s,a) +  \frac{1}{N} \left(G(\tau ^{(N)}) - \hat Q_{N-1}^\pi(s,a)\right)<br>\end{align}<br>$$<br><strong>值函数</strong>$\hat Q_{N}^\pi (s, a)$ ： <strong>第N次后的平均</strong> = <strong>N-1次后的平均</strong> + <strong>一个增量</strong>， $\alpha$是一个较小的权值。<br>$$<br>\hat Q_N^\pi(s,a)  = \hat Q_{N-1}^\pi(s,a) + \alpha \cdot \left(G(\tau ^{(N)}) - \hat Q_{N-1}^\pi(s,a) \right)<br>$$<br><strong>增量</strong> ：实际回报与估计回报直接的误差。<br>$$<br>\delta = G(\tau ^{(N)}) - \hat Q_{N-1}^\pi(s,a)<br>$$<br><strong>2. 贝尔曼方程估计$G(\tau ^{(N)})$</strong></p><p>从$s, a$开始，采样下一步的状态和动作$(s^\prime, a^\prime)$ ，得到奖励$r(s, a, s^\prime)$。 </p><p><strong>无需得到完整的轨迹去计算总回报</strong>，使用贝尔曼方程去估计第N次试验后面$(s^\prime, a^\prime)$的总回报。  </p><p>使用N-1次实验后的$\hat Q^\pi_{N-1}(s^\prime, a^\prime)$，去估计第N次试验中后续$(s^\prime, a^\prime)$的总回报 $G(\tau_{1:T}^{(N)} \mid \tau_{s_1} = s^\prime, \tau_{a_1} = a^\prime)$。<br>$$<br>\begin{align}<br>G(\tau_{0:T}^{(N)})<br>&amp; =r(s, a, s^\prime) + \gamma \cdot \color{blue}{G(\tau_{1:T}^{(N)} \mid \tau_{s_1} = s^\prime, \tau_{a_1} = a^\prime)}\<br>&amp; \approx r(s, a, s^\prime) + \gamma \cdot \color{blue}{\hat Q^\pi_{N-1}(s^\prime, a^ \prime)}<br>\end{align}<br>$$<br><strong>3. 两种算法</strong></p><ul><li>SARSA：同策略。采样下一个动作：$a^\prime = \pi^\epsilon (s^\prime)$，值函数更新$Q(s^\prime, a^\prime)$，更新的Q是关于策略$\pi^\epsilon$的 </li><li>Q学习算法：直接选择最大的值函数$\max_\limits{a^\prime}Q(s^\prime, a^\prime)$更新，更新的Q是关于策略$\pi$的。</li></ul><p><strong>4. 蒙特卡罗方法和时序差分方法比较</strong></p><ul><li>蒙特卡罗方法：需要完整路径才能知道总回报，不依赖马尔可夫性质</li><li>时序差分学习：只需要一步就能知道总回报，依赖于马尔可夫性质</li></ul><p><strong>5. 总结</strong></p><p>贝尔曼估计总回报（马尔可夫性，动态规划）<br>$$<br>G(\tau) \leftarrow r(s, a, s^\prime) + \gamma \cdot Q(s^\prime, a^\prime)<br>$$<br>增量更新值函数（蒙特卡罗）<br>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot (G(\tau) - Q(s, a))<br>$$</p><p>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot<br>(\underbrace{ r+ \gamma \cdot Q(s^\prime, a^\prime)}<em>{\color{blue}{实际值}} -<br>\underbrace{Q(s, a)}</em>{\color{blue}{预期值}})<br>$$</p><p>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot (r+ \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a)<br>$$</p><h2 id="SARSA算法"><a href="#SARSA算法" class="headerlink" title="SARSA算法"></a>SARSA算法</h2><blockquote><ol><li>当前$s, a$， 奖励$r(s, a, s^\prime)$， 新的$s^\prime, a^\prime$， 优化$Q(s,a)$</li><li>贝尔曼<strong>估计实际奖励$G(\tau)$</strong>：$r+ \gamma \cdot Q(s^\prime, a^\prime)$</li><li><strong>增量计算Q</strong>：$Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot (r+ \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a))$</li><li><strong>更新策略$\pi(s)$</strong> ：$\pi(s) = \arg \max_\limits{a \in \cal A} Q(s, a)$ </li><li>SARAS：优化所有$Q(s,a)$直到收敛。对每一个$s,a$，每一步状态转移，计算Q，直到s为终止状态</li></ol></blockquote><p>SARAS<code>State Action Reward State Action</code>算法，是一种同策略的时序差分学习算法。</p><p><strong>1. 思想目的</strong></p><p>要算出$\hat Q_N^\pi(s,a)$，只需知道下面三项：</p><ul><li>当前状态和动作$(s, a)$</li><li>得到的奖励$r(s, a, s^\prime)$</li><li>下一步的状态和动作$(s^\prime, a^\prime)$</li></ul><p>不断优化Q函数，减少实际值和预期值的差距。</p><p><strong>2. 核心计算</strong></p><p>结合增量计算$\hat Q_N^\pi(s,a)$ ， 贝尔曼方程估计$G(\tau ^{(N)})$<br>$$<br>\hat Q_N^\pi(s,a)  = \hat Q_{N-1}^\pi(s,a) + \alpha \cdot \left(G(\tau ^{(N)}) - \hat Q_{N-1}^\pi(s,a) \right)<br>$$</p><p>$$<br>G(\tau_{0:T}^{(N)}) = r(s, a, s^\prime) + \gamma \cdot \hat Q^\pi_{N-1}(s^\prime, a^ \prime)<br>$$</p><p>得到：<br>$$<br>\hat Q_N^\pi(s,a) = (1-\alpha)\cdot \hat Q_{N-1}^\pi(s,a) + \alpha \cdot \left( r(s, a, s^\prime) + \gamma \cdot \hat Q^\pi_{N-1}(s^\prime, a^ \prime)\right)<br>$$<br><strong>简单点</strong>：<br>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot (G(\tau) - Q(s, a))<br>$$</p><p>$$<br>G(\tau) \leftarrow r(s, a, s^\prime) + \gamma \cdot Q(s^\prime, a^\prime)<br>$$</p><p>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot<br>(\underbrace{ r+ \gamma \cdot Q(s^\prime, a^\prime)}<em>{\color{blue}{实际值}} -<br>\underbrace{Q(s, a)}</em>{\color{blue}{预期值}})<br>$$</p><p><strong>3. SARSA算法步骤</strong></p><p>输入：状态空间$\cal S$， 动作空间$\cal A$，折扣率$\gamma$， 学习率$\alpha$</p><p>输出：策略$\pi(s)$</p><p>1 初始化</p><p>随机初始化$Q(s,a)$，平均初始化策略$\pi(s)$<br>$$<br>\forall s, \forall a, \quad \pi(a \mid s) = \frac{1}{\vert \cal A\vert}<br>$$<br>2 计算所有$Q(s,a)$， 直到全部收敛</p><p>选择初始状态$s$，和动作$a=\pi^\epsilon(s)$。从$(s, a)$开始向后执行，直到$s$为终止状态</p><p><strong>a. 执行动作，得到新状态和新动作</strong></p><ul><li>当前状态$s$，动作$a$</li><li>执行动作$a$：得到奖励$r$和新状态$s^\prime$</li><li>选择新动作：$a^\prime=\pi^\epsilon(s^\prime)$</li></ul><p><strong>b. 增量计算 $Q(s, a)$</strong><br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br><strong>c. 更新策略$\pi(s)$</strong><br>$$<br>\pi(s) = \arg \max_\limits{a \in \cal A} Q(s, a)<br>$$<br><strong>d. 状态前进</strong><br>$$<br>s \leftarrow s^\prime, \quad a \leftarrow a^\prime<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/sarsa.png" style="display:block; margin:auto" width="80%"></p><h2 id="Q学习算法"><a href="#Q学习算法" class="headerlink" title="Q学习算法"></a>Q学习算法</h2><blockquote><ol><li>SARAS：$s,a \to r, s^\prime$， 选择新状态$a^\prime = \pi^\epsilon(s^\prime)$，值函数$Q(s^\prime, a^\prime)$</li><li>Q：$s$，选择当前动作$a= \pi^\epsilon(s)$，$\to r, s^\prime$，直接选择最大的值函数$\max_\limits{a^\prime}Q(s^\prime, a^\prime)$</li></ol></blockquote><p>SARAS是Q学习算法的一种改进。</p><p><strong>1. SARAS</strong></p><p>1、当前状态$s$，当前动作$a$ （初始时选择$a=\pi^\epsilon(s)$，后续是更新得到的）</p><p>2、<strong>执行动作</strong>$a$，得到<strong>新状态</strong>$s^\prime$，得到<strong>奖励</strong>$r(s,a,s^\prime)$</p><p>4、<strong>依概率选择新动作</strong>$a = \pi^\epsilon(s^\prime)$，<strong>新状态新动作的值函数</strong>：$Q(s^\prime, a^\prime)$</p><p>5、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>6、更新状态和动作：$s = s^\prime, a = a^\prime$</p><p><strong>2. Q学习</strong></p><p>1、当前状态$s$，选择当前动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$、得到新状态$s^\prime$和奖励 $r(s,a,s^\prime)$</p><p>3、<strong>不依概率选择新动作</strong>，而是<strong>直接选择最大的值函数$\max_\limits{a^\prime}Q(s^\prime, a^\prime)$</strong></p><p>4、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot \max_{a^\prime} Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>5、更新状态：$s = s^\prime$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/q-learning.png" style="display:block; margin:auto" width="80%"></p><h1 id="深度Q网络"><a href="#深度Q网络" class="headerlink" title="深度Q网络"></a>深度Q网络</h1><h2 id="Q网络"><a href="#Q网络" class="headerlink" title="Q网络"></a>Q网络</h2><p><strong>1. Q网络</strong></p><p>$\mathbf s, \mathbf a$ 是状态动作$s,a$的向量表达。  用函数$Q_\phi(\mathbf s, \mathbf a) \approx Q^\pi (s, a)$ 。</p><p>参数为$\phi$的神经网络$Q_\phi(\mathbf s, \mathbf a)$，则称为<code>Q网络</code>。输入两个向量，输出为1个实数。<br>$$<br>Q_\phi(\mathbf s) =<br>\begin{bmatrix}<br>Q_\phi(\mathbf s, \mathbf a_1) \<br>\vdots \<br>Q_\phi(\mathbf s, \mathbf a_m) \<br>\end{bmatrix}<br>\approx<br>\begin{bmatrix}<br>Q^\pi(s,  a_1) \<br>\vdots \<br>Q^\pi(s,  a_1) \<br>\end{bmatrix}<br>$$<br><strong>2. 两种逼近</strong></p><p>学习一组参数$\phi$使得$Q_\phi(\mathbf s, \mathbf a)$逼近值函数$Q^\pi(s, a)$。 </p><p>蒙特卡罗方法：$\hat Q^\pi(s, a) = \frac{1}{N} \sum_{n=1}^NG(\tau^{(n)})$，总回报的平均</p><p>时序差分方法：$E[r + \gamma Q_\phi(\mathbf s^\prime, \mathbf a^\prime)]$</p><p><strong>3. Q学习的目标函数</strong></p><p>以Q学习为例，采用随机梯度下降来优化，目标函数（减小差距）如下：<br>$$<br>L(s, a, s^\prime; \phi) = \left(<br>\underbrace{r + \gamma \cdot \max_{a^\prime} Q_\phi(\mathbf s^\prime, \mathbf a^\prime)}<em>{\color{blue}{实际目标值}} -<br>\underbrace{Q</em>\phi(\mathbf s, \mathbf a)}<em>{\color{blue}{\text{网络值}}}<br>\right)^2<br>$$<br>一般，标记是一个标量，不包含参数；不依赖于网络参数，与网络独立。<br>$$<br>J(\theta) = \frac{1}{2m} \sum</em>{i=1}^m\left (<br>\underbrace{y^{(i)}}<em>{\color{blue}{\text{实际目标值}}}<br>-<br>\underbrace{f</em>\theta(\mathbf x^{(i)}) }_{\color{blue}{网络值}}<br>\right)^2<br>$$<br>两个问题：</p><ul><li><strong>实际目标值不稳定</strong>。参数学习的目标依赖于参数本身。<strong>label本身也包含参数</strong></li><li>样本之间有很强的相关性</li></ul><h2 id="Deep-Q-Network"><a href="#Deep-Q-Network" class="headerlink" title="Deep Q Network"></a>Deep Q Network</h2><p>深度Q网络（deep Q-networks, DQN）</p><ul><li><strong>目标网络冻结</strong>。在一个时间段，固定目标值中的参数</li><li><strong>经验回放</strong>。构建<strong>经验池</strong>来去除数据相关性</li><li><code>经验池</code>。最近的经历组成的数据集</li></ul><h2 id="带经验回放的DQN算法"><a href="#带经验回放的DQN算法" class="headerlink" title="带经验回放的DQN算法"></a>带经验回放的DQN算法</h2><p>带经验回放的深度Q网络。</p><p><strong>1. 初始化经验池、Q网络参数、目标Q网络参数</strong></p><ul><li>经验池： $\cal D$，容量为N</li><li>Q网络参数：$\phi$</li><li>目标Q网络的参数：$\hat \phi = \phi$</li></ul><p><strong>2. 要让$\forall s, \forall a, \; Q_\phi(\mathbf s,\mathbf a)$都收敛</strong></p><p>每一次初始化起始状态为$s$， 遍历直到$s$为最终态</p><p><strong>3. 每一时刻</strong></p><p><strong>生成新数据加入经验池</strong></p><p>1、状态$s$， 选择动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$， 得到$r$和$s^\prime$</p><p>3、$(s,a, r, s^\prime)$ 加入经验池$\cal D$</p><p><strong>采经验池中采样一条数据计算</strong></p><p>1、从$\cal D$中采样一条数据，$(ss,aa, rr, ss^\prime)$。 （<strong>去除样本相关性</strong>）</p><p>2、<strong>计算实际目标值</strong>$Q_{\hat \psi}(\mathbf{ss, aa})$。 （<strong>解决目标值不稳定的问题</strong>）<br>$$<br>Q_{\hat \psi}(\mathbf{ss, aa}) =<br>\begin{cases}<br>&amp; rr, &amp; ss^\prime 为终态 \<br>&amp; rr + \gamma \cdot \max_\limits{\mathbf a^\prime}Q_{\hat \phi}(\mathbf {ss^\prime}, \mathbf {a^\prime}), &amp;其它<br>\end{cases}<br>$$<br>3、损失函数如下，梯度下降法去训练Q网络<br>$$<br>J(\phi)<br>= \left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - y \right)^2<br>=\left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - Q_{\hat \psi}(\mathbf{ss, aa}) \right)^2<br>$$<br><strong>状态前进</strong></p><p>$s \leftarrow s^\prime$</p><p><strong>更新目标Q网络的参数</strong></p><p>每隔C步更新：$\hat \phi \leftarrow \phi$ </p><p><strong>4. DQN算法中经验池的优点</strong></p><p>1、去除样本相关性，避免陷入局部最优</p><p>经验池中抽取样本代替当前样本进行训练，打破了与相邻训练样本的相关性，避免陷入局部最优。</p><p>2、经验回放类似于监督学习</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/deep-qnet.png" style="display:block; margin:auto" width="70%">s</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="策略迭代"><a href="#策略迭代" class="headerlink" title="策略迭代"></a>策略迭代</h2><p>已知模型。利用<strong>贝尔曼方程</strong>（<code>算均值</code>）迭代计算出$V(s)$，再算出$Q(s,a)$。选择最好的动作$a$去优化策略$\pi(s)$。<br>$$<br>\forall s, \quad<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>\forall s, \qquad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$</p><h2 id="值迭代"><a href="#值迭代" class="headerlink" title="值迭代"></a>值迭代</h2><p>已知模型。利用<strong>贝尔曼最优方程</strong>迭代算出$V(s)$，再算出$Q(s,a)$。选择最好的动作$a$去优化策略$\pi(s)$。<br>$$<br>\forall s \in S, \quad V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$</p><p>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>\forall s, \quad \pi(s) = \arg \max_\limits{a} Q(s, a)<br>$$</p><h2 id="蒙特卡罗"><a href="#蒙特卡罗" class="headerlink" title="蒙特卡罗"></a>蒙特卡罗</h2><p>未知模型。从$(s,a)$<strong>随机游走，采集N个样本</strong>。使用<strong>所有轨迹回报平均值近似估计$Q(s,a)$</strong> ，再去改进策略。重复，直至收敛。<br>$$<br>Q^\pi(s, a)  \approx \hat Q^\pi(s, a) = \frac{1}{N} \sum_{n=1}^NG(\tau^{(n)})<br>$$</p><h2 id="时序差分算法"><a href="#时序差分算法" class="headerlink" title="时序差分算法"></a>时序差分算法</h2><p>无需知道完整轨迹就能对策略进行评估。</p><p>时序差分学习=动态规划-贝尔曼估计$G(\tau)$ + 蒙特卡罗采样-增量计算$Q(s,a)$</p><p>贝尔曼估计轨迹总回报$G(\tau)$<br>$$<br>G(\tau) \leftarrow r(s, a, s^\prime) + \gamma \cdot Q(s^\prime, a^\prime)<br>$$<br>增量计算$Q(s,a)$<br>$$<br>Q(s, a) \leftarrow  Q(s, a) + \alpha \cdot<br>(\underbrace{ r+ \gamma \cdot Q(s^\prime, a^\prime)}<em>{\color{blue}{实际值}} -<br>\underbrace{Q(s, a)}</em>{\color{blue}{预期值}})<br>$$</p><h2 id="SARSA"><a href="#SARSA" class="headerlink" title="SARSA"></a>SARSA</h2><p>同策略的时序差分算法，是Q学习的改进。</p><p>1、当前状态$s$，当前动作$a$ （初始时选择$a=\pi^\epsilon(s)$，后续是更新得到的）</p><p>2、<strong>执行动作</strong>$a$，得到<strong>新状态</strong>$s^\prime$，得到<strong>奖励</strong>$r(s,a,s^\prime)$</p><p>4、<strong>依概率选择新动作</strong>$a = \pi^\epsilon(s^\prime)$，<strong>新状态新动作的值函数</strong>：$Q(s^\prime, a^\prime)$</p><p>5、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>6、更新状态和动作：$s = s^\prime, a = a^\prime$</p><h2 id="Q学习"><a href="#Q学习" class="headerlink" title="Q学习"></a>Q学习</h2><p>1、当前状态$s$，选择当前动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$、得到新状态$s^\prime$和奖励 $r(s,a,s^\prime)$</p><p>3、<strong>不依概率选择新动作</strong>，而是<strong>直接选择最大的值函数$\max_\limits{a^\prime}Q(s^\prime, a^\prime)$</strong></p><p>4、更新Q函数<br>$$<br>Q(s, a) \leftarrow Q(s, a) + \alpha\cdot \left( r + \gamma \cdot \max_{a^\prime} Q(s^\prime, a^\prime) - Q(s, a) \right)<br>$$<br>5、更新状态：$s = s^\prime$</p><h2 id="Q网络-1"><a href="#Q网络-1" class="headerlink" title="Q网络"></a>Q网络</h2><p>使用神经网络$Q_{\phi}(\mathbf{s,a})$去近似值函数$Q(s,a)$。两个问题：实际目标值不稳定；样本之间具有强相关性。<br>$$<br>L(s, a, s^\prime; \phi) = \left(<br>\underbrace{r + \gamma \cdot \max_{a^\prime} Q_\phi(\mathbf s^\prime, \mathbf a^\prime)}<em>{\color{blue}{实际目标值}} -<br>\underbrace{Q</em>\phi(\mathbf s, \mathbf a)}_{\color{blue}{\text{网络值}}}<br>\right)^2<br>$$</p><h2 id="DQN"><a href="#DQN" class="headerlink" title="DQN"></a>DQN</h2><p>深度Q网络：</p><ul><li><strong>目标网络冻结</strong>-<strong>稳定目标值</strong>。$Q_{\phi}(\mathbf{s,a})$训练网络，$Q_{\hat \phi}(\mathbf{s,a})$目标值网络。定期更新参数$\hat \phi \leftarrow \phi$ </li><li><strong>经验池的经验回放</strong>-<strong>去除样本相关性</strong>- 每次采集一条数据放入经验池，再从经验池取数据进行训练。 </li></ul><p><strong>生成新数据加入经验池</strong></p><p>1、状态$s$， 选择动作$a = \pi^\epsilon(s)$</p><p>2、执行动作$a$， 得到$r$和$s^\prime$</p><p>3、$(s,a, r, s^\prime)$ 加入经验池$\cal D$</p><p><strong>采经验池中采样一条数据计算</strong></p><p>1、从$\cal D$中采样一条数据，$(ss,aa, rr, ss^\prime)$。 （<strong>去除样本相关性</strong>）</p><p>2、<strong>计算实际目标值</strong>$Q_{\hat \psi}(\mathbf{ss, aa})$。 （<strong>解决目标值不稳定的问题</strong>）<br>$$<br>Q_{\hat \psi}(\mathbf{ss, aa}) =<br>\begin{cases}<br>&amp; rr, &amp; ss^\prime 为终态 \<br>&amp; rr + \gamma \cdot \max_\limits{\mathbf a^\prime}Q_{\hat \phi}(\mathbf {ss^\prime}, \mathbf {a^\prime}), &amp;其它<br>\end{cases}<br>$$<br>3、<code>损失函数</code>如下，<strong>梯度下降法去训练Q网络</strong><br>$$<br>J(\phi)<br>= \left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - y \right)^2<br>=\left ( Q_{\phi}(\mathbf {ss}, \mathbf {aa}) - Q_{\hat \psi}(\mathbf{ss, aa}) \right)^2<br>$$<br><strong>状态前进</strong></p><p>$s \leftarrow s^\prime$</p><p><strong>更新目标Q网络的参数</strong></p><p>每隔C步更新：$\hat \phi \leftarrow \phi$ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于值函数的学习方法：贝尔曼方程，动态规划、蒙特卡洛、时续差分、Q网络。
    
    </summary>
    
      <category term="强化学习" scheme="http://plmsmile.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="值函数" scheme="http://plmsmile.github.io/tags/%E5%80%BC%E5%87%BD%E6%95%B0/"/>
    
      <category term="策略迭代" scheme="http://plmsmile.github.io/tags/%E7%AD%96%E7%95%A5%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="值迭代" scheme="http://plmsmile.github.io/tags/%E5%80%BC%E8%BF%AD%E4%BB%A3/"/>
    
      <category term="蒙特卡罗" scheme="http://plmsmile.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/"/>
    
      <category term="时序差分" scheme="http://plmsmile.github.io/tags/%E6%97%B6%E5%BA%8F%E5%B7%AE%E5%88%86/"/>
    
      <category term="SARSA" scheme="http://plmsmile.github.io/tags/SARSA/"/>
    
      <category term="Q学习" scheme="http://plmsmile.github.io/tags/Q%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Q网络" scheme="http://plmsmile.github.io/tags/Q%E7%BD%91%E7%BB%9C/"/>
    
      <category term="DQN" scheme="http://plmsmile.github.io/tags/DQN/"/>
    
      <category term="动态规划" scheme="http://plmsmile.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>阅读理解模型总结</title>
    <link href="http://plmsmile.github.io/2018/04/12/39-squard-models/"/>
    <id>http://plmsmile.github.io/2018/04/12/39-squard-models/</id>
    <published>2018-04-12T05:54:12.000Z</published>
    <updated>2018-11-25T08:30:08.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="QANet"><a href="#QANet" class="headerlink" title="QANet"></a>QANet</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/cnn_self_attention.png" style="display:block; margin:auto" width="100%"></p><h1 id="BiDAF"><a href="#BiDAF" class="headerlink" title="BiDAF"></a>BiDAF</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/bidaf.png" style="display:block; margin:auto" width="100%"></p><h1 id="AoA"><a href="#AoA" class="headerlink" title="AoA"></a>AoA</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/papers/aoa.png" style="display:block; margin:auto" width="100%"></p><h1 id="DCN"><a href="#DCN" class="headerlink" title="DCN"></a>DCN</h1><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/deep-residual-coattention-encoder.png" style="display:block; margin:auto" width="90%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dcn-decoder.png" style="display:block; margin:auto" width="100%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/hmn.png" style="display:block; margin:auto" width="60%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;&quot; style=&quot;display:block; margin:auto&quot; width=&quot;70%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;QANet&quot;&gt;&lt;a href=&quot;#QANet&quot; class=&quot;headerlink&quot; title=&quot;QANet&quot;&gt;&lt;/a&gt;QANe
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="QANet" scheme="http://plmsmile.github.io/tags/QANet/"/>
    
      <category term="机器阅读理解" scheme="http://plmsmile.github.io/tags/%E6%9C%BA%E5%99%A8%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络总结</title>
    <link href="http://plmsmile.github.io/2018/04/11/38-convolution/"/>
    <id>http://plmsmile.github.io/2018/04/11/38-convolution/</id>
    <published>2018-04-11T07:42:36.000Z</published>
    <updated>2018-11-25T08:30:08.755Z</updated>
    
    <content type="html"><![CDATA[<p>卷积基本概念和常见的卷积神经网络<a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><p>全连接网络的两个问题：</p><ul><li>参数太多：训练效率低、容易过拟合</li><li>局部不变形特征：全连接很难提取出图片的不变性特征</li></ul><h2 id="三个特性"><a href="#三个特性" class="headerlink" title="三个特性"></a>三个特性</h2><p><strong>1. 局部性</strong></p><p>图片特征只在局部。图片特征决定图片类别，这些图片特征在一些局部的区域中。</p><p>局部连接。</p><p><strong>2. 相同性</strong></p><p>用同样的检测模式去检测不同图片的相同特征。只是这些特征出现在图片的不同位置。</p><p>参数共享。</p><p><strong>3. 不变性</strong></p><p>对于一张大图片，进行下采样，图片的性质基本保持不变。</p><p>下采样保持不变性。</p><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><blockquote><ol><li>一维卷积：卷积核、步长、首位0填充</li><li>三种卷积：窄卷积、宽卷积、等长卷积</li><li>二维卷积</li></ol></blockquote><p><strong>1. 一维卷积</strong></p><ul><li>卷积核：参数$[1, 0, -1]$就是一个<code>卷积核</code> 或 <code>滤波器</code></li><li>步长：卷积核滑动的间隔</li><li>零填充：在输入向量两端进行补零</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/ondim-conv-2.jpeg" style="display:block; margin:auto" width="70%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/onedim-conv-0.png" style="display:block; margin:auto" width="50%"><br><strong>2. 三种卷积</strong></p><p>输入n，卷积大小m，步长s，输入神经元各两端填补p个0</p><ul><li>窄卷积：<code>s=1</code>，不补0，输出长度为<code>n-m+1</code></li><li>宽卷积：<code>s=1</code>，两端补0，$p=m-1$， 输出长度为<code>n+m-1</code></li><li>等长卷积：<code>s=1</code>，两端补0，$p=\frac{m-1}{2}$， 输出长度为<code>n</code></li></ul><p>一般卷积默认为窄卷积。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/onedim-conv-1.png" style="display:block; margin:auto" width="50%"></p><p><strong>3. 二维卷积</strong></p><p>输入一张图片（假设深度为1），$X \in \mathbb R^{M \times N}$， 卷积核$W \in \mathbb R ^{m \times n}$ ，则卷积（互相关代替）结果为：<br>$$<br>y_{ij} = \sum_{u=1}^m \sum_{v=1}^n w_{uv} x_{i+u-1, j+v-1}<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/twodim-conv-0.png" style="display:block; margin:auto" width="70%"></p><p>一个卷积核提取一个局部区域的特征，不同的卷积核相当于不同的特征提取器。</p><p>卷积后的结果称为<code>特征映射（feature map）</code>。 </p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/twodim-conv-2.png" style="display:block; margin:auto" width="50%"></p><h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><blockquote><ol><li><p>一个卷积核</p><p>$W_p \in \mathbb R ^{m \times n \times D}$， 对D个通道做卷积，结果相加求和，过激活函数，得到一个特征图$Y^p \in\mathbb R^{M^\prime \times N^\prime}$ </p></li><li><p>多个卷积核：得到P个特征图</p></li></ol></blockquote><p>输入图片(feature map)是$X \in \mathbb R^{M \times N \times D}$，深度是D</p><p><strong>1. 一个卷积核</strong></p><ul><li>用1个卷积核$W_p \in \mathbb R ^{m \times n \times D}$（实际上是D个$\mathbb R^{m\times n}$）去卷积这张图片（所有深度）</li><li>对各个深度的卷积结果进行<strong>相加求和</strong>，再<strong>加上偏置</strong></li><li><strong>过激活函数</strong>，输出最终的FM，是$Y^p$ </li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/conv.png" style="display:block; margin:auto" width="100%"></p><p><strong>2. 多个卷积核</strong></p><p>多个卷积核可以提取出多种不同的特征。输入图片是$X \in \mathbb R^{M \times N \times D}$，</p><ul><li>有P个不同的卷积核$W_p \in \mathbb R ^{m \times n \times D}$， 实际上是四维的[m, n, D, P]，后两维是<code>in_channel</code>、<code>out_channel</code></li><li>输出P个特征图$\mathbb R^{M^\prime \times N^\prime \times P}$</li><li>对每一个卷积核$W \in \mathbb R ^{m \times n \times D}$，对D个深度$\mathbb R ^{m \times n}$分别做卷积，对D个卷积结果进行求和相加，经过激活函数，得到一个特征图 $Y^p \in\mathbb R^{M^\prime \times N^\prime}$</li><li>一共需要$P \times D \times (m \times n) + P$个参数 </li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/conv_layer.gif" style="display:block; margin:auto" width="80%"></p><h2 id="卷积代替全连接"><a href="#卷积代替全连接" class="headerlink" title="卷积代替全连接"></a>卷积代替全连接</h2><blockquote><ol><li>局部连接：卷积核只与输入的一个局部做连接，计算出FM中的一个值，局部性</li><li>权值共享：同一个卷积核与图片的各个位置进行连接，权值是一样的，提取出同样的特征</li></ol></blockquote><p><strong>1. 局部连接</strong></p><ul><li>卷积层的神经元只与输入数据的一个局部区域做连接</li><li>因为图片的局部性，图片的特征在局部</li><li>FM中的每一个值，只与输入的局部相关。而不是与所有的相关</li></ul><p><strong>2. 权值共享</strong></p><ul><li>一个卷积核会分多次对输入数据的各个部分做卷积操作</li><li>对每个部分的连接参数实际上是相同的，因为是同一个卷积核</li><li>因为图片的相同性，同样的卷积核可以检测出相同的特征，只是特征在不同的位置</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/full-conv.png" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/threedim-conv.png" style="display:block; margin:auto" width="60%"></p><h2 id="汇聚层"><a href="#汇聚层" class="headerlink" title="汇聚层"></a>汇聚层</h2><blockquote><ol><li>卷积层的不足：FM的维数很高</li><li>汇聚层的作用：选择特征、降低特征数量、减少参数数量、避免过拟合</li><li>两种汇聚方式：最大和平均。</li></ol></blockquote><p><strong>1. 卷积层的不足</strong></p><ul><li>减少网络连接数量</li><li>但是<strong>FM中的神经元个数依然很多</strong></li><li>如果直接接分类器全连接，则维数会很高，<strong>容易过拟合</strong></li></ul><p><strong>2. 汇聚层的作用</strong></p><p><code>汇聚层</code>(pooling layer)，也作子采样层(subsampling layer)。作用是：</p><ul><li>进行特征选择</li><li>降低特征数量</li><li>进而减少参数数量、避免过拟合</li><li>拥有更大感受野，大图片缩小，保持<code>不变性</code></li></ul><p><strong>3. 两种汇聚方式</strong></p><ul><li>最大汇聚：一个区域内所有神经元的最大值</li><li>平均汇聚：一个区域内所有神经元的平均值</li></ul><p>过大采样区会急剧减少神经元的数量，造成过多的信息损失！</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/max-pool.png" style="display:block; margin:auto" width="90%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/pool.jpeg" style="display:block; margin:auto" width="40%"></p><h2 id="典型的卷积网络结构"><a href="#典型的卷积网络结构" class="headerlink" title="典型的卷积网络结构"></a>典型的卷积网络结构</h2><p>由多个卷积块组成，一个卷积块：</p><ul><li>连续2~5个卷积层，ReLU激活函数</li><li>0~1个汇聚层</li></ul><p>目前，趋向于使用更小的卷积核，比如$1\times 1, 3 \times 3$。汇聚层的比例也逐渐降低，趋向于全卷积网络。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/conv-nn.png" style="display:block; margin:auto" width="100%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/convnet.jpeg" style="display:block; margin:auto" width="70%"></p><h1 id="常见卷积网络"><a href="#常见卷积网络" class="headerlink" title="常见卷积网络"></a>常见卷积网络</h1><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/LeNet.png" style="display:block; margin:auto" width="70%"></p><h2 id="Alex-Net"><a href="#Alex-Net" class="headerlink" title="Alex Net"></a>Alex Net</h2><p>使用ReLU作为非线性激活函数、Dropout防止过拟合、数据增强提高模型准确率。</p><p><strong>AlexNet分组卷积</strong></p><ul><li>对所有通道进行分组，进行分组卷积，执行<strong>标准卷积操作</strong></li><li>在最后时刻才使用两个全连接融合通道的信息</li><li>降低了模型的泛化能力</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/AlexNet.png" style="display:block; margin:auto" width="80%"></p><h2 id="Inception-Net"><a href="#Inception-Net" class="headerlink" title="Inception Net"></a>Inception Net</h2><p>如何选择卷积核大小非常关键：</p><ul><li><strong>一个卷积层同时使用多种尺寸的卷积核</strong></li><li>先过$1\times 1$卷积减少卷积层参数量</li></ul><p>Inception Net由多个Inception模块堆叠而成。一个Inception同时使用$1\times 1$、$3\times 3$、$5\times 5$ 的卷积，如下：</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/inception.png" style="display:block; margin:auto" width="70%"></p><p>$3\times 3$ 、$5\times 5$ 卷积前，先进行$1\times 1$卷积的作用：</p><ul><li>减少输入数据的深度</li><li>减少各个深度的冗余信息，先进行一次特征抽取</li></ul><p>后续还有各种各样的Inception Net，最终演变成Xception Net。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/depth-wise-conv.jpg" style="display:block; margin:auto" width="60%"></p><p>Inception Net的极限就是，对每个channel做一个单独的卷积。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/depth-wise-conv2.jpg" style="display:block; margin:auto" width="60%"></p><h2 id="Res-Net"><a href="#Res-Net" class="headerlink" title="Res Net"></a>Res Net</h2><p>越深的网络可以用ResNet来训练。<a href="https://zhuanlan.zhihu.com/p/28124810?group_id=883267168542789632" target="_blank" rel="noopener">ResNet可以很深的原因</a></p><p><code>残差连接</code>通过<strong>给非线性的卷积层增加直连边</strong>的方式</p><ul><li>来<strong>提高信息的传播效率</strong></li><li>可以减小梯度消失问题</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/resnet.png" style="display:block; margin:auto" width="70%"></p><h2 id="Xception"><a href="#Xception" class="headerlink" title="Xception"></a>Xception</h2><p>卷积需要同时考虑所有通道吗？</p><p>输入图片(feature map)是$X \in \mathbb R^{M \times N \times D}$，深度是D</p><p><strong>1. 传统卷积核会同时考虑所有通道</strong></p><ul><li>传统<strong>1个卷积核</strong>会对所有channel的FM做同样的卷积</li><li>得到D个卷积结果</li><li>再<strong>对D个卷积结果进行相加求过激活函数</strong>得到<strong>一个FM</strong></li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/conv-stantard.jpg" style="display:block; margin:auto" width="70%"></p><p><strong>2. 深度可分离卷积核</strong></p><p><code>Depth Separable Convolution</code> </p><p>输入数据有D个FM，输出P个FM。<code>深度可分离卷积(DepthWise Convolution)</code> 如下：</p><ul><li>对$X$的每个channel，分别做一个单独的卷积，得到D个新的FM</li><li>对D个新的FM，做$1\times 1$的传统卷积(<code>PointWise Convolution</code>)，$P \times D \times (1 \times 1)$ </li><li>最终输出P个FM （通道数变换） </li></ul><p>卷积操作不一定需要同时考虑通道和区域。<code>可分离卷积</code>。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/xception-2.jpg" style="display:block; margin:auto" width="70%"></p><p><strong>3. 可分离卷积参数大大减小</strong></p><p>输入通道$D=3$，输出通道$P=256$，卷积核大小为$3 \times 3$</p><ul><li>传统卷积参数：$256 \times 3 \times (3 \times 3) = 6912$</li><li>DepthWise卷积参数：$3 \times 3 \times 3 +256 \times 3 \times (1 \times 1) =795$， 降低九分之一</li></ul><p>同时，效果更好。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/depthwise-conv-compare.jpg" style="display:block; margin:auto" width="60%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/xception.jpg" style="display:block; margin:auto" width="70%"></p><h2 id="Shuffle-Net"><a href="#Shuffle-Net" class="headerlink" title="Shuffle Net"></a>Shuffle Net</h2><p><strong>1. AlexNet分组卷积</strong></p><ul><li>对所有通道进行分组，进行分组卷积，执行<strong>标准卷积操作</strong></li><li>在最后时刻才使用全连接融合通道的信息</li><li>降低了模型的泛化能力</li></ul><p><strong>2. ShuffleNet 分组卷积</strong></p><p><code>ShuffleNet</code> = <strong>分组卷积</strong>（通道分组）+ <strong>深度可分离卷积</strong>（Depthwise+PointWise）</p><p>对通道进行分组卷积时</p><ul><li>每一个组执行深度可分离卷积，而不是标准传统卷积</li><li>每一次层叠分组卷积时，都进行channel shuffle</li><li>实际上每个组各取一个也能实现shuffle</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/Reading_Note_20170720_ShuffleNet_0.png" style="display:block; margin:auto" width="100%"></p><h2 id="SENet"><a href="#SENet" class="headerlink" title="SENet"></a>SENet</h2><p>Inception、ShuffleNet等网络中，<strong>对所有通道产生的特征</strong>都是<strong>不分权重直接相加求和</strong>的。</p><p>为什么所有通道的特征对模型的作用是相等的呢？</p><p><img src="" style="display:block; margin:auto" width="70%"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考自<a href="https://zhuanlan.zhihu.com/p/28749411" target="_blank" rel="noopener">知乎卷积网络中十大拍案叫绝的操作</a></p><p><strong>1. 卷积核</strong></p><ol><li>大卷积核用多个小卷积核代替</li><li>单一尺寸卷积核用多尺寸卷积核代替</li><li>固定形状卷积核趋于用可变形卷积核</li><li>使用$1\times 1$卷积核</li></ol><p><strong>2. 卷积层通道</strong></p><ol><li>标准卷积使用深度可分离卷积代替</li><li>使用分组卷积</li><li>分组卷积前使用channel shuffle</li><li>通道加权计算</li></ol><p><strong>3. 卷积层连接</strong></p><ol><li>使用skip connection，让模型更深</li><li>densely connection，使每一层都融合其它层的特征输出</li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/cnn/conv-compare.jpg" style="display:block; margin:auto" width="70%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卷积基本概念和常见的卷积神经网络
    
    </summary>
    
      <category term="深度学习" scheme="http://plmsmile.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="可分离卷积" scheme="http://plmsmile.github.io/tags/%E5%8F%AF%E5%88%86%E7%A6%BB%E5%8D%B7%E7%A7%AF/"/>
    
      <category term="卷积" scheme="http://plmsmile.github.io/tags/%E5%8D%B7%E7%A7%AF/"/>
    
      <category term="1*1卷积" scheme="http://plmsmile.github.io/tags/1-1%E5%8D%B7%E7%A7%AF/"/>
    
      <category term="分组卷积" scheme="http://plmsmile.github.io/tags/%E5%88%86%E7%BB%84%E5%8D%B7%E7%A7%AF/"/>
    
      <category term="LeNet" scheme="http://plmsmile.github.io/tags/LeNet/"/>
    
      <category term="AlexNet" scheme="http://plmsmile.github.io/tags/AlexNet/"/>
    
      <category term="InceptionNet" scheme="http://plmsmile.github.io/tags/InceptionNet/"/>
    
      <category term="ResNet" scheme="http://plmsmile.github.io/tags/ResNet/"/>
    
      <category term="XceptionNet" scheme="http://plmsmile.github.io/tags/XceptionNet/"/>
    
      <category term="ShuffleNet" scheme="http://plmsmile.github.io/tags/ShuffleNet/"/>
    
  </entry>
  
  <entry>
    <title>强化学习</title>
    <link href="http://plmsmile.github.io/2018/04/01/37-reinforce-learning/"/>
    <id>http://plmsmile.github.io/2018/04/01/37-reinforce-learning/</id>
    <published>2018-04-01T01:30:47.000Z</published>
    <updated>2018-11-25T08:30:08.716Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>强化学习的基础知识。基本要素、轨迹、值函数、V函数和Q函数、贝尔曼方程。<a id="more"></a> </p></blockquote><p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="强化学习定义"><a href="#强化学习定义" class="headerlink" title="强化学习定义"></a>强化学习定义</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>强化学习是指一个<strong>智能体</strong>从与<strong>环境</strong>的<strong>交互</strong>中不断学习去完成特定的目标。</p><p>强化学习不需要给出正确策略作为监督信息，只需要给出<code>策略的（延迟）回报</code>，并通过<strong>调整策略</strong>来取得最大化的期望回报。</p><blockquote><ol><li>智能体、环境</li><li>环境状态$s$，智能体的动作$a$，智能体的策略$\pi(a\mid s)$，状态转移概率$p(s_{t+1}\mid s_t, a_t)$，即使奖励$r(s, a, s \prime)$</li></ol></blockquote><h2 id="智能体和环境"><a href="#智能体和环境" class="headerlink" title="智能体和环境"></a>智能体和环境</h2><p><strong>智能体</strong></p><ul><li>感知环境的状态和反馈的奖励，进行学习和决策</li><li><code>决策</code> ：根据 – 环境状态 – 做出不同的动作</li><li><code>学习</code>： 根据 – 反馈奖励 – 调整策略</li></ul><p><strong>环境</strong></p><ul><li>智能体外部的所有事物</li><li>收到 – 智能体的动作 – 改变状态</li><li>给 – 智能体 – 反馈奖励</li></ul><h2 id="5个基本要素"><a href="#5个基本要素" class="headerlink" title="5个基本要素"></a>5个基本要素</h2><p><strong>状态$s$</strong></p><p>环境的状态，状态空间$\mathcal S$， 离散/连续</p><p><strong>动作$a$</strong></p><p>智能体的行为，动作空间$\mathcal A$， 离散/连续</p><p><strong>策略$\pi(a\mid s)$</strong>  </p><p>智能体  根据 – 环境状态s – 决定下一步的动作a 的函数 </p><p><strong>状态转移概率$p(s \prime \mid s, a)$</strong> </p><p>根据 –  当前状态$s$和智能体的动作$a$  –  环境状态变为$s \prime$的概率</p><p><strong>即时奖励$r(s, a, s\prime)$</strong> </p><p>环境给智能体的奖励，标量函数。根据 – 环境当前状态 、智能体执行的动作、环境新状态</p><h2 id="智能体的策略"><a href="#智能体的策略" class="headerlink" title="智能体的策略"></a>智能体的策略</h2><p>$\pi(a \mid s)$ 智能体根据环境状态决定下一步的动作。分为确定性策略和<code>随机性策略</code>。<br>$$<br>\pi(a\mid s) \triangleq p(a\mid s) , \quad \quad \sum_{a \in \mathcal A} \pi(a\mid s) = 1<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/agent-env-interact.png" style="display:block; margin:auto" width="50%"></p><h1 id="马尔科夫决策过程"><a href="#马尔科夫决策过程" class="headerlink" title="马尔科夫决策过程"></a>马尔科夫决策过程</h1><blockquote><ol><li>马尔可夫过程，$p(s_{t+1}\mid s_t)$</li><li>马尔可夫决策过程，$p(s_{t+1} \mid s_t, a_t)$</li><li>轨迹，给初始状态，智能体与环境的一次交互过程</li></ol></blockquote><h2 id="马尔可夫过程"><a href="#马尔可夫过程" class="headerlink" title="马尔可夫过程"></a>马尔可夫过程</h2><p>状态序列$s_0, s_1, \cdots, s_t$具有马尔可夫性，$s_{t+1}$只依赖于$s_t$<br>$$<br>p(s_{t+1}\mid s_t, \cdots, s_0) = p(s_{t+1} \mid s_t)<br>$$</p><h2 id="马尔可夫决策过程"><a href="#马尔可夫决策过程" class="headerlink" title="马尔可夫决策过程"></a>马尔可夫决策过程</h2><p>$s_{t+1}$依赖于$s_t$和$a_t$， 即<strong>环境新状态</strong>依赖于<strong>当前状态</strong>和<strong>当前智能体的动作</strong>。<br>$$<br>p(s_{t+1} \mid s_t, a_t, \cdots, s_0, a_0) = p(s_{t+1}\mid s_t, a_t)<br>$$<br><strong>智能体与环境的交互</strong>是一个<code>马尔可夫决策过程</code>。</p><h2 id="轨迹"><a href="#轨迹" class="headerlink" title="轨迹"></a>轨迹</h2><p>给定策略$\pi(a\mid s)$， <strong>轨迹</strong>是智能体与环境的<strong>一次交互过程</strong>，是一个马尔可夫决策过程，如下：<br>$$<br>\tau = s_0, a_0, s_1, r_1, \cdots, s_{T-1}, a_{T-1}, s_{T}, r_{T}<br>$$<br>其中$r_t = r(s_{t-1}, a_{t-1}, s_t)$是时刻$t$的即时奖励。</p><p>轨迹的概率</p><ul><li>初始状态</li><li>所有时刻概率的乘积</li><li><strong>智能体执行动作，环境更新状态</strong></li></ul><p>$$<br>p(\tau) = p(s_0) \prod_{t=0}^{T-1}\pi(a_t \mid s_t) p(s_{t+1} \mid s_t, a_t)<br>$$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/rl/markov-decision-process.png" style="display:block; margin:auto" width="70%"></p><h1 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h1><blockquote><ol><li>一个轨迹的总回报。$G(\tau) = \sum_{t=0}^{T-1} r_{t+1}$</li><li>一个策略的期望回报。$E_{\tau \sim p(\tau)} [G(\tau)]$。 所有轨迹的回报的期望</li><li>强化学习的目标。学一个策略$\pi_{\theta}(a \mid s)$， 最大化这个策略的期望回报</li></ol></blockquote><h2 id="轨迹的总回报"><a href="#轨迹的总回报" class="headerlink" title="轨迹的总回报"></a>轨迹的总回报</h2><p><strong>1. 某一时刻的奖励</strong></p><p>$r_t = r(s_{t-1}, a_{t-1}, s_t)$是$t$时刻， 环境给智能体的<strong>奖励</strong>。</p><p>给定策略$\pi(a\mid s)$， 智能体与环境<code>一次交互过程</code>(回合，试验)为轨迹$\tau$</p><p><strong>2. 一条轨迹的总回报</strong></p><p>总回报是一条轨迹所有时刻的累积奖励和。<br>$$<br>G(\tau) = \sum_{t=0}^{T-1} r(s_{t-1}, a_{t-1}, s_t) =  \sum_{t=0}^{T-1} r_{t+1}<br>$$<br><strong>3. 一条轨迹的折扣回报</strong></p><p>折扣回报引入<code>折扣率</code>，<strong>降低远期回报的权重</strong>（T无限大时）。<br>$$<br>G(\tau) = \sum_{t=0}^{T-1} \gamma^t r_{t+1}, \quad \quad \gamma \in [0, 1]<br>$$<br><code>折扣率</code>$\gamma$</p><ul><li>$\gamma \sim 0$， 在意短期回报</li><li>$\gamma \sim 1$， 在意长期回报</li></ul><h2 id="策略的期望回报"><a href="#策略的期望回报" class="headerlink" title="策略的期望回报"></a>策略的期望回报</h2><p>给一个策略$\pi(a\mid s)$， <strong>有多个轨迹</strong>。</p><p>一个策略的<code>期望回报</code>：该策略下<strong>所有轨迹总回报的期望值</strong>。<br>$$<br>E_{\tau \sim p(\tau)} [G(\tau)] =E_{\tau \sim p(\tau)} [\sum_{t=0}^{T-1}r_{t+1}]<br>$$</p><h2 id="强化学习的目标"><a href="#强化学习的目标" class="headerlink" title="强化学习的目标"></a>强化学习的目标</h2><p>强化学习的目标是<strong>学习到一个策略$\pi_{\theta}(a\mid s)​$</strong>，来<strong>最大化这个策略的期望回报</strong>。<strong>希望智能体能够获得更多的回报</strong>。<br>$$<br>J(\theta) = E_{\tau \sim p_{\theta}(\tau)} [\sum_{t=0}^{T-1}\gamma ^tr_{t+1}]<br>$$</p><h1 id="值函数"><a href="#值函数" class="headerlink" title="值函数"></a>值函数</h1><blockquote><ol><li>状态值函数。$V^\pi(s)$, 初始状态为s，执行策略$\pi$得到的期望回报。 </li><li>贝尔曼方程迭代计算值函数</li><li>状态-动作值函数。$Q^\pi(s, a)$， 初始状态为s，进行动作a，执行策略$\pi$得到的期望回报 </li><li>V函数与Q函数的关系。$V^\pi(s) = E_{a \sim \pi(a \mid s)}[Q^\pi(s, a)]$</li><li>值函数的作用。评估策略$\pi(a \mid s)$， 对好的动作a（$Q^\pi(s, a)$大 ），增大其概率$\pi(a \mid s)$</li></ol></blockquote><h2 id="状态值函数"><a href="#状态值函数" class="headerlink" title="状态值函数"></a>状态值函数</h2><p>状态值函数$V^\pi(s)$是初始状态为$s$，执行策略$\pi$得到的期望回报。（因为有多个轨迹，每个轨迹的初始状态都是$\tau_{s_0} = s$）<br>$$<br>V^\pi(s) = E_{\tau \sim p(\tau)} [\sum_{t=0}^{T-1}r_{t+1} \mid \tau_{s_0} = s]<br>$$</p><h2 id="贝尔曼方程计算值函数"><a href="#贝尔曼方程计算值函数" class="headerlink" title="贝尔曼方程计算值函数"></a>贝尔曼方程计算值函数</h2><p><strong>当前状态的值函数</strong>，可以<strong>通过下个状态的值函数</strong>进行<strong>递推计算</strong>。</p><p>核心：<strong>$V^\pi(s) \sim r(s, a, s \prime) + V^\pi(s\prime)$</strong>。 有动态规划的意思</p><ul><li>关键在于状态转移：$s \sim s\prime$</li><li><strong>选动作</strong>、<strong>选新状态</strong> ： $s \sim a$， $s, a \sim s\prime$</li><li>策略$\pi(a\mid s)$ 和状态转移概率$p(s\prime \mid s, a)$</li><li>对这两层可能性的所有值函数，求期望即可</li></ul><p>给定<code>策略</code>$\pi(a\mid s)$、<code>状态转移概率</code>$p(s\prime \mid s, a)$、<code>奖励</code>$r(s, a, s\prime)$， <strong>迭代计算值函数</strong>：<br>$$<br>V^\pi(s) = E[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p><strong>V函数的贝尔曼方程</strong><br>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><h2 id="状态-动作值函数"><a href="#状态-动作值函数" class="headerlink" title="状态-动作值函数"></a>状态-动作值函数</h2><p>状态-动作值函数是 <strong>初始状态为$s$</strong>并<strong>进行动作$a$</strong>， <strong>执行策略$\pi$</strong>得到的<code>期望总回报</code>。 也称为<strong>Q函数</strong>。<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br><strong>Q函数的贝尔曼方程</strong><br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) +<br>\gamma E_{a\prime \sim \pi(a\prime \mid s\prime)}[Q^\pi(s\prime, a\prime)]]<br>$$</p><h2 id="V函数与Q函数"><a href="#V函数与Q函数" class="headerlink" title="V函数与Q函数"></a>V函数与Q函数</h2><ul><li>$V(s)$函数要 先确定动作$s \sim a$， 再确定新状态$s, a \sim s\prime$</li></ul><ul><li>$Q(s,a)$函数是确定动作a后的V函数</li></ul><p>V函数是所有动作a的Q函数的期望<br>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}[Q^\pi(s, a)]<br>$$</p><h2 id="值函数的作用"><a href="#值函数的作用" class="headerlink" title="值函数的作用"></a>值函数的作用</h2><p><code>值函数</code>用<strong>来对策略$\pi(a\mid s)$进行评估</strong>。</p><p>如果在状态s，有一个动作a使得$Q^\pi(s, a) &gt; V^\pi(s)$</p><ul><li>s状态，执行动作a 比 s状态 所有动作的期望，都要好。<strong>状态a高于所有状态的平均值</strong></li><li>说明执行动作a比当前策略$\pi(a \mid s)$好</li><li><strong>调整参数使$\pi(a \mid s)$的概率增加</strong> </li></ul><h1 id="贝尔曼和贝尔曼最优方程"><a href="#贝尔曼和贝尔曼最优方程" class="headerlink" title="贝尔曼和贝尔曼最优方程"></a>贝尔曼和贝尔曼最优方程</h1><blockquote><ol><li>$V(s)$函数和$Q(s,a)$函数</li><li>贝尔曼方程（选择所有可能的均值）</li><li>贝尔曼最优方程（直接选择最大值）</li></ol></blockquote><h2 id="V函数与Q函数-1"><a href="#V函数与Q函数-1" class="headerlink" title="V函数与Q函数"></a>V函数与Q函数</h2><p>V函数：以<strong>s为初始状态</strong>，执行策略$\pi$得到的<code>期望回报</code>（所有轨迹回报的均值）<br>$$<br>V^\pi(s) = E_{\tau \sim p(\tau)} [\sum_{t=0}^{T-1}r_{t+1} \mid \tau_{s_0} = s]<br>$$<br>Q函数：以<strong>s为初始状态，执行动作a</strong>，执行策略$\pi$得到的期望回报<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$<br>利用V函数去计算Q函数<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><h2 id="贝尔曼方程"><a href="#贝尔曼方程" class="headerlink" title="贝尔曼方程"></a>贝尔曼方程</h2><p>$V(s)$的贝尔曼方程，选择<strong>所有a的期望回报</strong>， 也是<strong>Q函数的均值</strong>，$V(s)=E_a[Q(s, a)]$<br>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}E_{s\prime \sim p(s\prime \mid s, a)}[ r(s, a, s\prime) + \gamma V^\pi(s\prime)]<br>$$</p><p>$$<br>V^\pi(s) = E_{a \sim \pi(a \mid s)}[Q^\pi(s, a)]<br>$$</p><p>$Q(s,a)$函数的贝尔曼方程<br>$$<br>Q^\pi(s, a) = E_{s\prime \sim p(s\prime \mid s, a)} [r(s, a, s\prime) + \gamma E_{a\prime \sim \pi(a\prime \mid s\prime)}[Q^\pi(s\prime, a\prime)]]<br>$$</p><h2 id="贝尔曼最优方程"><a href="#贝尔曼最优方程" class="headerlink" title="贝尔曼最优方程"></a>贝尔曼最优方程</h2><p>$V(s)$函数的贝尔曼最优方程，实际上是<strong>直接选择所有a中的最大回报</strong> ：<br>$$<br>V^<em>(s) = \max_\limits{a} E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma V^</em>(s^\prime)]<br>$$<br>$Q(s,a)$函数的贝尔曼最优方程<br>$$<br>Q^<em>(s, a) =  E_{s^\prime \sim p(s^\prime \mid s, a)}[r(s, a, s^\prime) + \gamma \max_\limits{a\prime}Q^</em>(s^\prime, a^\prime)]<br>$$</p><h1 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title="深度强化学习"></a>深度强化学习</h1><p>有些任务的状态和动作非常多，并且是连续的。普通方法很难去计算。</p><p>可以使用更复杂的函数（深度神经网络）使智能体来感知更复杂的环境状态，建立更复杂的策略。</p><p>深度强化学习</p><ul><li><code>强化学习</code> – <strong>定义问题和优化目标</strong></li><li><code>深度学习</code> – 解决<strong>状态表示</strong>、<strong>策略表示</strong>等问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;强化学习的基础知识。基本要素、轨迹、值函数、V函数和Q函数、贝尔曼方程。
    
    </summary>
    
      <category term="强化学习" scheme="http://plmsmile.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="智能体" scheme="http://plmsmile.github.io/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="环境" scheme="http://plmsmile.github.io/tags/%E7%8E%AF%E5%A2%83/"/>
    
      <category term="值函数" scheme="http://plmsmile.github.io/tags/%E5%80%BC%E5%87%BD%E6%95%B0/"/>
    
      <category term="贝尔曼方程" scheme="http://plmsmile.github.io/tags/%E8%B4%9D%E5%B0%94%E6%9B%BC%E6%96%B9%E7%A8%8B/"/>
    
      <category term="V函数" scheme="http://plmsmile.github.io/tags/V%E5%87%BD%E6%95%B0/"/>
    
      <category term="Q函数" scheme="http://plmsmile.github.io/tags/Q%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>阿里小蜜论文</title>
    <link href="http://plmsmile.github.io/2018/03/31/36-alime-chat/"/>
    <id>http://plmsmile.github.io/2018/03/31/36-alime-chat/</id>
    <published>2018-03-31T06:23:20.000Z</published>
    <updated>2018-11-25T08:30:08.677Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.aclweb.org/anthology/P17-2079" target="_blank" rel="noopener">AliMe Chat: A Sequence to Sequence and Rerank based Chatbot Engine</a>  <a id="more"></a> </p><p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="AliMe-Chat"><a href="#AliMe-Chat" class="headerlink" title="AliMe Chat"></a>AliMe Chat</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><strong>1. IR Model</strong></p><p>Information Retrieval。有一个QA对知识库，给一个问题，选择最相似的问题Pair，得出答案。</p><p>缺点：很难处理那些不在QA知识库里面的<code>Long tail</code>问句</p><p><strong>2. Generation Model</strong></p><p><code>(Seq2Seq)</code> ：基于Question生成一个回答</p><p>缺点：会产生一些不连贯或者没意义的回答</p><p><strong>3. 小蜜的混合模型</strong></p><p>集成了IR和生成式模型。</p><ol><li>收到一个句子</li><li><strong>IR模型</strong>：从QA知识库中选择一些答案作为候选答案</li><li><strong>打分模型</strong>：利用<code>Attentive Seq2Seq</code>对候选答案进行打分</li><li>最高得分大于<code>阈值</code>，直接输出该得分</li><li><strong>生成式模型</strong>：否则，利用生成式模型生成一个回答</li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/alimechat.png" style="display:block; margin:auto" width="80%"></p><h2 id="QA知识库"><a href="#QA知识库" class="headerlink" title="QA知识库"></a>QA知识库</h2><p>从用户和员工的对话数据中，提取一些问题和答案。也会把几个问题连在一起。最终共9164834个QA对。</p><h2 id="IR模型"><a href="#IR模型" class="headerlink" title="IR模型"></a>IR模型</h2><p><strong>1. IR步骤</strong> </p><ol><li>建立索引：每个单词 – 多个问题</li><li>收到一个问句计算它的词集：分词 – 去掉停用词 – 扩展同义词</li><li>利用词集和索引去找到若干个QA对</li><li>利用BM25算法，去计算问句和所有候选QA对里问题的相似度</li><li>选择最相似的QA对</li></ol><p><strong>2. BM25算法</strong></p><p>BM25通常用来搜索相关性评分。</p><p>一个<code>query</code>和一个<code>d</code> 。把query分割成$K$个<strong>语素$q_i$</strong>（中文是分词）<br>$$<br>\rm{score}(q, d) = \sum_{i}^K w_i \cdot r(q_i, d)<br>$$<br>$w_i​$是判断一个词与一个文档的相关性权重。这里使用<code>IDF</code>来计算。 </p><ul><li>$N$是总文档数，$N(q_i)$为包含词$q_i$的文档数</li><li>$f_i$ 为$q_i$在d中的出现频率，$g_i$为$q_i$在$q$中的出现频率     </li><li>$d_l$ 为$d$的长度，$\rm{avg}(d_l)$是所有文档的长度   </li><li>$k_1, k_2, b$ 为调节因子，一般$k_1=2,b=0.75$ </li></ul><p>$$<br>w_i = \rm{IDF}(q_i) = \log \frac{N - N(q_i) + 0.5}{N(q_i) + 0.5}<br>$$</p><p>$$<br>r(q_i, d) = \frac{f_i \cdot (k_1 + 1)} {f_i + K} \cdot \frac{g_i \cdot (k_2 +1 )}{g_i + k_2}<br>$$</p><p>$$<br>K = k_1 \cdot (1 - b + b \cdot \frac{d_l}{\rm{avg}(d_l)})<br>$$</p><p>特别地，一般$q_i$只在$q$中出现一次，即$g_i = 1$， 则<br>$$<br>r(q_i, d) = \frac{f_i \cdot (k_1 + 1)} {f_i + K}<br>$$<br>调节因子</p><ul><li>K ：相同$f_i$的情况下，文档越长，相似性越低</li><li>b：越大，提高长文档与$q_i$的相似性  </li></ul><h2 id="生成式模型"><a href="#生成式模型" class="headerlink" title="生成式模型"></a>生成式模型</h2><p><strong>1. Attentive Seq2Seq</strong> </p><ol><li>输入问句的语义信息： $(h_1, h_2, \cdots, h_m)$</li><li>上一时刻的单词和隐状态：$y_{i-1},s_{i-1}$</li><li>计算注意力分布：$\alpha_{ij} = a(s_{i-1}, h_j)$</li><li>语义信息：$c_i = \sum_{j=1}^m \alpha_{ij}h_j$</li><li>预测当前单词：$p(y_i=w_i \mid \theta_i) = p(y_i=w_i  \mid y_1, \cdots, y_{i-1}, c_i) = f(y_{i-1}, s_{i-1}, c_i)$</li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/attentive-seq2seq.png" style="display:block; margin:auto" width="70%"></p><p><strong>2. 数据padding</strong> </p><p>利用Tensorflow的<code>Bucket Mechanism</code>组织。选择(5,5),(5,10),(10,15),(20,30),(45,60)。          </p><p><strong>3. Softmax</strong></p><p>训练时，softmax词表使用目标词汇+512个随机词汇。</p><p><strong>4. BeamSearch 解码</strong></p><p>每个时刻选择top-k(k=10)</p><h2 id="打分模型"><a href="#打分模型" class="headerlink" title="打分模型"></a>打分模型</h2><p>打分模型，对所有候选答案计算一个得分，然后选择得分最高的答案。</p><p>生成式模型，在解码时会计算各个单词的概率。打分模型和生成式模型使用同一个模型。</p><p>打分模型，计算候选回答中每个单词在Decoder时出现的概率。再求平均值作为该回答的得分。<br>$$<br>s^{\text{avg}(p)} = \frac{1}{n} \sum_{i=1}^n p(y_i = w_i \mid \theta_i)<br>$$</p><h2 id="评价方法"><a href="#评价方法" class="headerlink" title="评价方法"></a>评价方法</h2><p>5个评价规则：</p><ul><li>语法正确</li><li>意义相关</li><li>标准的表达</li><li>上下文无关 context independent</li><li>not overly generalized</li></ul><p>答案的三个级别：</p><ul><li>2 ：适合。满足所有规则</li><li>1： 一般。满足前三项，不满足后面两项其中一项</li><li>0：不适合</li></ul><p>top-1概率<br>$$<br>P_{\rm{top}<em>1} = \frac{N</em>{合适} + N_{一般}}{N_{所有}}<br>$$</p><h1 id="阿里小蜜助手"><a href="#阿里小蜜助手" class="headerlink" title="阿里小蜜助手"></a>阿里小蜜助手</h1><p><a href="https://arxiv.org/abs/1801.05032" target="_blank" rel="noopener">小蜜助手</a></p><p>小蜜主要包括：助手(Task)服务、客户服务、聊天服务。支持声音、文本输入，支持多轮对话。</p><h2 id="系统概览"><a href="#系统概览" class="headerlink" title="系统概览"></a>系统概览</h2><p><strong>1. 系统概览</strong></p><ol><li>输入层：接收多个终端和多种形式的输入</li><li>意图分类层：<code>Rules Parser</code> 直接解析意图，失败则通过 <code>Intention Classifier</code> 解析意图</li><li>处理问题组件层：语义解析、知识图引擎、信息提取引擎、Slot Filling引擎、聊天引擎</li><li>知识库：QA对，知识图。</li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/ali-assist.png" style="display:block; margin:auto" width="70%"></p><p><strong>2. 问题的信息流</strong></p><p>收到一个问句后</p><p>1 使用<code>Business Rules Parser</code> （trie-based）去解析q，如果匹配到一个模式</p><ol><li>q是一个任务型的问题（助手服务）：给<code>Slot Filling Engine</code>（槽填充） 直接给答案 </li><li>q是一个促销活动：给到<code>Sales Promotion</code> ，回答准备好的答案</li><li>q是请求人工：则先询问客户有什么问题</li></ol><p>2 没有匹配到一个模式，给到<code>意图分类器</code>去识别意图，也就是识别出意图的场景（比如退货、退款、人工等） </p><p>3 如果场景是要转人工，则直接转人工</p><p>4 否则，q给到语义解析器，去识别是否包含语义标签（知识图谱中的实体）</p><ol><li>如果识别出语义标签，则通过知识图谱去找答案，如果找到直接输出</li><li>如果知识图谱没有答案</li><li>如果有上下文，结合上下文和q再去解析语义，再给到语义解析器解析语义标签</li><li>如果没有上下文，则判断是否要询问用户</li><li>如果要询问，则通过模板去询问用户</li><li>如果不用询问，则通过<code>IR</code>去提取信息，如果有答案，则输出；如果没有，则转人工 </li></ol><p>5 如果不包含语义标签</p><ol><li>如果要聊天，则通过聊天引擎去产生结果</li><li>否则，通过词模板去输出结果</li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/alime-assist-flow.png" style="display:block; margin:auto" width="70%"></p><h2 id="意图分类"><a href="#意图分类" class="headerlink" title="意图分类"></a>意图分类</h2><p>对一个问句结合上下文（前面的文件）去识别出它的意图。有3个大范围：</p><ul><li>助手。我要订机票</li><li>信息咨询、解决方案。怎么找回密码</li><li>聊天。我不开心</li></ul><p>每一个大的范围都会进行商业细化。比如助手服务会包含订机票、手机充值。</p><p>意图分类由<strong>商业规则解析器</strong>和<strong>意图分类器</strong>组成。前者解析失败，才会执行后者</p><ul><li>规则解析器：一颗很大的trie树，写了很多的规则</li><li>意图分类器：CNN</li></ul><p>CNN，使用<code>fast-text</code>训练的词向量，fine tuned in CNN</p><ul><li>输入1：问题q</li><li>输入2：问题q和上下文(之前的问题)的语义标签</li></ul><p>CNN的好处</p><ul><li>也可以捕获上下文信息（前一个和后一个），足够好、够用的结果就行</li><li>CNN快啊，QPS=200，Query per Second</li><li>多个卷积池化层或者RNN能实现一个更好的结果，但是扩展性不好？为什么？</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/alime/cnn.png" style="display:block; margin:auto" width="70%"></p><h1 id="TaskBot"><a href="#TaskBot" class="headerlink" title="TaskBot"></a>TaskBot</h1><p>主要是以强化学习为中心的端到端的对话管理，由下面三个部分组成：</p><h2 id="Intent-network"><a href="#Intent-network" class="headerlink" title="Intent network"></a>Intent network</h2><blockquote><p> 处理用户的输入</p></blockquote><p>使用单层CNN对用户的问句进行编码，得到用户的意图语义向量</p><h2 id="Neural-belief-tracker"><a href="#Neural-belief-tracker" class="headerlink" title="Neural belief tracker"></a>Neural belief tracker</h2><blockquote><p>提取记录用户的slot信息</p></blockquote><ul><li>使用BiLSTM-CRF来提取用户每次输入的slot信息</li><li>根据上一轮系统的回答和当前用户的问句生成当前的Context信息，给到后面的Policy Network</li><li>优点是：BiLSTM可以挖掘出当前词的Context信息，而CRF能有效地对标记序列进行建模</li></ul><h2 id="Policy-networker"><a href="#Policy-networker" class="headerlink" title="Policy networker"></a>Policy networker</h2><blockquote><p>决定系统的操作，继续反问用户或者直接产生相应的实际操作</p></blockquote><p>这也是强化学习的核心点，主要包含Episode，Reward，State和Action四个部分。<br><strong>Episode</strong><br>在某个场景下，识别出用户该场景的意图，则认为一个Episode开始；执行目的操作或者退出，则认为Episode结束<br><strong>Reward</strong><br>收集线上用户的反馈，并根据正负给出相应的Reward。特别注意要使用预训练的环境<br><strong>State</strong><br>结合当前新的Slot状态（Context）、历史的Slot信息和用户的当前问句信息，使用线性层+Softmax直接算出各个Actions的概率<br><strong>Action</strong><br>Action就是系统可以给用户的一些反馈操作，比如继续询问用户、执行一个真实的操作等等。</p><p>该Taskbot的瓶颈主要是难以确定用户退出的原因，从而很难给出一些确定的惩罚。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.aclweb.org/anthology/P17-2079&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AliMe Chat: A Sequence to Sequence and Rerank based Chatbot Engine&lt;/a&gt;
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="chatbot" scheme="http://plmsmile.github.io/tags/chatbot/"/>
    
      <category term="qa" scheme="http://plmsmile.github.io/tags/qa/"/>
    
      <category term="IR" scheme="http://plmsmile.github.io/tags/IR/"/>
    
      <category term="BM25" scheme="http://plmsmile.github.io/tags/BM25/"/>
    
      <category term="seq2seq" scheme="http://plmsmile.github.io/tags/seq2seq/"/>
    
      <category term="CNN" scheme="http://plmsmile.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>网络优化</title>
    <link href="http://plmsmile.github.io/2018/03/30/35-nerual-network-optim/"/>
    <id>http://plmsmile.github.io/2018/03/30/35-nerual-network-optim/</id>
    <published>2018-03-30T05:54:34.000Z</published>
    <updated>2018-11-25T08:30:08.636Z</updated>
    
    <content type="html"><![CDATA[<p>参数初始化、数据预处理、逐层归一化、各种优化方法、超参数优化。<a id="more"></a> </p><blockquote><p>任何数学技巧都不能弥补信息的缺失。本文介绍网络优化方法</p></blockquote><p><img src="" style="display:block; margin:auto" width="70%"></p><h1 id="神经网络的问题"><a href="#神经网络的问题" class="headerlink" title="神经网络的问题"></a>神经网络的问题</h1><p>神经网络有很强的表达能力。但有优化问题和泛化问题。主要通过<code>优化</code>和<code>正则化</code>来提升网络。</p><h2 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h2><p><strong>优化问题的难点</strong></p><ul><li>网络是一个<strong>非凸函数</strong>，深层网络的<strong>梯度消失</strong>问题，很难优化</li><li>网络<strong>结构多样性</strong>，很难找到通用优化方法</li><li>参数多、数据大，<strong>训练效率低</strong></li><li>参数多，存在<strong>高维变量的非凸优化</strong></li></ul><p>低维空间非凸优化：存在局部最优点，难在初始化参数和逃离局部最优点</p><p>高维空间非凸优化：难在如何逃离<code>鞍点</code>。 鞍点是梯度为0，但一些维度是最高点，另一些维度是最低点。</p><p>梯度下降法<strong>很难逃离鞍点</strong>。</p><p><strong>梯度下降法面临的问题</strong></p><ul><li>如何初始化参数</li><li>预处理数据</li><li>如何选择合适的学习率，避免陷入局部最优</li></ul><h2 id="泛化问题"><a href="#泛化问题" class="headerlink" title="泛化问题"></a>泛化问题</h2><p>神经网络拟合能力很强，容易过拟合。<a href="https://plmsmile.github.io/2017/11/26/cs224n-notes3-neural-networks-2/">解决过拟合的5个方法</a></p><h1 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h1><p><a href="https://plmsmile.github.io/2017/11/26/cs224n-notes3-neural-networks-2/#%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96">我之前的参数初始化笔记</a></p><h2 id="对称权重问题"><a href="#对称权重问题" class="headerlink" title="对称权重问题"></a>对称权重问题</h2><p><strong>全0产生的对称权重问题</strong></p><p><strong>参数千万不能全0初始化</strong>。如果全0初始化，会导致隐层神经元激活值都相同，导致深层神经元没有区分性。这就是<code>对称权重</code>现象。 </p><p>通俗点：</p><ul><li>每个神经元输出相同 – BP时梯度也相同 – 参数更新也相同</li><li>神经元之间就<strong>失去了不对称性的源头</strong></li></ul><p>应该对每个参数<code>随机初始化</code>，打破这个对称权重现象，<strong>使得不同神经元之间区分性更好</strong>。</p><p><strong>参数区间的选择</strong></p><p><code>参数太小</code>时</p><p>使得<code>Sigmoid</code>激活函数<strong>丢失非线性的能力</strong>。在0附近近似线性，多层神经网络的优势也不存在。</p><p><code>参数太大</code>时</p><p><code>Sigmoid</code>的输入会变得很大，<strong>输出接近1</strong>。<strong>梯度直接等于0</strong>。</p><p>选择一个<strong>合适的初始化区间非常重要</strong>。如果，一个神经元输入连接很多，那么每个输入连接上的权值就应该小一些。</p><h2 id="高斯分布初始化"><a href="#高斯分布初始化" class="headerlink" title="高斯分布初始化"></a>高斯分布初始化</h2><p>高斯分布也就是正态分布。</p><p>初始化一个深度网络，比较好的方案是<strong>保持每个神经元输入的方差</strong>为一个<code>常量</code>。</p><p>如果神经元输入是$n_{in}$， 输出是$n_{out}$， 则按照$N(0, \sqrt{\frac {2}{n_{in} + n_{out}}})$ 来初始化参数。</p><h2 id="均匀分布初始化"><a href="#均匀分布初始化" class="headerlink" title="均匀分布初始化"></a>均匀分布初始化</h2><p>在$[-r, r]$区间内，采用均匀分布来初始化参数</p><h2 id="Xavier均匀分布初始化"><a href="#Xavier均匀分布初始化" class="headerlink" title="Xavier均匀分布初始化"></a>Xavier均匀分布初始化</h2><p>会自动计算超参数$r$， 来对参数进行$[-r, r]$均匀分布初始化。</p><p>设$n^{l}$为第$l$ 层神经元个数， $n^{l-1}$ 是第$l-1$层神经元个数。</p><ul><li><code>logsitic</code>激活函数 ：$r = \sqrt{\frac{6}{n^{l-1} + n^l}}$</li><li><p><code>tanh</code>激活函数： $r = 4 \sqrt{\frac{6}{n^{l-1} + n^l}}$</p><p>$l$层的一个神经元$z^l$，收到$l-1$层的$n^{l-1}$个神经元的输出$a_i^{l-1}$, $i \in [1, n^{(l-1)}]$。<br>$$<br>z^l = \sum_{i=1}^n w_i^l a_i^{l-1}<br>$$<br>为了避免初始化参数使得激活值变得饱和，尽量使$z^l$处于线性区间，即<strong>神经元的输出</strong>$a^l = f(z^l) \approx z^l$。 </p></li></ul><p>假设$w_i^l$和$a_i^{l-1}$相互独立，均值均为0，则a的均值为<br>$$<br>E[a^l] = E[\sum_{i=1}^n w_i^l a_i^{l-1}] = \sum_{i=1}^d E[\mathbf w_i] E[a_i^{l-1}] = 0<br>$$<br>$a^l$的方差<br>$$<br>\mathrm{Var} [a^l] = n^{l-1} \cdot \mathrm{Var} [w_i^l] \cdot \mathrm{Var} [a^{l-1}_i]<br>$$<br>输入信号经过该神经元后，被放大或缩小了$n^{l-1} \cdot \mathrm{Var} [w_i^l]$倍。 </p><p>为了使输入信号经过多层网络后，不被过分放大或过分缩小，应该使$n^{l-1} \cdot \mathrm{Var} [w_i^l]=1$。 </p><p>综合前向和后向，使<strong>信号在前向和反向传播中都不被放大或缩小</strong>，综合设置方差：<br>$$<br>\mathrm{Var} [w_i^l] = \frac{2} {n^{l-1} + n^l}<br>$$</p><h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h2 id="为什么要归一化"><a href="#为什么要归一化" class="headerlink" title="为什么要归一化"></a>为什么要归一化</h2><p>每一维的特征的来源和度量单位不同，导致特征分布不同。</p><p><strong>未归一化数据的3个坏处</strong></p><ol><li>样本之间的欧式距离度量不准。取值范围大的特征会占主导作用。类似于<a href="https://plmsmile.github.io/2018/03/05/29-desicion-tree/#%E7%86%B5%E5%92%8C%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A">信息增益和信息增益比</a></li><li>降低神经网络的训练效率</li><li>降低梯度下降法的搜索效率</li></ol><p><strong>未归一化对梯度下降的影响</strong></p><ul><li>取值范围不同：大多数位置的梯度方向不是最优的，要多次迭代才能收敛</li><li>取值范围相同：大部分位置的梯度方向近似于最优搜索方向，每一步都指向最小值，训练效率大大提高</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/data_standard.png" style="display:block; margin:auto" width="70%"></p><p><strong>归一化要做的事情</strong></p><ol><li>各个维度特征归一化到同一个取值区间</li><li>消除不同特征的相关性</li></ol><h2 id="标准归一化"><a href="#标准归一化" class="headerlink" title="标准归一化"></a>标准归一化</h2><p>实际上是由<code>中心化</code>和<code>标准化</code>结合的。 把<strong>数据归一化到标准正态分布</strong>。$X \sim N(0, 1^2)$</p><p>计算均值和方差<br>$$<br>\mu = \frac{1}{N} \sum_{i=1}^n x^{(i)} \<br>\sigma^2 =  \frac{1}{N} \sum_{i=1}^n(x^{(i)} - \mu)^2<br>$$<br>归一化数据，减均值除以标准差。如果$\sigma = 0$， 说明特征没有区分性，应该直接删掉。<br>$$<br>\hat x^{(i)} = \frac {x^{(i)} - \mu}{ \sigma }<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/image/nlp/cs224n/notes3/data-process.jpg" style="display:block; margin:auto" width="70%"></p><h2 id="缩放归一化"><a href="#缩放归一化" class="headerlink" title="缩放归一化"></a>缩放归一化</h2><p>把数据归一化到$[0, 1]$ 或者$[-1, 1]$ 直接。<br>$$<br>x^{(i)} = \frac {x^{(i)} - \min(x)}{\max(x) - \min (x)}<br>$$</p><h2 id="白化"><a href="#白化" class="headerlink" title="白化"></a>白化</h2><p><code>白化</code>用来降低输入数据特征之间的冗余性。白化主要使用PCA来去掉特征之间的相关性。<a href="https://plmsmile.github.io/2017/11/26/cs224n-notes3-neural-networks-2/#%E7%99%BD%E5%8C%96">我的白化笔记</a></p><p>处理后的数据</p><ul><li>特征之间相关性较低</li><li>所有特征具有相同的方差</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/image/nlp/cs224n/notes3/data-pca-process.jpg" style="display:block; margin:auto" width="70%"></p><p><strong>白化的缺点</strong></p><p>可能会夸大数据中的噪声。所有维度都拉到了相同的数值范围。可能有一些差异性小、但大多数是噪声的维度。可以使用平滑来解决。</p><h1 id="逐层归一化"><a href="#逐层归一化" class="headerlink" title="逐层归一化"></a>逐层归一化</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>深层神经网络，中间层的输入是上一层的输出。每次SGD参数更新，都会导致<strong>每一层的输入分布发生改变</strong>。</p><p>像高楼，低楼层发生较小偏移，就会导致高楼层发生较大偏移。</p><p>如果<strong>某个层的输入发生改变</strong>，其<strong>参数就需要重新学习</strong>，这也是<code>内部协变量偏移</code>问题。</p><p>在训练过程中，要使得每一层的输入分布保持一致。简单点，对每一个神经层进行归一化。 </p><ul><li>批量归一化</li><li>层归一化</li><li>其它方法</li></ul><h2 id="批量归一化"><a href="#批量归一化" class="headerlink" title="批量归一化"></a>批量归一化</h2><p>针对<strong>每一个维度</strong>，对<strong>每个batch的数据</strong>进行<strong>归一化+缩放平移</strong>。</p><p>批量归一化<code>Batch Normalization</code> ，<a href="https://plmsmile.github.io/2017/11/26/cs224n-notes3-neural-networks-2/#batch-normalization">我的BN详细笔记</a>。 对每一层（<strong>单个神经元</strong>）的输入进行归一化<br>$$<br>\begin{align}<br>&amp; \mu = \frac{1}{m} \sum_{i=1}^m x_i &amp;  \text{求均值} \<br>&amp; \sigma^2 = \frac{1}{m} \sum_{i=1}^m (x_i - \mu)^2 &amp; \text{求方差} \<br>&amp; \hat x = \frac{x - E(x)} {\sqrt{\sigma^2 + \epsilon}} &amp;  \text{标准归一化} \<br>&amp; y =  \gamma \hat x+ \beta &amp; \text{缩放和平移}<br> \end{align}<br>$$<br><code>缩放参数</code>$\gamma$ ，和<code>平移参数</code> $\beta$  的作用</p><ul><li>强行归一化会破坏刚学习到的特征。用这两个变量去还原应该学习到的数据分布</li><li>归一化会聚集在0处，会减弱神经网络的非线性性质。缩放和平移解决这个问题</li></ul><p>注意：</p><ul><li>BN是对中间层的<strong>单个神经元</strong>进行归一化</li><li>要求<strong>批量样本数量不能太小</strong>，否则难以计算单个神经元的统计信息</li><li>如果层的净输入的分布是<strong>动态变化</strong>的，则<strong>无法使用批量归一化</strong>。如循环神经网络</li></ul><h2 id="层归一化"><a href="#层归一化" class="headerlink" title="层归一化"></a>层归一化</h2><p>对每个样本，对所有维度做一个归一化，即对<strong>同层的所有神经元</strong>的输入做归一化。</p><ul><li><code>层归一化</code>是<strong>对一个中间层的所有神经元进行归一化</strong></li><li>批量归一化是对一个中间层的单个神经元进行归一化</li></ul><p>设第$l$层的净输入为$\mathbf z^{(l)}$， 求<strong>第$l$层所有输入</strong>的<code>均值</code>和<code>方差</code><br>$$<br>\begin{align}<br>&amp; \mu^{(l)} = \frac{1}{n^l} \sum_{i=1}^{n^l} z_i^{(l)} &amp;  \text{第l层输入的均值} \<br>&amp; \sigma^{(l)^2} = \frac{1}{n^l} \sum_{i=1}^{n^l} (z_i^{(l)} - \mu^{(l)})^2 &amp; \text{第l层输入的方差} \<br> \end{align}<br>$$<br><code>层归一化</code> 如下，其中$\gamma, \beta$是缩放和平移的参数向量，与$\mathbf z^{(l)}$维数相同<br>$$<br>\hat {\mathbf z}^{(l)} = \rm{LayerNorm}_{\gamma, \beta} (\mathbf z^{(l)})<br>= \frac {\mathbf z^{(l) - \mu^{(l)}}}{\sqrt{\sigma ^{(l)^2} + \epsilon}} \cdot \gamma + \beta<br>$$<br> <strong>层归一化的RNN</strong><br>$$<br>\mathbf z_t = U\mathbf h_{t-1} + W \mathbf x_t \<br>\mathbf h_t = f (\rm{LN}_{\gamma, \beta}(\mathbf z_t)))<br>$$<br>RNN的净输入一般会随着时间慢慢变大或变小，导致梯度爆炸或消失。</p><p>层归一化的RNN可以有效缓解梯度消失和梯度爆炸。</p><h2 id="批归和层归对比"><a href="#批归和层归对比" class="headerlink" title="批归和层归对比"></a>批归和层归对比</h2><p>思想类似，都是<code>标准归一化</code> + <code>缩放和平移</code>。 </p><ul><li>批量归一化：针对每一个维度，对batch的所有数据做归一化</li><li>层归一化：针对每一个样本，对所有维度做归一化。可以用在RNN上，减小梯度消失和梯度爆炸。</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/layer-batch-norm.jpg" style="display:block; margin:auto" width="70%"></p><h2 id="其它归一化"><a href="#其它归一化" class="headerlink" title="其它归一化"></a>其它归一化</h2><p><strong>权重归一化</strong></p><p>对神经网络的连接权重进行归一化。</p><p><strong>局部相应归一化</strong></p><p>对同层的神经元进行归一化。但是局部响应归一化，用在激活函数之后，对邻近的神经元进行局部归一化。</p><h1 id="梯度下降法的改进"><a href="#梯度下降法的改进" class="headerlink" title="梯度下降法的改进"></a>梯度下降法的改进</h1><h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><p><code>Mini-Batch</code>梯度下降法。设$f(\mathbf x ^{(i)}, \theta)$ 是神经网络。</p><p>在第$t$次迭代(epoch)时，选取$m$个训练样本${\mathbf x^{(i)}, y^{(i)} }_{i=1}^m$。 计算梯度$\mathbf g_t$<br>$$<br>\mathbf g_t = \frac{1}{m} \sum_{i \in I_t} \frac {\partial J(y^{(i)}, f(\mathbf x ^{(i)}, \theta))}{\partial \theta} </p><ul><li>\lambda |\theta| ^2<br>$$<br>更新参数，其中学习率$\alpha \ge 0$ ：<br>$$<br>\theta_t = \theta_{t-1} - \alpha \mathbf g_t<br>$$</li></ul><p>$$<br>\theta_t = \theta_{t-1}+ \Delta \theta_t<br>$$</p><p><strong>1. BGD</strong></p><p>Batch Gradient Descent</p><p><code>意义</code>：每一轮选择所有整个数据集去计算梯度更新参数</p><p><code>优点</code></p><ul><li>凸函数，可以保证收敛到全局最优点；非凸函数，保证收敛到局部最优点</li></ul><p><code>缺点</code></p><ul><li>批量梯度下降非常慢。因为在整个数据集上计算</li><li>训练次数多时，耗费内存</li><li>不允许在线更新模型，例如更新实例</li></ul><p><strong>2. SGD</strong></p><p>Stochastic Gradient Descent</p><p><code>意义</code>：每轮值选择一条数据去计算梯度更新参数</p><p><code>优点</code></p><ul><li>算法收敛快（BGD每轮会计算很多相似样本的梯度，冗余的）</li><li>可以在线更新</li><li>有一定几率跳出比较差的局部最优而到达更好的局部最优或者全局最优</li></ul><p><code>缺点</code></p><ul><li>容易收敛到局部最优，并且容易困在鞍点</li></ul><p><strong>3. Mini-BGD</strong></p><p>Mini-Batch Gradient Descent</p><p><code>意义</code>： 每次迭代只计算一个mini-batch的梯度去更新参数</p><p>优点</p><ul><li>计算效率高，收敛较为稳定</li></ul><p><code>缺点</code></p><ul><li>更新方向依赖于当前batch算出的梯度，不稳定</li></ul><p><strong>4. 梯度下降法的难点</strong></p><ol><li>学习率$\alpha$难以选择。太小，导致收敛缓慢；太大，造成较大波动妨碍收敛</li><li>学习率一直相同是不合理的。出现频率低的特征，大学习率；出现频率小的特征，小学习率</li><li>按迭代次数和loss阈值在训练时去调整学习率。然而次数和阈值难以设定，无法适应所有数据</li><li>很难逃离鞍点。梯度为0，一些特征是最高点（上升），一些特征是最低点（下降）</li><li>更新方向依赖于当前batch算出的梯度，不稳定</li></ol><p>主要通过<strong>学习率递减</strong>和<strong>动量法</strong>来优化梯度下降法。</p><p>可以看出</p><ul><li>SGD，整体下降，但局部会来回震荡</li><li>MBGD，一个batch来说，batch越大，下降越快，越平滑</li><li>MBGD，整体来说，batch越小，下降越明显</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/sgd_batch.png" style="display:block; margin:auto" width="70%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/sgd-whole.png" style="display:block; margin:auto" width="71%"></p><h2 id="学习率递减"><a href="#学习率递减" class="headerlink" title="学习率递减"></a>学习率递减</h2><p><strong>0 指数加权平均</strong></p><p>求10天的平均温度，可以直接利用平均数求，每天的权值是一样的，且要保存所有的数值才能计算。<br>$$<br>v_{avg} = \frac {v_1 + \cdots + v_{100}}{100}<br>$$<br>设$v_t$是到第t天的平均温度，$\theta_t$是第t天的真实温度，$\beta=0.9$是衰减系数。 </p><p>则有<code>指数加权平均</code>：<br>$$<br>v_t = \beta * v_{t-1} + (1-\beta) \theta_t<br>$$</p><p>$$<br>v_{100} = 0.1 \cdot \theta_{100} + 0.1(0.9)^1 \cdot \theta_{99} + 0.1 (0.9)^2 \cdot \theta_{98} + 0.1(0.9)^3 \cdot \theta_{97} + \ldots<br>$$</p><p>离当前越近，权值越大。越远，权值越小（指数递减），也有一定权值。</p><p><strong>1. 按迭代次数递减</strong></p><p>设置$\beta = 0.96$为衰减率</p><p><code>反时衰减</code><br>$$<br>\alpha_t = \alpha_0 \cdot \frac {1} {1 + \beta \times t}<br>$$<br> <code>指数衰减</code> :<br>$$<br>\alpha_t = \alpha_0 \cdot \beta^t<br>$$<br> <code>自然指数衰减</code><br>$$<br>\alpha_t = \alpha_0 \cdot e^{-\beta \cdot t}<br>$$<br><strong>2. AdaGrad</strong> </p><p><code>Adaptive Gradient</code> </p><p><code>意义</code>：每次迭代时，根据历史梯度累积量来减小学习率，减小梯度。<strong>梯度平方的累计值</strong>来减小梯度</p><p>初始学习率$\alpha_0$不变，实际学习率减小。$\alpha = \frac {\alpha_0} {\sqrt {G_t + \epsilon}}$<br>$$<br>G_t = \sum_{i=1}^t g_i^2<br>$$</p><p>$$<br>\Delta \theta_t = - \frac {\alpha_0}{\sqrt {G_t + \epsilon}} \cdot g_t<br>$$</p><p><code>优点</code></p><ul><li>累积梯度$G_t$的$\frac{1}{\sqrt{G_t + \epsilon}}$实际上构成了一个约束项   </li><li>前期$G_t$较小，  约束值大，能够放大梯度</li><li>后期$G_t$较大， 约束值小，能够约束梯度</li><li>适合处理稀疏梯度</li></ul><p><code>缺点</code></p><ul><li>经过一些迭代，学习率会变非常小，参数难以更新。过早停止训练</li><li>依赖于人工设置的全局学习率$\alpha_0$</li><li>$\alpha_0$设置过大，约束项大，则对梯度的调节太大 </li></ul><p><strong>3. RMSprop</strong></p><p>意义：计算<strong>梯度$\mathbf g_t$平方</strong>的<code>指数递减移动平均</code>， 即<strong>梯度平方的平均值</strong>来减小梯度<br>$$<br>G_t = \beta G_{t-1} + (1-\beta) \cdot \mathbf g_t^2<br>$$</p><p>$$<br>\Delta \theta_t = - \frac {\alpha_0}{\sqrt {G_t + \epsilon}} \cdot \mathbf g_t<br>$$</p><p><code>优点</code></p><ul><li>解决了AdaGrad学习率一直递减过早停止训练的问题，学习率可大可小</li><li>训练初中期，加速效果不错，很快；训练后期，反复在局部最小值抖动</li><li><strong>适合处理非平稳目标</strong>，对于RNN效果很好</li></ul><p><code>缺点</code></p><ul><li>依然依赖于全局学习率$\alpha_0$</li></ul><p><strong>4. AdaDelta</strong></p><p><code>意义</code> 不初始化学习率。计算<strong>梯度更新差平方</strong>的<code>指数衰减移动平均</code>来作为分子学习率，<br>$$<br>G_t = \beta G_{t-1} + (1-\beta) \cdot \mathbf g_t^2<br>$$</p><p>$$<br>\Delta X_{t-1}^2 = \beta \Delta X_{t-2}^2 + (1-\beta) \Delta \theta_{t-1}^2<br>$$</p><p>$$<br>\Delta \theta_t = - \frac { \sqrt {\Delta X_{t-1}^2 + \epsilon}}{\sqrt {G_t + \epsilon}} \cdot \mathbf g_t<br>$$</p><p><code>优点</code></p><ul><li>初始学习率$\alpha_0$改成了动态计算的$\sqrt {\Delta X_{t-1}^2 + \epsilon}$ ，一定程度上平抑了学习率的波动。 </li></ul><h2 id="动量法"><a href="#动量法" class="headerlink" title="动量法"></a>动量法</h2><p>结合<strong>前面更新的方向</strong>和<strong>当前batch的方向</strong>，来更新参数。</p><p>解决了MBGD的不稳定性，增加了<code>稳定性</code>。可以<code>加速</code>或者<code>减速</code>。</p><p><strong>1. 普通动量法</strong></p><p>设$\rho = 0.9$为动量因子，计算<strong>负梯度</strong>的<code>移动加权平均</code><br>$$<br>\Delta \theta_t = \rho \cdot \Delta \theta_{t-1} - \alpha \cdot \mathbf g_t<br>$$</p><p>当前梯度与最近时刻的梯度方向：</p><ul><li>前后<strong>梯度方向一致</strong>：参数更新幅度变大，<strong>会加速</strong></li><li>前后<strong>梯度方向不一致</strong>：参数更新幅度变小，<strong>会减速</strong></li></ul><p>优点：</p><ul><li>迭代初期，梯度方向一致，动量法加速，更快到达最优点</li><li>迭代后期，梯度方向不一致，在收敛值附近震荡，动量法会减速，增加稳定性</li></ul><p>当前梯度叠加上上次的梯度，可以近似地看成二阶梯度。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/momentumjpg.jpg" style="display:block; margin:auto" width="70%"></p><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><p><code>Adaptive Momentum Estimation</code> = <code>RMSProp</code> + <code>Momentum</code>， 即<strong>自适应学习率+稳定性</strong>（动量法）。</p><p>意义：计算梯度$\mathbf g_t$的指数权值递减移动平均(<code>动量</code>)，计算梯度平方$\mathbf g_t^2$的指数权值递减移动平均(<code>自适应alpha</code>)  </p><p>设$\beta_1 = 0.9$， $\beta_2 = 0.99$ 为衰减率<br>$$<br>M_t = \beta_1M_{t-1} + (1-\beta_1) \mathbf g_t \quad \quad \sim E(\mathbf g_t)<br>$$</p><p>$$<br>G_t = \beta_2 G_{t-1} + (1-\beta_2) \mathbf g_t^2 \quad \quad \sim E(\mathbf g_t^2)<br>$$</p><p>$$<br>\hat M_t = \frac {M_t}{1 - \beta_1^t}, \quad \hat G_t = \frac{G_t}{1 - \beta_2^t} \quad \quad \text{初始化偏差修正}<br>$$</p><p>$$<br>\Delta \theta_t = - \frac {\alpha_0}{\sqrt{\hat G_t + \epsilon}} \hat M_t<br>$$</p><p><code>优点</code></p><ul><li>有RMSprop的处理<strong>非稳态</strong>目标的优点，有Adagrad处理<strong>稀疏梯度</strong>的优点</li><li>对内存需求比较小，高效地计算</li><li>为不同的参数计算不同的自适应学习率</li><li>适用于大多数的非凸优化</li><li>超参数好解释，只需极少量的调参</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/optimizers.png" style="display:block; margin:auto" width="80%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/optimizer-1.gif" style="display:block; margin:auto" width="70%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/dl/optimizer-2.gif" style="display:block; margin:auto" width="70%"></p><h2 id="梯度截断"><a href="#梯度截断" class="headerlink" title="梯度截断"></a>梯度截断</h2><p>一般按模截断，如果$|\mathbf g_t|^2 &gt; b$， 则<br>$$<br>\mathbf g_t = \frac{b}{|\mathbf g_t|} \mathbf g_t<br>$$</p><h1 id="超参数优化"><a href="#超参数优化" class="headerlink" title="超参数优化"></a>超参数优化</h1><h2 id="优化内容和难点"><a href="#优化内容和难点" class="headerlink" title="优化内容和难点"></a>优化内容和难点</h2><p><strong>优化内容</strong></p><ul><li>网络结构：神经元之间连接关系、层数、每层的神经元数量、激活函数类型等</li><li>优化参数：优化方法、学习率、小批量样本数量</li><li>正则化系数</li></ul><p><strong>优化难点</strong> </p><ul><li>参数优化是组合优化问题，没有梯度下降法来优化，没有通用的有效的方法</li><li>评估一组超参数配置的实际代价非常高</li></ul><p><strong>配置说明</strong></p><ul><li>有$K$个超参数， 每个超参数配置表示为1个向量$\mathbf x \in X$</li><li>$f(\mathbf x)$ 是衡量超参数配置$\mathbf x$效果的函数</li><li>$f(\mathbf x)$不是$\mathbf x$的连续函数，$\mathbf x$也不同。 无法使用梯度下降等优化方法 </li></ul><h2 id="超参数设置-搜索"><a href="#超参数设置-搜索" class="headerlink" title="超参数设置-搜索"></a>超参数设置-搜索</h2><p>超参数设置：人工搜索、网格搜索、随机搜索。</p><p>缺点：没有利用到不同超参数组合之间的相关性，搜索方式都比较低效。</p><p><strong>1. 网格搜索</strong></p><p>对于$K$个超参数，第$k$个参数有$m_k$种取值。总共的配置数量：<br>$$<br>N = m_1 \times m_2 \times \cdots \times m_K<br>$$<br>如果超参数是连续的，可以根据经验选择一些经验值，比如学习率<br>$$<br>\alpha \in {0.01, 0.1, 0.5, 1.0}<br>$$<br>对这些超参数的不同组合，分别训练一个模型，测试在开发集上的性能。选取一组性能最好的配置。</p><p><strong>2. 随机搜索</strong></p><p>有的超参数对模型影响力有限（正则化），有的超参数对模型性能影响比较大。网格搜索会遍历所有的可能性。</p><p>随机搜索：对超参数进行随机组合，选择一个性能最好的配置。</p><p>优点：比网格搜索好，更容易实现，更有效。</p><h2 id="贝叶斯优化"><a href="#贝叶斯优化" class="headerlink" title="贝叶斯优化"></a>贝叶斯优化</h2><p>根据当前已经试验的超参数组合，来预测下一个可能带来的最大收益的组合。</p><p>贝叶斯优化过程：根据已有的N组试验结果来建立高斯过程，计算$f(\mathbf x)$的后验分布。 </p><h2 id="动态资源分配"><a href="#动态资源分配" class="headerlink" title="动态资源分配"></a>动态资源分配</h2><p>在早期阶段，估计出一组配置的效果会比较差，则中止这组配置的评估。把更多的资源留给其他配置。</p><p>这是多臂赌博机的泛化问题：最优赌博机。在给定有限次数的情况下，玩赌博机，找到收益最大的臂。</p><h2 id="神经架构搜索"><a href="#神经架构搜索" class="headerlink" title="神经架构搜索"></a>神经架构搜索</h2><p>通过神经网络来自动实现网络架构的设计。</p><ul><li>变长字符串 – 描述神经网络的架构</li><li>控制器 – 生成另一个子网络的架构描述</li><li>控制器 – RNN来实现</li><li>控制器训练 – 强化学习来完成</li><li>奖励信号 – 生成的子网络在开发集上的准确率</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参数初始化、数据预处理、逐层归一化、各种优化方法、超参数优化。
    
    </summary>
    
      <category term="深度学习" scheme="http://plmsmile.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="神经网络" scheme="http://plmsmile.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="数据预处理" scheme="http://plmsmile.github.io/tags/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
      <category term="归一化" scheme="http://plmsmile.github.io/tags/%E5%BD%92%E4%B8%80%E5%8C%96/"/>
    
      <category term="优化方法" scheme="http://plmsmile.github.io/tags/%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    
      <category term="Adam" scheme="http://plmsmile.github.io/tags/Adam/"/>
    
      <category term="动量法" scheme="http://plmsmile.github.io/tags/%E5%8A%A8%E9%87%8F%E6%B3%95/"/>
    
      <category term="学习率" scheme="http://plmsmile.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>各种注意力总结</title>
    <link href="http://plmsmile.github.io/2018/03/25/33-attention-summary/"/>
    <id>http://plmsmile.github.io/2018/03/25/33-attention-summary/</id>
    <published>2018-03-25T06:14:12.000Z</published>
    <updated>2018-11-25T08:30:08.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一切都应该尽可能简单，但不能过于简单。</p></blockquote><blockquote><p>本文主要是总结：注意力机制、注意力机制的变体、论文中常见的注意力</p></blockquote><p><img src="" style="display:block; margin:auto" width="80%"></p><h1 id="注意力机制系统介绍"><a href="#注意力机制系统介绍" class="headerlink" title="注意力机制系统介绍"></a>注意力机制系统介绍</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p><strong>计算能力不足</strong></p><p>神经网络有很强的能力。但是对于复杂任务，需要大量的输入信息和复杂的计算流程。计算机的计算能力是神经网络的一个瓶颈。</p><p><strong>减少计算复杂度</strong></p><p>常见的：局部连接、权值共享、汇聚操作。</p><p>但仍然需要：尽量<code>少增加模型复杂度</code>（参数），来<code>提高模型的表达能力</code>。</p><p><strong>简单文本分类可以使用单向量表达文本</strong></p><p>只需要一些关键信息即可，所以一个向量足以表达一篇文章，可以用来分类。</p><p><strong>阅读理解需要所有的语义</strong></p><p>文章比较长时，<strong>一个RNN很难反应出文章的所有语义信息</strong>。</p><p>对于阅读理解任务来说，编码时并不知道会遇到什么问题。这些问题可能会涉及到文章的所有信息点，如果丢失任意一个信息就可能导致无法正确回答问题。</p><p><strong>网络容量与参数成正比</strong></p><p>神经网络中可以存储的信息称为<code>网络容量</code>。 存储的多，参数也就越多，网络也就越复杂。 LSTM就是一个存储和计算单元。</p><p><strong>注意力和记忆力解决信息过载问题</strong></p><p>输入的信息太多(<code>信息过载问题</code>)，但不能同时处理这些信息。只能选择重要的信息进行计算，同时用额外空间进行信息存储。</p><ul><li><code>信息选择</code>：聚焦式自上而下地选择重要信息，过滤掉无关的信息。<strong>注意力机制</strong></li><li><code>外部记忆</code> ： 优化神经网络的记忆结构，使用额外的外部记忆，来提高网络的存储信息的容量。 <strong>记忆力机制 </strong> </li></ul><p>比如，一篇文章，一个问题。答案只与几个句子相关。所以只需把相关的片段挑选出来交给后续的神经网络来处理，而不需要把所有的文章内容都给到神经网络。</p><h2 id="注意力"><a href="#注意力" class="headerlink" title="注意力"></a>注意力</h2><p>注意力机制<code>Attention Mechanism</code> 是<code>解决信息过载</code>的一种资源分配方案，把<strong>计算资源分配给更重要的任务</strong>。</p><blockquote><p>注意力：人脑可以有意或无意地从大量的输入信息中，选择小部分有用信息来重点处理，并忽略其它信息</p></blockquote><p><strong>聚焦式注意力</strong></p><p>自上而下<code>有意识</code>的注意力。有预定目的、依赖任务、<code>主动有意识</code>的<code>聚焦于某一对象</code>的<code>注意力</code>。</p><p>一般注意力值聚焦式注意力。聚焦式注意力会根据环境、情景或任务的不同而选择不同的信息。</p><p><strong>显著性注意力</strong></p><p>自下而上<code>无意识</code>的注意力。由外界刺激驱动的注意力，无需主动干预，也和任务无关。如<code>Max Pooling</code>和<code>Gating</code>。  </p><p><strong>鸡尾酒效应</strong></p><p>鸡尾酒效应可以理解这两种注意力。 在吵闹的酒会上</p><ul><li>噪音很多，依然可以听到朋友谈话的内容</li><li>没有关注背景声音，但是突然有人叫自己（重要信息），依然会马上注意到</li></ul><h2 id="普通注意力机制"><a href="#普通注意力机制" class="headerlink" title="普通注意力机制"></a>普通注意力机制</h2><p>把目前的最大汇聚<code>Max Pooling</code>和门控<code>Gating</code> 近似地看做自下而上的基于显著性的注意力机制。  </p><p>为了节省资源，选择重要的信息给到后续的神经网络进行计算，而不需要把所有的内容都给到后面的神经网络。</p><p><strong>输入N个信息</strong></p><p>$X_{1:N} = [\mathbf{x}_1, \cdots, \mathbf{x}_N]$， 问题$\mathbf{q}$。 要从$X$中选择一些和任务相关的信息输入给神经网络。</p><p><strong>计算注意力分布</strong></p><p>$\alpha_i$ : 选择第$i$个信息的概率，也称为<code>注意力分布</code> ，$z$表示被选择信息的索引位置<br>$$<br>\alpha_i = p(z = i \mid X, \mathbf{q}) =<br>\rm{softmax}\left(s(\mathbf{x}_i, \mathbf{q})\right)<br>= \frac{\exp\left(s(\mathbf{x}<em>i, \mathbf{q})\right)}{\sum</em>{j=1}^N \exp\left(s(\mathbf{x}_j, \mathbf{q})\right)}<br>$$</p><p><a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/#global-attention">NMT里面三种score打分函数</a> :<br>$$<br>\color{blue}{\rm{score}(h_t, \bar h_s)} =<br>\begin{cases}<br>h_t^T \bar h_s &amp; \text{dot} \<br>h_t^T W_a \bar h_s  &amp; \text{general} \<br>v_a^T \tanh (W_a [h_t; \bar h_s]) &amp; \text{concat} \<br>\end{cases}<br>$$<br><code>加性模型</code><br>$$<br>s(\mathbf{x}_i, \mathbf{q}) = v^T\rm{tanh} (W\mathbf{x}_i + U\mathbf{q})<br>$$<br><code>点击模型</code><br>$$<br>s(\mathbf{x}_i, \mathbf{q}) = \mathbf{x}_i^T \mathbf{q}<br>$$<br><strong>计算注意力</strong></p><p><code>Soft Attention</code> 是对所有的信息进行加权求和。<code>Hard Attention</code>是选择最大信息的那一个。  </p><p>使用软性注意力选择机制，对输入信息编码为，实际上也是一个期望。<br>$$<br>\rm{attn} (X, \mathbf q) = \sum_{i=1}^N \alpha_i \mathbf x_i = E_{z\sim p(z\mid X, \mathbf{q})} [X]<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/attention.png" style="display:block; margin:auto" width="80%"></p><h2 id="应用与优点"><a href="#应用与优点" class="headerlink" title="应用与优点"></a>应用与优点</h2><p>传统机器翻译Encoder-Decoder的缺点：</p><ul><li>编码向量容量瓶颈问题：所有信息都需要保存在编码向量中</li><li>长距离依赖问题：长距离信息传递时，信息会丢失</li></ul><p><a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/">注意力机制和PyTorch实现机器翻译</a></p><p>注意力机制直接从源语言信息中选择相关的信息作为辅助，有下面几个好处：</p><ul><li>解码过程中每一步都直接访问源语言所有位置上的信息。无需让所有信息都通过编码向量进行传递。</li><li>缩短了信息的传递距离。源语言的信息可以直接传递到解码过程中的每一步</li></ul><p>图像描述生成</p><h1 id="注意力机制变体"><a href="#注意力机制变体" class="headerlink" title="注意力机制变体"></a>注意力机制变体</h1><h2 id="多头注意力"><a href="#多头注意力" class="headerlink" title="多头注意力"></a>多头注意力</h2><p><code>Multi-head Attention</code>利用多个查询$\mathbf{q}_{1:M}={\mathbf{q}_1, \cdots, \mathbf{q}_M}$来并行地从输入信息中选取多个信息。每个注意力关注输入信息的不同部分。比如<a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">Attention Is All You Need</a>。     </p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/transformer.png" style="display:block; margin:auto" width="60%"><br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/multi-head-attention.png" style="display:block; margin:auto" width="80%"></p><h2 id="硬性注意力"><a href="#硬性注意力" class="headerlink" title="硬性注意力"></a>硬性注意力</h2><p>硬性注意力是<code>只关注到一个位置上</code>。</p><ul><li>选取最高概率的输入信息</li><li>在注意力分布上随机采样</li></ul><p>缺点：loss与注意力分布之间的函数关系不可导，无法使用反向传播训练。一般使用软性注意力。</p><p>需要：硬性注意力需要强化学习来进行训练。</p><h2 id="键值对注意力"><a href="#键值对注意力" class="headerlink" title="键值对注意力"></a>键值对注意力</h2><p>输入信息：键值对<code>(Key, Value)</code>。 Key用来计算注意力分布$\alpha_i$，值用来生成选择的信息。<br>$$<br>\rm{attn} (\mathbf{(K, V)}, \mathbf q) = \sum_{i=1}^N \alpha_i \mathbf v_i<br>=  \sum_{i=1}^N\frac{\exp\left(s(\mathbf{k}<em>i, \mathbf{q})\right)}{\sum</em>{j=1}^N \exp\left(s(\mathbf{k}_j, \mathbf{q})\right)} \mathbf v_i<br>$$<br><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/attention.png" style="display:block; margin:auto" width="80%"></p><h2 id="结构化注意力"><a href="#结构化注意力" class="headerlink" title="结构化注意力"></a>结构化注意力</h2><p>普通注意力是在输入信息上的一个多项分布，是一个扁平结构。</p><p>如果输入信息，本身就有<strong>层次化</strong>的结构，词、句子、段落、篇章等不同粒度的层次。这时用<code>层次化的注意力</code>来进行更好的信息选择。</p><p>也可以使用一种图模型，来构建更加复杂的结构化注意力分布。</p><h2 id="指针网络"><a href="#指针网络" class="headerlink" title="指针网络"></a>指针网络</h2><p>前面的都是计算注意力对信息进行筛选：计算注意力分布，利用分布对信息进行加权平均。</p><p>指针网络<code>pointer network</code>是一种序列到序列的模型，用来指出相关信息的位置。也就是只做第一步。</p><p>输入： $X_{1:n} = [\mathbf{x}_1, \cdots, \mathbf{x}_n]$ </p><p>输出：$c_{1:m} = c_1, c_2, \cdots, c_m, \; c_i \in [1,n]$， 输出是序列的下标。如输入123，输出312</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/pointer-net.png" style="display:block; margin:auto" width="80%"></p><p>条件概率<br>$$<br>p(c_{1:m} \mid  \mathbf x_{1:n}) =<br>\prod_{i=1}^m p(c_i \mid c_{1:i-1}, \mathbf x_{1:n})<br>\approx \prod_{i=1}^m p(c_i \mid \mathbf x_{c_1}, \cdots,  \mathbf x_{c_{i-1}}\mathbf x_{1:n})<br>$$</p><p>$$<br>p(c_i \mid c_{1:i-1}, \mathbf x_{1:n}) = \rm{softmax}(s_{i,j})<br>$$</p><p>第i步时，每个输入向量的得分（未归一化的注意力分布）：<br>$$<br>s_{i,j} = v^T\rm{tanh} (W\mathbf{x}_j + U\mathbf{e}_i)<br>$$<br>其中向量$\mathbf e_i$是第i个时刻，RNN对$\mathbf x_{c_1}, \cdots,  \mathbf x_{c_{i-1}}\mathbf x_{1:n}$ 的编码。</p><h1 id="各种注意力计算模型"><a href="#各种注意力计算模型" class="headerlink" title="各种注意力计算模型"></a>各种注意力计算模型</h1><h2 id="注意力的本质"><a href="#注意力的本质" class="headerlink" title="注意力的本质"></a>注意力的本质</h2><p>有$k$个$d$维的特征向量$\mathbf h_i \;(i \in [1,k])$，想要整合这k个特征向量的信息。得到一个向量$\mathbf h^*$，一般也是d维。</p><ul><li>简单粗暴：对k个向量求平均。当然不合理啦。</li><li>加权平均：$\mathbf h^* = \sum_{i=1}^k \alpha_i \mathbf h_i$ 。<code>合理</code> </li></ul><p>所以最重要的就是<strong>合理地求出$\alpha_i$</strong>，根据<code>所关心的对象</code>$\mathbf q$(可能是自身)去计算注意力分布   </p><ul><li>针对每个$\mathbf h_i$， 计算出一个<strong>得分</strong>，$s_i$。 $h_i$与$q$越相关，得分越高。 </li><li>$\alpha_i = \rm{softmax}(s_i)$</li></ul><p>$$<br>s_i = \rm{score}(\mathbf h_i, \mathbf q)<br>$$</p><p>打分函数的计算：(<a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/#global-attention">NMT里面三种score打分函数</a> ) </p><ul><li><code>Local-based Attention</code> ，没有外部的关注对象，自己关注自己。</li><li><code>General Attention</code>， 有外部的关注对象，直接乘积，全连接层。</li><li><code>Concatenation-based Attention</code>， 有关注的对象，先concat或相加再过连接层。</li></ul><h2 id="Local-based"><a href="#Local-based" class="headerlink" title="Local-based"></a>Local-based</h2><p>没有外部的信息，每个向量的得分<strong>与自己相关，与外部无关</strong>。</p><p>比如：<code>Where is the football?</code> ，<code>where</code>和<code>football</code>在句子中起总结性作用。Attention只与句子中的每个词有关。</p><p>一个句子，有多个词，多个向量。通过自己计算注意力分布，再对这些词的注意力进行加权求和，则可以得到这个句子的最终表达。<br>$$<br>s_i  = f(\mathbf h_i) = \rm{a}(W^T \mathbf h_i + b)<br>$$</p><p>$$<br>\mathbf h^* = \sum_{i=1}^n s_i \cdot \mathbf h_i<br>$$</p><p>a是<a href="https://plmsmile.github.io/2017/11/23/cs224n-notes3-neural-networks/#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0">激活函数</a>。 <code>sigmoid</code>, <code>tanh</code>, <code>relu</code>, <code>maxout</code>， <code>y=x</code>（无激活函数）。  </p><p><strong>1 一个得分简单求法</strong> </p><p><a href="https://openreview.net/pdf?id=SkyQWDcex" target="_blank" rel="noopener">A Context-Aware Attention Network For Interactive Question Answering</a></p><p>利用自己计算注意力分布<br>$$<br>\gamma_j = \rm{softmax} (\mathbf v^T \mathbf g_j^q)<br>$$<br>利用新的注意力分布去计算最终的attention向量<br>$$<br>\mathbf u = W_{ch} \sum_{j=1}^N \gamma_j \mathbf g_j^q + \mathbf b_c ^q<br>$$<br><strong>2 两个得分合并为一个得分</strong></p><p><a href="http://wnzhang.net/papers/dadm-kdd.pdf" target="_blank" rel="noopener">Dynamic Attention Deep Model for Article Recommendation by Learning Human Editors’ Demonstration </a></p><p>计算两个得分<br>$$<br>\lambda _{m_t}^M = w_{m_t}^M \cdot \mathbf o + b_{m_t}^M , \quad<br>\lambda_t ^T = w_t^T \cdot \mathbf o + b_t^T<br>$$<br>权值合并，求注意力分布：<br>$$<br>p_t = \rm{softmax} (\alpha \lambda _{m_t}^M + (1-\alpha) \lambda_t ^T)<br>$$<br><strong>3 论文图片</strong></p><p>CAN for QA</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/CAN-1.png" style="display:block; margin:auto" width="80%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/CAN.png" style="display:block; margin:auto" width="80%"></p><p>Dynamic Attention </p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dynamic-attention-1.png" style="display:block; margin:auto" width="80%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dynamic-attention-2.png" style="display:block; margin:auto" width="80%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dynamic-attention-3.png" style="display:block; margin:auto" width="80%"></p><h2 id="General-Attention"><a href="#General-Attention" class="headerlink" title="General Attention"></a>General Attention</h2><p>有外部的信息，$\mathbf h_i$ 与 $\mathbf q$进行乘积得分。 <a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/#global-attention">机器翻译的应用</a><br>$$<br>\rm{score}(\mathbf h_i, \mathbf q) = \mathbf h_i^T W\mathbf q<br>$$</p><h2 id="Concatenation-based"><a href="#Concatenation-based" class="headerlink" title="Concatenation-based"></a>Concatenation-based</h2><p>要关注的外部对象是$\mathbf h_t$， 可以随时间变化，也可以一直不变(question)。<br>$$<br>s_i = f(\mathbf h_i, \mathbf h_t) = \mathbf v^T \rm a(W_1 \mathbf h_i + W_2 \mathbf h_t + b)<br>$$<br><strong>1 多个元素组成Attention</strong> </p><p><a href="https://www.comp.nus.edu.sg/~xiangnan/papers/sigir17-AttentiveCF.pdf" target="_blank" rel="noopener">Attentive Collaborative Filtering Multimedia Recommendation with Item- and Component-Level Attention_sigir17</a></p><p>Item-Level Attention。可以看到需要加什么Attention，直接向公式里面一加就可以了。<br>$$<br>a(i, l) = w_1^T \phi(W_{1u} \mathbf u_i + W_{1v} \mathbf v_l + W_{1p} \mathbf p_l + W_{1x} \mathbf {\bar x}_l + \mathbf b_1) + \mathbf c_1<br>$$</p><p>$$<br>\alpha(i, l) = \frac<br>{\exp (a(i, l))}<br>{\sum_{n \in R(i)} \exp (a(i, n))}<br>$$</p><h2 id="多层Attention"><a href="#多层Attention" class="headerlink" title="多层Attention"></a>多层Attention</h2><p>有$m$个句子，每个句子有$k$个词语。</p><p><code>Word-level Attention</code></p><p>每个句子，有k个词语，每个词语一个词向量，使用<code>Local-based Attention</code> ， 可以得到这个句子的向量表达$\mathbf s_i$。</p><p><code>Sentence-level Attention</code></p><p>有$m$个句子，每个句子是一个句子向量$\mathbf s_i$。 可以再次Attention，得到文档的向量表达$\mathbf d$， 也可以得到每个句子的权值$\alpha_i$。</p><p>得到这些信息之后，再具体问题具体分析。</p><p><strong>1. 文章摘要生成</strong></p><p><a href="https://staff.fnwi.uva.nl/m.derijke/wp-content/papercite-data/pdf/ren-leveraging-2017.pdf" target="_blank" rel="noopener">Leveraging Contextual Sentence Relations for Extractive Summarization Using a Neural Attention Model_SIGIR2017</a> </p><p>输入一篇文档，输出它的摘要。</p><ul><li>第一层：<code>Local-based Attention</code>， 生成每个句子的vector</li><li>第二层：当前句子作为中心，2n+1个句子。输入RNN（不明白）。将中心句子作为attention，来编码上下文。通过上下文对中心句子进行打分。作为该句子对整个文本的重要性</li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/ap-bi-cnn-sentence-modeling.png" style="display:block; margin:auto" width="100%"></p><h2 id="CAN的实时问答"><a href="#CAN的实时问答" class="headerlink" title="CAN的实时问答"></a>CAN的实时问答</h2><p><a href="https://openreview.net/pdf?id=SkyQWDcex" target="_blank" rel="noopener">A Context-Aware Attention Network For Interactive Question Answering</a></p><p>第一层Attention</p><p>对句子过GRU，每一时刻的output作为词的编码。再使用Local-Attention对这些词，得到<strong>问句的表达</strong>$\mathbf u$。 </p><p>第二层Attention</p><p>由于上下文有多个句子。</p><p>首先，对一个句子进行过GRU，得到每一时刻单词的语义信息$\alpha^t$， 然后利用Concat-Attention对这些单词计算，得到这句话的语义信息$\mathbf y_t$。</p><p>再把当前句子的语义信息给到句子的GRU</p><p>第三次Attention</p><p>经过GRU，得到<strong>每个句子的表达</strong>$\mathbf s_t$。 再使用Concat-Attention来得到<strong>每个句子的注意力分配</strong>$\mathbf \beta_t$, 然后加权求和得到 <strong>整个Context的表达</strong>$\mathbf m$。</p><p>输出</p><p>结合$\mathbf {m, u}$通过GRU去生成答案 </p><ul><li><code>Period Symbol</code> ：是正确答案，直接输出</li><li><code>Question Mask</code>： 输出是一个问题，要继续问用户相应的信息</li></ul><p>用户重新给了反馈之后，对所有词汇信息使用<code>simple attention mechanism</code>， 即平均加权，所有的贡献都是一样的。得到反馈的向量表达$\mathbf f$。</p><p>使用新的反馈向量和原始的问句向量，结合，重新生成新的context的语义表达$\mathbf m$。 最终得到新的$\mathbf {m, u}$ 去重新回答。<br>$$<br>\mathbf r = \tanh (W_{rf}f + \mathbf b_r^{(f)})<br>$$</p><p>$$<br>\beta_t = \rm{softmax}(\mathbf u^T \mathbf s_t + \mathbf r^T \mathbf s_t)<br>$$</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/CAN.png" style="display:block; margin:auto" width="100%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/ntm.png" style="display:block; margin:auto" width="80%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一切都应该尽可能简单，但不能过于简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要是总结：注意力机制、注意力机制的变体、论文中常见的注意力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;&quot; styl
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Attention" scheme="http://plmsmile.github.io/tags/Attention/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Coattention Network (Plus)</title>
    <link href="http://plmsmile.github.io/2018/03/15/32-dynamic-coattention-network/"/>
    <id>http://plmsmile.github.io/2018/03/15/32-dynamic-coattention-network/</id>
    <published>2018-03-15T00:33:16.000Z</published>
    <updated>2018-11-25T08:30:08.535Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://arxiv.org/abs/1611.01604" target="_blank" rel="noopener">Dynamic Coattention Networks For Question Answering</a></p><p><a href="https://arxiv.org/pdf/1711.00106" target="_blank" rel="noopener">DCN+: Mixed Objective and Deep Residual Coattention for Question Answering</a></p><blockquote><p>先放四张图，分别是DCN的Encoder、Decoder，DCN+的Encoder和Objective。后面再详细总结</p></blockquote><p><img src="" style="display:block; margin:auto" width="80%"></p><h1 id="DCN"><a href="#DCN" class="headerlink" title="DCN"></a>DCN</h1><h2 id="Coattention-Encoder"><a href="#Coattention-Encoder" class="headerlink" title="Coattention Encoder"></a>Coattention Encoder</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dcn.png" style="display:block; margin:auto" width="100%"></p><h2 id="Dynamic-Pointing-Decoder"><a href="#Dynamic-Pointing-Decoder" class="headerlink" title="Dynamic Pointing Decoder"></a>Dynamic Pointing Decoder</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dcn-decoder.png" style="display:block; margin:auto" width="100%"></p><h2 id="HMN"><a href="#HMN" class="headerlink" title="HMN"></a>HMN</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/hmn.png" style="display:block; margin:auto" width="60%"></p><h1 id="DCN-1"><a href="#DCN-1" class="headerlink" title="DCN+"></a>DCN+</h1><h2 id="DCN的问题"><a href="#DCN的问题" class="headerlink" title="DCN的问题"></a>DCN的问题</h2><p><strong>loss没有判断真正的意义</strong></p><p>DCN使用传统交叉熵去优化<code>optimization</code>，只考虑答案字符串的匹配程度。但是实际上人的评判<code>evaluation</code>却是看回答的意义。如果只考虑span，则有下面两个问题：</p><ul><li>精确答案：没影响</li><li>但是对正确答案周围重叠的单词，却可能认为是错误的。</li></ul><p>句子：<code>Some believe that the Golden State Warriors team of 2017 is one of the greatest teams in NBA history</code> </p><p>问题：<code>which team is considered to be one of the greatest teams in NBA history</code></p><p>正确答案：<code>the Golden State Warriors team of 2017</code></p><p>其实<code>Warriors</code>也是正确答案， 但是传统交叉熵却认为它还不如<code>history</code>。 </p><p>DCN没有建立起<code>Optimization</code>和 <code>evaluation</code>的联系。 这也是Word Overlap。</p><p><strong>单层coattention表达力不强</strong></p><h2 id="DCN-的优化点"><a href="#DCN-的优化点" class="headerlink" title="DCN+的优化点"></a>DCN+的优化点</h2><p><strong>Mixed  Loss</strong></p><p>交叉熵+自我批评学习（强化学习）。Word真正<strong>意义相似</strong>才会给一个好的<code>reward</code>。 </p><ul><li>强化学习会鼓励意义相近的词语，而dis不相近的词语</li><li>交叉熵让强化学习朝着正确的轨迹发展</li></ul><p><strong>Deep Residual Coattention Encoder</strong></p><p>多层表达能力更强，详细看下面的优点。</p><h2 id="Deep-Residual-Encoder"><a href="#Deep-Residual-Encoder" class="headerlink" title="Deep Residual  Encoder"></a>Deep Residual  Encoder</h2><p><strong>优点</strong> </p><p>两个别人得出的重要结论：</p><ul><li><code>stacked self-attention</code> 可以加速信号传递</li><li>减少信号传递路径，可以增加长依赖</li></ul><p>比DCN的两个优化点：</p><ul><li><code>coattention with self-attention</code>和多层<code>coattention</code>  。可以对输入有<code>richer representations</code></li><li>对每层的<code>coattention outputs</code>进行残差连接。缩短了信息传递路径。</li></ul><h2 id="Coattention深层理解"><a href="#Coattention深层理解" class="headerlink" title="Coattention深层理解"></a>Coattention深层理解</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/deep-residual-coattention-encoder.png" style="display:block; margin:auto" width="90%"></p><blockquote><p>当时理解了很久都不懂，后来一个下午，一直看，结合机器翻译实现和实际例子矩阵计算，终于理解了Attention、Coattention。</p></blockquote><p>参考了我的下面三篇笔记。</p><ul><li><a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/#pytorch%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91">注意力机制在机器翻译中的思想和代码实现总结</a></li><li><a href="https://plmsmile.github.io/2017/10/10/attention-model/">图文介绍Attention</a></li><li><a href="https://plmsmile.github.io/2018/03/14/31-co-attention-vqa/#co-attention">Coattention的两种形式</a></li></ul><p><strong>单个Coattention层计算</strong> </p><p>经过双向RNN后，得到两个语义编码：文档$E_0^D \in \mathbb R^{m\times e}$， 问题编码$E^Q_0 \in \mathbb R ^{n \times h}$ 。<br>$$<br>E_1^D = \rm{biGRU_1}(E_0^D) \quad\in \mathbb R^{m \times h}<br>$$</p><p>$$<br>E_1^Q = \tanh(\rm{W \; \rm{biGRU_1(Q_E)+b)}} \quad \in \mathbb R^{n \times h}<br>$$</p><p>计算<code>关联得分矩阵</code>A<br>$$<br>A = E_1^D (E_1^Q)^T \in \mathbb R^{m \times n}<br>$$</p><p>$$<br>\begin{bmatrix}<br>0 &amp; 0 \<br>2 &amp; 3 \<br>0 &amp; 2 \<br>1 &amp; 1 \<br>3 &amp; 3 \<br>\end{bmatrix}<em>{5 \times 2}<br>\cdot<br>\begin{bmatrix}<br>1&amp; 3 \<br>1 &amp; 1 \<br>1&amp; 3 \<br>\end{bmatrix}</em>{3 \times 2}^T<br>=<br>\begin{bmatrix}<br>0&amp; 0 &amp;0 \<br>11&amp; 5 &amp;11 \<br>6&amp; 2 &amp;6 \<br>4&amp; 2 &amp;4 \<br>12&amp; 6 &amp;12 \<br>\end{bmatrix}_{5\times 3}<br>$$</p><p>做<code>行Softmax</code>，得到Q对D的权值分配概率$A^Q$， <code>attention_weights</code></p><ul><li>每一行是一个文档单词w</li><li>元素值是所有问句单词对当前文档单词w的注意力分配权值</li><li>元素值是每个问句单词的权值概率</li></ul><p>$$<br>\begin{bmatrix}<br>0.3333 &amp; 0.3333 &amp; 0.3333 \<br>0.4994  &amp;0.0012 &amp; 0.4994 \<br>0.4955  &amp;0.0091  &amp;0.4955 \<br>0.4683  &amp;0.0634  &amp;0.4683\<br>0.4994  &amp;0.0012  &amp;0.4994 \<br>\end{bmatrix}_{5\times 3}<br>$$</p><p>计算D的summary， $S^D = A^Q \cdot Q$<br>$$<br>S^D = A^Q \cdot Q<br>$$</p><ul><li>D所需要的新的语义，参考机器翻译的<a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/#%E8%AE%A1%E7%AE%97%E6%96%B0%E7%9A%84%E8%AF%AD%E4%B9%89">新语义理解</a> </li><li>$A^Q$的每一行去乘以Q的每一列去表达单词w </li><li>用Q去表达D，每个$D_w$都是<strong>Q的所有单词对w的线性表达</strong>，权值就是$A^Q$  </li><li><p>所以$S^D$也是D的<code>summary</code>， 也称作D需要<code>context</code></p><p>同理，对<code>列做softmax</code>， 得到D对Q的权值分配概率$A^D$， 得到Q的<code>summary</code>， $S^Q = A^D \cdot D$</p></li></ul><p>这时，借鉴<a href="https://plmsmile.github.io/2018/03/14/31-co-attention-vqa/#alternating-co-attention">alternation-coattention思想</a> 去计算对D的<code>Coattention context</code>$C^D$ ：<br>$$<br>C^D = S^Q \cdot A^Q<br>$$<br>实际上，$C^D$与$S^D$类似，都是<code>Summary</code>， 都是<code>context</code>。 只是$C^D$使用的是新的$S^Q$， 而不是$E^Q_1$。 </p><h2 id="Coattention-Encoder总结"><a href="#Coattention-Encoder总结" class="headerlink" title="Coattention Encoder总结"></a>Coattention Encoder总结</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/deep-residual-coattention-encoder.png" style="display:block; margin:auto" width="90%"></p><p>使用两层<code>coattention</code>， 最后再残差连接，经过LSTM输出。</p><p><strong>第一层</strong><br>$$<br>E_1^D = \rm{biGRU_1}(E_0^D) \quad\in \mathbb R^{m \times h} \<br>E_1^Q = \tanh(\rm{W \cdot \rm{biGRU_1(E_0^Q)+b)}} \quad \in \mathbb R^{n \times h}<br>$$</p><p>$$<br>\rm{coattn_1} (E_1^D, E_1^Q) =  S_1^D, S_1^Q, C_1^Q \<br>$$</p><p><strong>第二层</strong><br>$$<br>E_2^D = \rm{biGRU_2}(E_1^D) \quad\in \mathbb R^{m \times h} \<br>E_2^Q = \tanh (W \cdot \rm{biGRU_2}(E_1^Q) + b) \quad\in \mathbb R^{m \times h}<br>$$</p><p>$$<br>\rm{coattn_2} (E_2^D, E_2^Q) =  S_2^D, S_2^Q, C_2^Q \<br>$$</p><p><strong>残差连接所有的D</strong><br>$$<br>c = \rm {concat}((E_1^D, E_2^D, S_1^D, S_2^D, C_1^D, C_2^D)<br>$$<br><strong>LSTM编码输出，得到Encoder的输出</strong><br>$$<br>U = \rm{biGRU}(c) \quad \in \mathbb R^{m \times 2h}<br>$$</p><h2 id="Mixed-Objective"><a href="#Mixed-Objective" class="headerlink" title="Mixed Objective"></a>Mixed Objective</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dcnplus-loss.png" style="display:block; margin:auto" width="100%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1611.01604&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dynamic Coattention Networks For Question Answering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="DCN" scheme="http://plmsmile.github.io/tags/DCN/"/>
    
      <category term="coattention" scheme="http://plmsmile.github.io/tags/coattention/"/>
    
      <category term="QA" scheme="http://plmsmile.github.io/tags/QA/"/>
    
  </entry>
  
  <entry>
    <title>协同注意力简介</title>
    <link href="http://plmsmile.github.io/2018/03/14/31-co-attention-vqa/"/>
    <id>http://plmsmile.github.io/2018/03/14/31-co-attention-vqa/</id>
    <published>2018-03-14T08:56:27.000Z</published>
    <updated>2018-11-25T08:30:08.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>只是记录一下Co-Attention，后续再补上本篇论文的全部笔记吧。</p></blockquote><p>论文：<a href="https://arxiv.org/abs/1606.00061" target="_blank" rel="noopener">Hierarchical Question-Image Co-Attention  for Visual Question Answering</a> </p><p>我的相关笔记：<a href="https://plmsmile.github.io/2017/10/12/Attention-based-NMT/">Attention-based NMT阅读笔记</a>和<a href="https://plmsmile.github.io/2017/10/10/attention-model/#encoder-decoder">NLP中的Attention笔记</a> </p><h1 id="Co-Attention"><a href="#Co-Attention" class="headerlink" title="Co-Attention"></a>Co-Attention</h1><p>这里以VQA里面的两个例子记录一下Co-Attention。即图片和问题。</p><h2 id="注意力和协同注意力"><a href="#注意力和协同注意力" class="headerlink" title="注意力和协同注意力"></a>注意力和协同注意力</h2><p><strong>注意力</strong> </p><p><code>注意力机制</code>就像人<strong>带着问题去阅读</strong>， 先看问题，再去文本中有目标地阅读寻找答案。</p><p>机器阅读则是结合问题和文本的信息，生成一个关于文本段落各部分的<code>注意力权重</code>，再<strong>对文本信息进行加权</strong>。</p><p>注意力机制可以帮助我们更好地去捕捉段落中和问题相关的信息。</p><p><strong>协同注意力</strong></p><p><code>协同注意力</code>是一种<strong>双向的注意力</strong>， 再利用注意力去生成文本和问句的注意力。</p><ul><li>给文本生成注意力权值</li><li>给问句生成注意力权值</li></ul><p>协同注意力分为两种方式：</p><ul><li><strong>Parallel Co-Attention</strong> :   两种数据源A和B，先结合得到C，再基于结合信息C对A和B分别生成对应的Attention。<code>同时生成注意力</code></li><li><strong>Alternating Co-Attention</strong>：  先基于A产生B的attention，得到新的B；再基于新B去产生A的attention。两次<code>交替生成注意力</code></li></ul><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/coattention.png" style="display:block; margin:auto" width="100%"></p><h2 id="Parallel-Co-Attention"><a href="#Parallel-Co-Attention" class="headerlink" title="Parallel Co-Attention"></a>Parallel Co-Attention</h2><p>图片特征：$V \in \mathbb {R}^{d\times N}$ ，问句特征：$Q \in \mathbb R^{d \times T}$ 。</p><p><code>同时</code>生成图片和问题的注意力。</p><p>先计算<code>关联矩阵</code>：<br>$$<br>C = \rm{tanh}(Q^T W_b V) \in \mathbb R^{T \times N}<br>$$<br>计算<code>注意力权值</code> $a^v$和$a^q$ </p><p>方法1：直接选择最大值。$a^v_n = \max \limits_i(C_{i, n})$ ，$a_t^q = \max \limits_i (C_{t, j})$</p><p>方法2：把关联矩阵当做特征给到网络中，进行计算注意力权值，再进行<code>softmax</code>。<strong>更好</strong><br>$$<br>H^v = \rm{tanh} (W_vV + (W_qQ)C), \quad \quad H^q = \rm{tanh} (W_qQ + (W_vV)C^T)<br>$$</p><p>$$<br>a^v = \rm{softmax}(w_{hv}^TH^v), \quad \quad a^q = \rm{softmax}(w^T_{hq}H^q)<br>$$</p><p>利用注意力和原特征向量去计算<code>新的特征向量</code><br>$$<br>\mathbf {\hat v} = \sum_{n=1}^N a^v_n \mathbf v_n, \quad \quad \mathbf { \hat q} = \sum_{t=1}^Tq_t^q \mathbf q_t<br>$$</p><h2 id="Alternating-Co-Attention"><a href="#Alternating-Co-Attention" class="headerlink" title="Alternating Co-Attention"></a>Alternating Co-Attention</h2><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/coattention.png" style="display:block; margin:auto" width="100%"></p><p><code>交替</code>生成图片和问题的注意力。</p><ul><li>把问题归纳成一个单独向量$\mathbf {q}$</li><li>基于$\mathbf q$ 去和图片特征$V$去生成图像特征$\mathbf {\hat v}$</li><li><p>基于$\mathbf v$和问题特征$Q$去生成问题特征$\mathbf {\hat q}$</p><p>具体地，给一个$X$和<code>attention guidance</code>$\mathbf g$ ，通过$\mathbf {\hat x} = f(X, \mathbf g)$去得到特征向量$\mathbf {\hat x}$<br>$$<br>H = \rm {tanh} (W_x X+ (W_g \mathbf g) \mathbb 1^T)<br>$$<br>$\mathbf a ^x$ 是特征$X$的<code>注意力权值</code> ：<br>$$<br>\mathbf a^x = \rm(softmax)(w^T_{hx} H)<br>$$<br>新的<strong>注意力向量</strong> (<code>attended image (or question) vector)</code> :<br>$$<br>\mathbf {\hat x} = \sum a_i^x \mathbf x_i<br>$$<br>对应本例子如下：</p></li><li><p>$X = Q, \; g = 0 \to \mathbf q$</p></li><li>$X = V, \; g = \mathbf q \to \mathbf {\hat v}$</li><li>$X = Q, \; g = \mathbf {\hat v} \to \mathbf {\hat q}$</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;只是记录一下Co-Attention，后续再补上本篇论文的全部笔记吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;论文：&lt;a href=&quot;https://arxiv.org/abs/1606.00061&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="论文笔记" scheme="http://plmsmile.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
      <category term="注意力" scheme="http://plmsmile.github.io/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
    
      <category term="VQA" scheme="http://plmsmile.github.io/tags/VQA/"/>
    
  </entry>
  
  <entry>
    <title>使用Dynamic Memory Network实现一个简单QA</title>
    <link href="http://plmsmile.github.io/2018/03/13/30-dynamic-memory-network/"/>
    <id>http://plmsmile.github.io/2018/03/13/30-dynamic-memory-network/</id>
    <published>2018-03-13T08:07:29.000Z</published>
    <updated>2018-11-25T08:30:08.444Z</updated>
    
    <content type="html"><![CDATA[<p>论文：<a href="https://arxiv.org/abs/1506.07285" target="_blank" rel="noopener">Ask Me Anything: Dynamic Memory Networks for Natural Language Processing</a></p><blockquote><p>本文概要：介绍DMN的基本原理，使用PyTorch进行实现一个简单QA</p></blockquote><p><img src="" style="display:block; margin:auto" width="50%"></p><h1 id="模型简介"><a href="#模型简介" class="headerlink" title="模型简介"></a>模型简介</h1><h2 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h2><p>许多NLP问题都可以看做一个Question-Answer问题。<code>Dynamic Memory Network</code> 由4部分组成。</p><p><strong>输入模块</strong></p><p>对输入的句子<code>facts</code>(先<code>embedding</code>)使用<a href="https://plmsmile.github.io/2017/10/18/rnn/#gru">GRU</a>进行编码，得到<code>encoded_facts</code>，给到后面的<code>情景记忆模块</code>。  </p><p><strong>问题模块</strong></p><p>对输入的问题<code>question</code>使用<code>GRU</code>进行编码，得到<code>encoded_question</code>， 给到后面的<code>情景记忆模块</code> 和<code>回答模块</code> 。 </p><p><strong>情景记忆模块</strong></p><p><code>Episodic Memory Module</code>由<code>memory</code>和<code>attention</code>组成。 </p><ul><li>attention：会选择更重要的<code>facts</code></li><li>memory：根据<code>question</code>、<code>facts</code>和 <code>旧memory</code>来生成<code>新momery</code> 。初始：<code>memory=encoded_question</code></li></ul><p>会在<code>facts</code>上迭代多次去计算<code>memory</code>。  每一次迭代会提取出新的信息。</p><p>输出最终的<code>momery</code>， 给到<code>回答模块</code>。 </p><p><strong>回答模块</strong></p><p><code>memory</code> + <code>question</code>， 在<code>GRUCell</code>上迭代<code>原本的回答长度</code>次， 得到最终的预测结果。</p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dmn-simple.png" style="display:block; margin:auto" width="50%"></p><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/img/nlp/papers/dmn-detail.png" style="display:block; margin:auto" width="90%"></p><h2 id="输入模块"><a href="#输入模块" class="headerlink" title="输入模块"></a>输入模块</h2><p><strong>输入</strong></p><ul><li>一个句子，有$T_I$个单词</li><li>$T_I$个句子，则把这些句子合并成一个大句子。在每个句子的末尾添加一个<code>句子结束标记&lt;/s&gt;</code>。如上图蓝色的部分</li></ul><p><strong>GRU计算隐状态</strong> </p><p>句子过RNN时，对于每一时刻$t$的单词$w_t$ ，有$h_t$ :<br>$$<br>h_t = \rm{RNN}(w_t, h_{t-1})<br>$$<br><strong>输出</strong></p><p>使用RNN的<code>h = hidden states</code> 作为<code>输入句子的向量表达</code>，也就是<code>encoded_facts</code></p><ul><li>一个句子，输出所有时刻的$h_t$ </li><li>多个句子，输出每个句子<code>结束标记&lt;/s&gt;</code>时刻的$h_t$。  </li></ul><h2 id="问题模块"><a href="#问题模块" class="headerlink" title="问题模块"></a>问题模块</h2><p><strong>输入</strong> </p><p>输入一个句子<code>question</code>，有$T_Q$个单词。</p><p><strong>GRU计算隐状态</strong><br>$$<br>q_t = \rm{RNN}(w_t^Q, q_{t-1})<br>$$<br><strong>输出Q编码</strong></p><p><code>最后时刻的隐状态</code>$q_{T_Q}$作为句子的编码。  </p><hr><h2 id="情景记忆模块"><a href="#情景记忆模块" class="headerlink" title="情景记忆模块"></a>情景记忆模块</h2><p><strong>总体思路</strong> </p><p>记忆模块收到两个编码表达：<code>encoded_facts</code>和<code>encoded_question</code> ， 也就是$h$和$q$。 </p><p>模块会生成一个记忆<code>memory</code>，初始时<code>memory = encoded_question</code></p><p>记忆模块在<code>encoded_facts</code>上反复迭代多轮，每一轮去提取新的信息<code>episode</code>， 更新<code>memory</code> </p><ul><li>遍历所有<code>facts</code>， 对于每一个的<code>fact</code>， 不停地更新当前轮的信息<code>e</code><ul><li>计算新的信息：$e_{new}=\rm{RNN}(fact, e)$ ，使用当前fact和当前信息</li><li>计算新信息的保留比例注意门$g$</li><li><code>更新信息</code>：$e = g <em> e_{new} + (1-g) </em> e$</li><li>计算保留比例g：结合当前<code>fact</code> 、<code>memory</code>、 <code>question</code> 去生成多个特征，再过一个<code>两层前向网络G</code>得到一个比例数值</li></ul></li></ul><ul><li><code>更新memory</code> ，$m^i = \rm{GRU}(e, m^{i-1})$</li></ul><p><strong>特征函数与前向网络</strong></p><p>保留比例门<code>g</code>充当着<code>attention</code>的作用 。 </p><p>特征函数$z(c, m, q)$， 其中c就是当前的<code>fact</code> ，（论文里面是9个特征）：<br>$$<br>z(c, m, q) = [c \circ q,  c \circ m, \vert c-q\vert, \vert c-m\vert]<br>$$<br>前向网络$g=G(c, m ,q)$ ：<br>$$<br>t = \rm{tanh}(W^1z(c, m, q) + b^1)  \<br>g = G(c, m, q) = \sigma(W^2 t + b^2)<br>$$<br><strong>e更新</strong> </p><p>在每个fact遍历中，e会结合fact和旧e去生成新的信息$e_{new}$，再结合旧$e$和新$e_{new}$ 去生成最终的$e^i$  ：<br>$$<br>e_{new}=\rm{RNN}(fact, e)<br>$$</p><p>$$<br>e = g <em> e_{new} + (1-g) </em> e<br>$$</p><p><strong>记忆更新</strong></p><p>每一轮迭代后，结合旧记忆和当前轮的信息e去更新记忆：<br>$$<br>m^i = \rm{GRU}(e, m^{i-1})<br>$$<br><strong>迭代停止条件</strong></p><ul><li>设置最大迭代次数$T_M$</li><li>在输入里面追加停止迭代信号，如果注意门选择它，则停止。</li></ul><h2 id="回答模块"><a href="#回答模块" class="headerlink" title="回答模块"></a>回答模块</h2><p>回答模块结合memory和question，来生成对问题的答案。也是通过GRU来生成答案的。</p><p>设<code>a</code> 是<code>answer_gru</code>的hidden state，初始$a_0= m^{T_M}$<br>$$<br>y_t = \rm{softmax}(W^a a_t) \<br>a_t = \rm{GRU} ([y_{t-1}, q], a_{t-1})<br>$$<br>使用<code>交叉熵</code>去计算loss，进行优化。 </p><h1 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h1><p><a href="https://github.com/plmsmile/NLP-Demos/tree/master/question-answer-DMN" target="_blank" rel="noopener">我的github源代码</a> ，实现参考自<a href="https://github.com/DSKSD/DeepNLP-models-Pytorch/blob/master/notebooks/10.Dynamic-Memory-Network-for-Question-Answering.ipynb" target="_blank" rel="noopener">DSKSD的代码</a> 。</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p><strong>原始数据</strong> </p><p>使用过的数据是facebook的<a href="http://www.thespermwhale.com/jaseweston/babi/tasks_1-20_v1-2.tar.gz" target="_blank" rel="noopener">bAbi Tasks Data 1-20 </a>里面的 <code>en-10k</code>下的<code>qa5_three-arg-relations_train.txt</code> 和test数据。 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> Bill travelled to the office.</span><br><span class="line"><span class="number">2</span> Bill picked up the football there.</span><br><span class="line"><span class="number">3</span> Bill went to the bedroom.</span><br><span class="line"><span class="number">4</span> Bill gave the football to Fred.</span><br><span class="line">5 What did Bill give to Fred?   football        4</span><br><span class="line"><span class="number">6</span> Fred handed the football to Bill.</span><br><span class="line"><span class="number">7</span> Jeff went back to the office.</span><br><span class="line">8 Who received the football?    Bill    6</span><br><span class="line"><span class="number">9</span> Bill travelled to the office.</span><br><span class="line"><span class="number">10</span> Bill got the milk there.</span><br><span class="line">11 Who received the football?   Bill    6</span><br><span class="line"><span class="number">12</span> Fred travelled to the garden.</span><br><span class="line"><span class="number">13</span> Fred went to the hallway.</span><br><span class="line"><span class="number">14</span> Bill journeyed to the bedroom.</span><br><span class="line"><span class="number">15</span> Jeff moved to the hallway.</span><br><span class="line"><span class="number">16</span> Jeff journeyed to the bathroom.</span><br><span class="line"><span class="number">17</span> Bill journeyed to the office.</span><br><span class="line"><span class="number">18</span> Fred travelled to the bathroom.</span><br><span class="line"><span class="number">19</span> Mary journeyed to the kitchen.</span><br><span class="line"><span class="number">20</span> Jeff took the apple there.</span><br><span class="line"><span class="number">21</span> Jeff gave the apple to Fred.</span><br><span class="line">22 Who did Jeff give the apple to?      Fred    21</span><br><span class="line"><span class="number">23</span> Bill went back to the bathroom.</span><br><span class="line"><span class="number">24</span> Bill left the milk.</span><br><span class="line">25 Who received the apple?      Fred    21</span><br><span class="line"><span class="number">1</span> Mary travelled to the garden.</span><br><span class="line"><span class="number">2</span> Mary journeyed to the kitchen.</span><br><span class="line"><span class="number">3</span> Bill went back to the office.</span><br><span class="line"><span class="number">4</span> Bill journeyed to the hallway.</span><br><span class="line"><span class="number">5</span> Jeff went back to the bedroom.</span><br><span class="line"><span class="number">6</span> Fred moved to the hallway.</span><br><span class="line"><span class="number">7</span> Bill moved to the bathroom.</span><br><span class="line"><span class="number">8</span> Jeff went back to the garden.</span><br><span class="line"><span class="number">9</span> Jeff went back to the kitchen.</span><br><span class="line"><span class="number">10</span> Fred went back to the garden.</span><br><span class="line"><span class="number">11</span> Mary got the football there.</span><br><span class="line"><span class="number">12</span> Mary handed the football to Jeff.</span><br><span class="line">13 What did Mary give to Jeff?  football        12</span><br></pre></td></tr></table></figure><p>比如1-25是一个大的情景</p><ul><li>没有问号的都是陈述句，是情景数据<code>fact</code>。只有<code>.</code>号， 都是简单句</li><li>带问号的：是问句，带有答案和答案所在句子。使用<code>tab</code>分割</li></ul><p><strong>加载原始数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_raw_data</span><span class="params">(file_path, seq_end=<span class="string">'&lt;/s&gt;'</span>)</span>:</span></span><br><span class="line">    <span class="string">''' 从文件中读取文本数据，并整合成[facts, question, answer]一条一条的可用数据，原始word形式</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path -- 数据文件</span></span><br><span class="line"><span class="string">        seq_end -- 句子结束标记</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        data -- list，元素是[facts, question, answer]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    source_data = open(file_path).readlines()</span><br><span class="line">    <span class="keyword">print</span> (file_path, <span class="string">":"</span>, len(source_data), <span class="string">"lines"</span>)</span><br><span class="line">    <span class="comment"># 去掉换行符号</span></span><br><span class="line">    source_data = [line[:<span class="number">-1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> source_data]</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> source_data:</span><br><span class="line">        index = line.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> index == <span class="string">'1'</span>:</span><br><span class="line">            <span class="comment"># 一个新的QA开始</span></span><br><span class="line">            facts = []</span><br><span class="line">            <span class="comment">#qa = []</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'?'</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="comment"># 当前QA的一个问句</span></span><br><span class="line">            <span class="comment"># 问题 答案 答案所在句子的编号 \t分隔</span></span><br><span class="line">            tmp = line.split(<span class="string">'\t'</span>)</span><br><span class="line">            question = tmp[<span class="number">0</span>].strip().replace(<span class="string">'?'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">1</span>:] + [<span class="string">'?'</span>]</span><br><span class="line">            answer = tmp[<span class="number">1</span>].split() + [seq_end]</span><br><span class="line">            facts_for_q = deepcopy(facts)</span><br><span class="line">            data.append([facts_for_q, question, answer])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 普通的事件描述，简单句，只有.和空格</span></span><br><span class="line">            sentence = line.replace(<span class="string">'.'</span>, <span class="string">''</span>).split(<span class="string">' '</span>)[<span class="number">1</span>:] + [seq_end]</span><br><span class="line">            facts.append(sentence)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p><strong>把数据转成id格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple_word2id</span><span class="params">(triple_word_data, th)</span>:</span></span><br><span class="line">    <span class="string">'''把文字转成id</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        triple_word_data -- [(facts, q, a)] word形式</span></span><br><span class="line"><span class="string">        th -- textheler</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        triple_id_data -- [(facts, q, a)]index形式</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 把各个word转成数字id</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> triple_word_data:</span><br><span class="line">        <span class="comment"># 处理facts句子</span></span><br><span class="line">        <span class="keyword">for</span> i, fact <span class="keyword">in</span> enumerate(t[<span class="number">0</span>]):</span><br><span class="line">            t[<span class="number">0</span>][i] = th.sentence2indices(fact)</span><br><span class="line">        <span class="comment"># 问题与答案</span></span><br><span class="line">        t[<span class="number">1</span>] = th.sentence2indices(t[<span class="number">1</span>])</span><br><span class="line">        t[<span class="number">2</span>] = th.sentence2indices(t[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> triple_word_data</span><br></pre></td></tr></table></figure><p><strong>根据batch_size取数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_loader</span><span class="params">(data, batch_size=<span class="number">1</span>, shuffle=False)</span>:</span></span><br><span class="line">    <span class="string">''' 以batch的格式返回数据</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data -- list格式的data</span></span><br><span class="line"><span class="string">        batch_size -- </span></span><br><span class="line"><span class="string">        shuffle -- 每一个epoch开始的时候，对数据进行shuffle</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        数据遍历的iterator</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        random.shuffle(data)</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = batch_size</span><br><span class="line">    <span class="keyword">while</span> (start &lt; len(data)):</span><br><span class="line">        batch = data[start:end]</span><br><span class="line">        start, end = end, end + batch_size</span><br><span class="line">        <span class="keyword">yield</span> batch</span><br><span class="line">    <span class="keyword">if</span> end &gt;= len(data) <span class="keyword">and</span> start &lt; len(data):</span><br><span class="line">        batch = data[start:]</span><br><span class="line">        <span class="keyword">yield</span> batch</span><br></pre></td></tr></table></figure><p><strong>对每一个batch进行padding</strong></p><p>这部分有点复杂。要求问题、答案、fact的长度一致，每个问题的fact的数量也要一样。</p><blockquote><p>其实和模型也有关，模型写的有点坑，就是每条数据的所有fact应该连接在一起成为一个大的fact送进GRU里，在每个fact后面加上结束标记。但是我这却分开了，分成了多个标记好的fact，也怪当时没有仔细看好论文，这个也是参考别人的实现。循环也导致训练贼慢，但是现在忙着找实习，就先不改了。后面好好写DMNPLUS吧。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_batch_data</span><span class="params">(raw_batch_data, th)</span>:</span></span><br><span class="line">    <span class="string">''' 对数据进行padding，问题、答案、fact长度分别一致，同时每条数据的fact的数量一致。输入到网络的时候要用</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        raw_batch_data -- [[facts, q, a]]，都是以list wordid表示</span></span><br><span class="line"><span class="string">        th -- TextHelper</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        all_facts -- [b, nfact, flen]，pad后的facts，Variable</span></span><br><span class="line"><span class="string">        all_facts_mask -- [b, nfact, flen]，facts的mask，Variable</span></span><br><span class="line"><span class="string">        questions -- [b, qlen]，pad后的questions，Variable</span></span><br><span class="line"><span class="string">        questions_mask -- [b, qlen]，questions的mask，Variable</span></span><br><span class="line"><span class="string">        answers -- [b, alen]，pad后的answers，Variable</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    all_facts, questions, answers = [list(i) <span class="keyword">for</span> i <span class="keyword">in</span> zip(*raw_batch_data)]</span><br><span class="line">    batch_size = len(raw_batch_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 计算各种长度。一个QA的facts数量，fact、Q、A句子的最大长度</span></span><br><span class="line">    n_fact = max([len(facts) <span class="keyword">for</span> facts <span class="keyword">in</span> all_facts])</span><br><span class="line">    flen = max([len(f) <span class="keyword">for</span> f <span class="keyword">in</span> flatten(all_facts)])</span><br><span class="line">    qlen = max([len(q) <span class="keyword">for</span> q <span class="keyword">in</span> questions])</span><br><span class="line">    alen = max([len(a) <span class="keyword">for</span> a <span class="keyword">in</span> answers])</span><br><span class="line">    padid = th.word2index(th.pad)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 对数据进行padding</span></span><br><span class="line">    all_facts_mask = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size):</span><br><span class="line">        <span class="comment"># 2.1 pad fact</span></span><br><span class="line">        facts = all_facts[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(facts)):</span><br><span class="line">            t = flen - len(facts[j])</span><br><span class="line">            <span class="keyword">if</span> t &gt; <span class="number">0</span>:</span><br><span class="line">                all_facts[i][j] = facts[j] + [padid] * t</span><br><span class="line">        <span class="comment"># fact数量pad</span></span><br><span class="line">        <span class="keyword">while</span> (len(facts) &lt; n_fact):</span><br><span class="line">            all_facts[i].append([padid] * flen)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算facts内容是否是填充给的，填充为1，不填充为0</span></span><br><span class="line">        mask = [tuple(map(<span class="keyword">lambda</span> v: v == padid, fact)) <span class="keyword">for</span> fact <span class="keyword">in</span> all_facts[i]]</span><br><span class="line">        all_facts_mask.append(mask)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.2 pad question</span></span><br><span class="line">        q = questions[i]</span><br><span class="line">        <span class="keyword">if</span> len(q) &lt; qlen:</span><br><span class="line">            questions[i] = q + [padid] * (qlen - len(q))</span><br><span class="line">        <span class="comment"># 2.3 pad answer</span></span><br><span class="line">        a = answers[i]</span><br><span class="line">        <span class="keyword">if</span> len(a) &lt; alen:</span><br><span class="line">            answers[i] = a + [padid] * (alen - len(a))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 把list数据转成Variable</span></span><br><span class="line">    all_facts = get_variable(torch.LongTensor(all_facts))</span><br><span class="line">    all_facts_mask = get_variable(torch.ByteTensor(all_facts_mask))</span><br><span class="line">    answers = get_variable(torch.LongTensor(answers))</span><br><span class="line">    questions = torch.LongTensor(questions)</span><br><span class="line">    questions_mask = [(tuple(map(<span class="keyword">lambda</span> v: v == padid, q))) <span class="keyword">for</span> q <span class="keyword">in</span> questions]</span><br><span class="line">    questions_mask = torch.ByteTensor(questions_mask)</span><br><span class="line">    questions, questions_mask = get_variable(questions), get_variable(questions_mask)</span><br><span class="line">    <span class="keyword">return</span> all_facts, all_facts_mask, questions, questions_mask, answers</span><br></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p><strong>模型定义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DMN</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, vocab_size, embed_size, hidden_size, padding_idx, seqbegin_id, dropout_p=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            vocab_size -- 词汇表大小</span></span><br><span class="line"><span class="string">            embed_size -- 词嵌入维数</span></span><br><span class="line"><span class="string">            hidden_size -- GRU的输出维数</span></span><br><span class="line"><span class="string">            padding_idx -- pad标记的wordid</span></span><br><span class="line"><span class="string">            seqbegin_id -- 句子起始的wordid</span></span><br><span class="line"><span class="string">            dropout_p -- dropout比率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        super(DMN, self).__init__()</span><br><span class="line">        self.vocab_size = vocab_size</span><br><span class="line">        self.hidden_size = hidden_size</span><br><span class="line">        self.seqbegin_id = seqbegin_id</span><br><span class="line">        </span><br><span class="line">        self.embed = nn.Embedding(vocab_size, embed_size, padding_idx=padding_idx)</span><br><span class="line">        self.input_gru = nn.GRU(embed_size, hidden_size, batch_first=<span class="keyword">True</span>)</span><br><span class="line">        self.question_gru = nn.GRU(embed_size, hidden_size, batch_first=<span class="keyword">True</span>)    </span><br><span class="line">        self.gate = nn.Sequential(</span><br><span class="line">                        nn.Linear(hidden_size * <span class="number">4</span>, hidden_size),</span><br><span class="line">                        nn.Tanh(),</span><br><span class="line">                        nn.Linear(hidden_size, <span class="number">1</span>),</span><br><span class="line">                        nn.Sigmoid()</span><br><span class="line">                    )</span><br><span class="line">        self.attention_grucell = nn.GRUCell(hidden_size, hidden_size)</span><br><span class="line">        self.memory_grucell = nn.GRUCell(hidden_size, hidden_size)</span><br><span class="line">        self.answer_grucell = nn.GRUCell(hidden_size * <span class="number">2</span>, hidden_size)</span><br><span class="line">        self.answer_fc = nn.Linear(hidden_size, vocab_size)</span><br><span class="line">        self.dropout = nn.Dropout(dropout_p)</span><br><span class="line">        </span><br><span class="line">        self.init_weight()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_hidden</span><span class="params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="string">'''GRU的初始hidden。单层单向'''</span></span><br><span class="line">        hidden = torch.zeros(<span class="number">1</span>, batch_size, self.hidden_size)</span><br><span class="line">        hidden = get_variable(hidden)</span><br><span class="line">        <span class="keyword">return</span> hidden</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_weight</span><span class="params">(self)</span>:</span></span><br><span class="line">        nn.init.xavier_uniform(self.embed.state_dict()[<span class="string">'weight'</span>])</span><br><span class="line">        components = [self.input_gru, self.question_gru, self.gate, self.attention_grucell,</span><br><span class="line">                     self.memory_grucell, self.answer_grucell]</span><br><span class="line">        <span class="keyword">for</span> component <span class="keyword">in</span> components:</span><br><span class="line">            <span class="keyword">for</span> name, param <span class="keyword">in</span> component.state_dict().items():</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'weight'</span> <span class="keyword">in</span> name:</span><br><span class="line">                    nn.init.xavier_normal(param)</span><br><span class="line">        nn.init.xavier_uniform(self.answer_fc.state_dict()[<span class="string">'weight'</span>])</span><br><span class="line">        self.answer_fc.bias.data.fill_(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>前向计算参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, allfacts, allfacts_mask, questions, questions_mask, alen, n_episode=<span class="number">3</span>)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            allfacts -- [b, n_fact, flen]，输入的多个句子</span></span><br><span class="line"><span class="string">            allfacts_mask -- [b, n_fact, flen]，mask=1表示是pad的，否则不是</span></span><br><span class="line"><span class="string">            questions -- [b, qlen]，问题</span></span><br><span class="line"><span class="string">            questions_mask -- [b, qlen]，mask=1：pad</span></span><br><span class="line"><span class="string">            alen -- Answer len</span></span><br><span class="line"><span class="string">            seqbegin_id -- 句子开始标记的wordid</span></span><br><span class="line"><span class="string">            n_episodes -- </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            preds -- [b * alen,  vocab_size]，预测的句子。b*alen合在一起方便后面算交叉熵</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 0. 计算常用的信息，batch_size，一条数据nfact条句子，每个fact长度为flen，每个问题长度为qlen</span></span><br><span class="line">        bsize = allfacts.size(<span class="number">0</span>)</span><br><span class="line">        nfact = allfacts.size(<span class="number">1</span>)</span><br><span class="line">        flen = allfacts.size(<span class="number">2</span>)</span><br><span class="line">        qlen = questions.size(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>输入模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 输入模块，用RNN编码输入的句子</span></span><br><span class="line"><span class="comment"># TODO 两层循环，待优化</span></span><br><span class="line">encoded_facts = []</span><br><span class="line"><span class="comment"># 对每一条数据，计算facts编码</span></span><br><span class="line"><span class="keyword">for</span> facts, facts_mask <span class="keyword">in</span> zip(allfacts, allfacts_mask):</span><br><span class="line">    facts_embeds = self.embed(facts)</span><br><span class="line">    facts.embeds = self.dropout(facts_embeds)</span><br><span class="line">    hidden = self.init_hidden(nfact)</span><br><span class="line">    <span class="comment"># 1.1 把输入(多条句子)给到GRU</span></span><br><span class="line">    <span class="comment"># b=nf, [nf, flen, h], [1, nf, h]</span></span><br><span class="line">    outputs, hidden = self.input_gru(facts_embeds, hidden)</span><br><span class="line">    <span class="comment"># 1.2 每条句子真正结束时(real_len)对应的输出，作为该句子的hidden。GRU：ouput=hidden</span></span><br><span class="line">    real_hiddens = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, o <span class="keyword">in</span> enumerate(outputs):</span><br><span class="line">        real_len = facts_mask[i].data.tolist().count(<span class="number">0</span>)</span><br><span class="line">        real_hiddens.append(o[real_len - <span class="number">1</span>])</span><br><span class="line">        <span class="comment"># 1.3 把所有单个fact连接起来，unsqueeze(0)是为了后面的所有batch的cat</span></span><br><span class="line">        hiddens = torch.cat(real_hiddens).view(nfact, <span class="number">-1</span>).unsqueeze(<span class="number">0</span>)</span><br><span class="line">        encoded_facts.append(hiddens)</span><br><span class="line">        <span class="comment"># [b, nfact, h]</span></span><br><span class="line">        encoded_facts = torch.cat(encoded_facts)</span><br></pre></td></tr></table></figure><p><strong>问句模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 问题模块，对问题使用RNN编码</span></span><br><span class="line">questions_embeds = self.embed(questions)</span><br><span class="line">questions_embeds = self.dropout(questions_embeds)</span><br><span class="line">hidden = self.init_hidden(bsize)</span><br><span class="line"><span class="comment"># [b, qlen, h], [1, b, h]</span></span><br><span class="line">outputs, hidden = self.question_gru(questions_embeds, hidden)</span><br><span class="line">real_questions = []</span><br><span class="line"><span class="keyword">for</span> i, o <span class="keyword">in</span> enumerate(outputs):</span><br><span class="line">    real_len = questions_mask[i].data.tolist().count(<span class="number">0</span>)</span><br><span class="line">    real_questions.append(o[real_len - <span class="number">1</span>])</span><br><span class="line">    encoded_questions = torch.cat(real_questions).view(bsize, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. Memory模块</span></span><br><span class="line">memory = encoded_questions</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_episode):</span><br><span class="line">    <span class="comment"># e</span></span><br><span class="line">    e = self.init_hidden(bsize).squeeze(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># [nfact, b, h]</span></span><br><span class="line">    encoded_facts_t = encoded_facts.transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 根据memory, episode，计算每一时刻的e。最终的e和memory来计算新的memory</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(nfact):</span><br><span class="line">        <span class="comment"># [b, h]</span></span><br><span class="line">        bfact = encoded_facts_t[t]</span><br><span class="line">        <span class="comment"># TODO 计算4个特征，论文是9个</span></span><br><span class="line">        f1 = bfact * encoded_questions</span><br><span class="line">        f2 = bfact * memory</span><br><span class="line">        f3 = torch.abs(bfact - encoded_questions)</span><br><span class="line">        f4 = torch.abs(bfact - memory)</span><br><span class="line">        z = torch.cat([f1, f2, f3, f4], dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># [b, 1] 对每个fact的注意力</span></span><br><span class="line">        gt = self.gate(z)</span><br><span class="line">        e = gt * self.attention_grucell(bfact, e) + (<span class="number">1</span> - gt) * e</span><br><span class="line">        <span class="comment"># 每一轮的e和旧memory计算新的memory</span></span><br><span class="line">        memory = self.memory_grucell(e, memory)</span><br></pre></td></tr></table></figure><p><strong>回答模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. Answer模块</span></span><br><span class="line"><span class="comment"># [b, h]</span></span><br><span class="line">answer_hidden = memory</span><br><span class="line">begin_tokens = get_variable(torch.LongTensor([self.seqbegin_id]*bsize))</span><br><span class="line"><span class="comment"># [b, h]</span></span><br><span class="line">last_word = self.embed(begin_tokens)</span><br><span class="line">preds = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(alen):</span><br><span class="line">    inputs = torch.cat([last_word, encoded_questions], dim=<span class="number">1</span>)</span><br><span class="line">    answer_hidden = self.answer_grucell(inputs, answer_hidden)</span><br><span class="line">    <span class="comment"># to vocab_size</span></span><br><span class="line">    probs = self.answer_fc(answer_hidden)</span><br><span class="line">    <span class="comment"># [b, v]</span></span><br><span class="line">    probs = F.log_softmax(probs.float())</span><br><span class="line">    _, indics = torch.max(probs, <span class="number">1</span>)</span><br><span class="line">    last_word = self.embed(indics)</span><br><span class="line">    <span class="comment"># for cross entropy</span></span><br><span class="line">    preds.append(probs.view(bsize, <span class="number">1</span>, <span class="number">-1</span>))</span><br><span class="line">    <span class="comment">#print (preds[0].data.shape)</span></span><br><span class="line">    preds = torch.cat(preds, dim=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> preds.view(bsize * alen, <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultConfig</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''配置文件'''</span></span><br><span class="line">    <span class="comment"># 数据信息</span></span><br><span class="line">    train_file = <span class="string">"./datasets/tasks_1-20_v1-2/en-10k/qa5_three-arg-relations_train.txt"</span></span><br><span class="line">    test_file = <span class="string">"./datasets/tasks_1-20_v1-2/en-10k/qa5_three-arg-relations_test.txt"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 一些特殊符号</span></span><br><span class="line">    seq_end = <span class="string">'&lt;/s&gt;'</span></span><br><span class="line">    seq_begin = <span class="string">'&lt;s&gt;'</span></span><br><span class="line">    pad = <span class="string">'&lt;pad&gt;'</span></span><br><span class="line">    unk = <span class="string">'&lt;unk&gt;'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># DataLoader信息</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    shuffle = <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># TODO</span></span><br><span class="line">    num_workers = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># model</span></span><br><span class="line">    embed_size = <span class="number">64</span></span><br><span class="line">    hidden_size = <span class="number">64</span></span><br><span class="line">    <span class="comment"># 对inputs推理的轮数</span></span><br><span class="line">    n_episode = <span class="number">3</span></span><br><span class="line">    dropout_p = <span class="number">0.1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    max_epoch = <span class="number">500</span></span><br><span class="line">    learning_rate = <span class="number">0.001</span></span><br><span class="line">    min_loss = <span class="number">0.01</span></span><br><span class="line">    print_every_epoch = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># cuda信息</span></span><br><span class="line">    use_cuda = <span class="keyword">True</span></span><br><span class="line">    device_id = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># model_path</span></span><br><span class="line">    model_path = <span class="string">"./models/DMN.pkl"</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(opt, th, train_data)</span>:</span></span><br><span class="line">    <span class="string">''' 训练</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        opt -- 配置信息</span></span><br><span class="line"><span class="string">        th -- TextHelper实例</span></span><br><span class="line"><span class="string">        train_data -- 训练数据，[[facts, question, answer]]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 加载原始数据</span></span><br><span class="line">    seqbegin_id = th.word2index(th.seq_begin)</span><br><span class="line">    </span><br><span class="line">    model = DMN(th.vocab_size, opt.embed_size, opt.hidden_size, seqbegin_id, th.word2index(th.pad))</span><br><span class="line">    <span class="keyword">if</span> opt.use_cuda:</span><br><span class="line">        model = model.cuda(opt.device_id)</span><br><span class="line">    </span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr = opt.learning_rate)</span><br><span class="line">    loss_func = nn.CrossEntropyLoss(ignore_index=th.word2index(th.pad))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(opt.max_epoch):</span><br><span class="line">        losses = []</span><br><span class="line">        <span class="keyword">for</span> batch_data <span class="keyword">in</span> get_data_loader(train_data, opt.batch_size, opt.shuffle):</span><br><span class="line">            <span class="comment"># batch内的数据进行pad，转成Variable</span></span><br><span class="line">            allfacts, allfacts_mask, questions, questions_mask, answers = \</span><br><span class="line">                    pad_batch_data(batch_data, th)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 前向</span></span><br><span class="line">            preds = model(allfacts, allfacts_mask, questions, questions_mask, </span><br><span class="line">                          answers.size(<span class="number">1</span>), opt.n_episode)</span><br><span class="line">            <span class="comment"># loss</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss = loss_func(preds, answers.view(<span class="number">-1</span>))</span><br><span class="line">            losses.append(loss.data.tolist()[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># 反向</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">        avg_loss = np.mean(losses)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> avg_loss &lt;= opt.min_loss <span class="keyword">or</span> e % opt.print_every_epoch == <span class="number">0</span> <span class="keyword">or</span> e == opt.max_epoch - <span class="number">1</span>:    </span><br><span class="line">            info = <span class="string">"e=&#123;&#125;, loss=&#123;&#125;"</span>.format(e, avg_loss)</span><br><span class="line">            losses = []</span><br><span class="line">            <span class="keyword">print</span> (info)</span><br><span class="line">            <span class="keyword">if</span> e == opt.max_epoch - <span class="number">1</span> <span class="keyword">and</span> avg_loss &gt; opt.min_loss:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">"epoch finish, loss &gt; min_loss"</span>)</span><br><span class="line">                torch.save(model, opt.model_path)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> avg_loss &lt;= opt.min_loss:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">"Early stop"</span>)</span><br><span class="line">                torch.save(model, opt.model_path)</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="预测和效果"><a href="#预测和效果" class="headerlink" title="预测和效果"></a>预测和效果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_test_accuracy</span><span class="params">(model, test_data, th, n_episode=DefaultConfig.n_episode)</span>:</span></span><br><span class="line">    <span class="string">'''测试，测试数据'''</span></span><br><span class="line">    batch_size = <span class="number">1</span></span><br><span class="line">    model.eval()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> get_data_loader(test_data, batch_size, <span class="keyword">False</span>):</span><br><span class="line">        facts, facts_mask, question, question_mask, answer = pad_batch_data(item, th)</span><br><span class="line">        preds = model(facts, facts_mask, question, question_mask, answer.size(<span class="number">1</span>), n_episode)</span><br><span class="line">        <span class="comment">#print (answer.data.shape, preds.data.shape)</span></span><br><span class="line">        preds = preds.max(<span class="number">1</span>)[<span class="number">1</span>].data.tolist()</span><br><span class="line">        answer = answer.view(<span class="number">-1</span>).data.tolist()</span><br><span class="line">        <span class="keyword">if</span> preds == answer:</span><br><span class="line">            correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"acccuracy = "</span>, correct / len(test_data)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_one_data</span><span class="params">(model, item, th, n_episode=DefaultConfig.n_episode)</span>:</span></span><br><span class="line">    <span class="string">''' 测试一条数据</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model -- DMN模型</span></span><br><span class="line"><span class="string">        item -- [facts, question, answer]</span></span><br><span class="line"><span class="string">        th -- TextHelper</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># batch_size = 1</span></span><br><span class="line">    model.eval()</span><br><span class="line">    item = [item]</span><br><span class="line">    facts, facts_mask, question, question_mask, answer = pad_batch_data(item, th)</span><br><span class="line">    preds = model(facts, facts_mask, question, question_mask, answer.size(<span class="number">1</span>), n_episode)</span><br><span class="line">    </span><br><span class="line">    item = item[<span class="number">0</span>]</span><br><span class="line">    preds = preds.max(<span class="number">1</span>)[<span class="number">1</span>].data.tolist()</span><br><span class="line">    fact = item[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    facts = [th.indices2sentence(fact) <span class="keyword">for</span> fact <span class="keyword">in</span> item[<span class="number">0</span>]]</span><br><span class="line">    facts = [<span class="string">" "</span>.join(fact) <span class="keyword">for</span> fact <span class="keyword">in</span> facts]</span><br><span class="line">    q = <span class="string">" "</span>.join(th.indices2sentence(item[<span class="number">1</span>]))</span><br><span class="line">    a = <span class="string">" "</span>.join(th.indices2sentence(item[<span class="number">2</span>]))</span><br><span class="line">    preds = <span class="string">" "</span>.join(th.indices2sentence(preds))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Facts:"</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\n"</span>.join(facts))</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Question:"</span>, q)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Answer:"</span>, a)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Predict:"</span>, preds)</span><br><span class="line">    <span class="keyword">print</span> ()</span><br></pre></td></tr></table></figure><p>在本数据集上效果较好，但是数据量小、句子简单，还没有在别的数据集上面进行测试。等忙完了测试一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;论文：&lt;a href=&quot;https://arxiv.org/abs/1506.07285&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ask Me Anything: Dynamic Memory Networks for Natural Languag
      
    
    </summary>
    
      <category term="自然语言处理" scheme="http://plmsmile.github.io/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    
      <category term="QA" scheme="http://plmsmile.github.io/tags/QA/"/>
    
      <category term="DMN" scheme="http://plmsmile.github.io/tags/DMN/"/>
    
  </entry>
  
  <entry>
    <title>决策树笔记</title>
    <link href="http://plmsmile.github.io/2018/03/05/29-desicion-tree/"/>
    <id>http://plmsmile.github.io/2018/03/05/29-desicion-tree/</id>
    <published>2018-03-05T07:44:59.000Z</published>
    <updated>2018-11-25T08:30:08.400Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>决策树的特征选择、生成、剪枝。熵、信息增益、基尼指数。ID3、C4.5、CART。</p></blockquote><h1 id="决策树背景"><a href="#决策树背景" class="headerlink" title="决策树背景"></a>决策树背景</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><strong>树的意义</strong></p><p>决策树是一棵<code>if-then树</code>。 <code>内部节点</code>代表一个属性或<code>特征</code>，<code>叶节点</code>代表一个<code>类</code>。</p><p>决策树也是给定各个特征的情况下，某类别的概率。即条件概率$P(Y \mid X)$。</p><p><strong>树的生成</strong></p><p>构建根节点，选择<code>最优特征</code>。按照特征<code>划分子集</code>，继续选择新的最优特征，直到没有或者全部被正确分类。</p><p><strong>剪枝</strong></p><p>决策树的生成对应于<code>模型的局部选择</code>，会尽量<code>拟合训练数据</code>，导致模型<code>复杂</code>和<code>过拟合</code>。</p><p>决策树的剪枝对应于<code>模型的全局选择</code>， 自下而上删掉一些节点。</p><h2 id="熵和信息增益"><a href="#熵和信息增益" class="headerlink" title="熵和信息增益"></a>熵和信息增益</h2><p>在每个节点，要选择一个<code>最优特征</code>生成。</p><ul><li><code>ID3</code>使用<code>信息增益最大</code>选择最优特征</li><li><code>C4.5</code>使用<code>信息增益率最大</code>来选择最优特征</li><li><code>CART回归树</code> ，<code>平方误差最小</code></li><li><code>CART分类树</code>， <code>基尼指数最小</code> </li></ul><p><strong>信息量</strong></p><p>信息量是随机变量$X$<code>不确定性</code>的度量。<br>$$<br>I(X) = - \log p(x)<br>$$<br><strong>熵</strong></p><p>熵是信息量的期望，也是<strong>随机变量不确定性的度量</strong>。熵偏向<code>离散属性</code>， 基尼指数偏向<code>连续属性</code>。<br>$$<br>H(X) = - \sum_{x \in X} p(x) \log p(x)<br>$$<br><strong>条件熵</strong></p><p>条件熵是在给定随机变量$X$的情况下，随机变量$Y$的不确定性。<br>$$<br>H(Y \mid X) = \sum_{i = 1}^K p(x_i) H(Y \mid X = x_i)<br>$$<br>$X$共有<code>K</code>类，$p(x_i)$表示$X$属于第$i$类的概率。$H(Y\mid X=x_i)$表示$X=x_i$时$Y$的子集的熵。   </p><p><strong>经验熵和经验条件熵</strong></p><p>由数据估计（极大似然估计）得到的熵和条件熵。</p><p>如数据集D，有K个类别。<code>经验熵</code>是<br>$$<br>H(D) = -\sum_{k=1}^K \frac{\vert C_k\vert}{\vert D\vert} \log_2 \frac{\vert C_k\vert}{\vert D\vert}<br>$$<br>特征A根据取值把数据集D划分为n个子集，则<strong>给定特征A时数据集D的</strong><code>经验条件熵</code>是：<br>$$<br>H(D \mid A) = \sum_{i=1}^n \frac{\vert D_i\vert}{\vert D\vert} H(D_i)<br>= -\sum_{i=1}^n \frac{\vert D_i\vert}{\vert D\vert} \sum_{k=1}^K \frac{\vert D_{ik}\vert}{\vert D_i\vert} \log_2 \frac{\vert D_{ik}\vert}{\vert D_i\vert}<br>$$<br><strong>信息增益</strong></p><p><code>信息增益</code>是给定特征A，使得数据集D<strong>不确定性减少的程度</strong>。<code>信息增益 = 划分前熵 - 划分后熵 = 熵 - 条件熵</code><br>$$<br>g(D, A) = H(D) - H(D \mid A)<br>$$<br>特征A的<strong>信息增益越大</strong>，不确定性减少越多，A的<strong>分类能力就越强</strong>。</p><p><strong>信息增益的问题</strong></p><p>对于取值很多的特征，比如连续型数据(时间)。每一个取值几乎都可以确定一个样本。即这个特征就可以划分所有的样本数据。</p><ul><li>信息增益不适合<code>连续型</code>、<code>取值多</code>的特征</li></ul><ul><li>使得所有分支下的样本集合都是<code>纯的</code>，极端情况每一个叶子节点都是一个样本</li><li><strong>数据更纯，信息增益更大</strong>，选择它作为根节点，结果就是<strong>庞大且深度很浅的树</strong></li></ul><p><strong>信息增益比</strong></p><p><code>数据集</code>$D$关于<code>特征</code>A的<code>熵</code>，$n$是特征A的取值个数：<br>$$<br>H_A(D) = -\sum_{i=1}^n<br>\frac{\vert D_i\vert}{\vert D\vert} \log_2 \frac{\vert D_i\vert}{\vert D\vert}<br>$$<br><code>信息增益比 = 信息增益 / 划分前熵 = 信息增益 / D关于特征A的熵</code> ：<br>$$<br>g_R(D, A) = \frac {g(D, A)}{H_A(D)} = \frac {H(D) - H(D \mid A)}{H_A(D)}<br>$$<br>解决信息增益的问题：特征A分的类别越多，$D​$关于A的熵就越大，作为分母，所以信息增益$g_R(D, A)​$ 就越小。在信息增益的基础上增加了一个<code>分母惩罚项</code>。</p><p>信息增益比的问题：实际上偏好可取类别数目较少的特征。</p><h2 id="基尼指数"><a href="#基尼指数" class="headerlink" title="基尼指数"></a>基尼指数</h2><p><code>CART</code>分类树使用基尼指数来选择最优特征。 <code>基尼指数</code>也是度量<code>不确定性</code>。 熵偏向<code>离散属性</code>， 基尼指数偏向<code>连续属性</code>。  </p><p><strong>概率分布基尼指数</strong></p><p>分类中，有$K$类。 样本属于第$k$类的概率为$p_k$。<br>$$<br>\rm{Gini}(p) = \sum_{k=1}^K p_k(1-p_k) = 1 - \sum_{k=1}^Kp_k^2<br>$$<br><strong>样本集合基尼指数</strong></p><p>集合D，有$K$类，$D_k$ 是第k类的样本子集。则D的基尼指数<br>$$<br>\rm{Gini}(D) = 1 - \sum_{k=1}^K \left(\frac{\vert D_k\vert}{\vert D\vert} \right)^2<br>$$<br><strong>特征A条件基尼指数</strong></p><p>特征A取值为某一可能取值为<code>a</code>。  根据<code>A是否取值为a</code>把D划分为$D_1$和$D_2$<code>两个集合</code>。</p><p>在特征A的条件下，D的基尼指数如下：<br>$$<br>\rm{Gini}(D, A) = \frac{\vert D_1\vert}{\vert D\vert} \rm{Gini}(D_1) + \frac{\vert D_2\vert}{\vert D\vert} \rm{Gini}(D_2)<br>$$<br>$\rm{Gini}(D, A)​$是<strong>集合D根据特征A分割后，集合D的不确定性</strong>。 </p><h2 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h2><p>决策树的生成，ID3算法以<code>信息增益最大</code>为标准选择特征。递归构建，不断选择最优特征对训练集进行划分。</p><p>递归终止条件：</p><ul><li>当前节点的所有样本，属于同一类别$C_k$，无需划分。该节点为叶子节点，类标记为$C_k$ </li><li>当前属性集为空，或所有样本在属性集上取值相同</li><li>当前节点的样本集合为空，没有样本</li></ul><p>在集合D中，选择信息增益最大的特征$A_g$ ：</p><ul><li><code>增益小于阈值</code>，则<code>不继续向下分裂，到达叶子节点</code>。该节点的标记为该节点所有样本中的<code>majority class</code>$C_k$。 这也是<code>预剪枝</code> </li><li><code>增益大于阈值</code>，按照特征$A_g$的每一个取值$A_g=a_i$把D划分为各个子集$D_i$，去掉特征$A_g$ </li></ul><p>继续对每个内部节点进行递归划分。</p><h2 id="C4-5算法"><a href="#C4-5算法" class="headerlink" title="C4.5算法"></a>C4.5算法</h2><p>C4.5是ID3的改进，C4.5以<code>信息增益率最大</code>为标准选择特征。</p><h2 id="ID3-C4-5决策树剪枝"><a href="#ID3-C4-5决策树剪枝" class="headerlink" title="ID3/C4.5决策树剪枝"></a>ID3/C4.5决策树剪枝</h2><p><code>决策树的生成</code>，会过多地考虑如何提高对训练数据的分类，从而<code>构建出非常复杂的决策树</code>。就容易<code>过拟合</code>。</p><p>剪枝就是裁掉一些子树和叶节点，并将其根节点或父节点作为叶节点。剪枝分为预剪枝和后剪枝。</p><p><strong>预剪枝</strong></p><p><code>在生成树的时候</code>，设定信息增益的<code>阈值</code>，如果某节点的<code>某特征的信息增益小于该阈值</code>，则<code>不继续分裂</code>，<code>直接设为叶节点</code>。选择该节点的D中类别<code>数量最多的类别</code> （<code>majority class</code>）作为<code>类别标记</code>。</p><p><strong>后剪枝</strong></p><p>树构建好以后，基于整体，<code>极小化损失函数</code>，自下而上地进行剪枝。 </p><p>树T的参数表示</p><ul><li>叶节点的个数$\vert T \vert$</li><li>叶节点$t$</li><li>叶节点$t$上有$N_t$个样本 </li><li>有$K$类</li><li>叶节点t上的经验熵$H_t(T)$</li><li>$\alpha \ge 0$ 为惩罚系数</li></ul><p><code>叶节点t</code>上的<code>经验熵</code><br>$$<br>H_t(T) = -\sum_{k=1}^K \frac{N_{tk}}{N_t} \log \frac{N_{tk}}{N_t}<br>$$<br>模型<code>对训练数据的拟合程度</code>$C(T)$ ，<code>所有叶节点的经验熵和</code>：<br>$$<br>C(T) = \sum_{t=1}^{\vert T \vert} N_tH_t(T)<br>$$<br>最终<code>损失函数 = 拟合程度 + 惩罚因子</code>：<br>$$<br>C_\alpha(T) = C(T) + \alpha \vert T\vert<br>$$<br>参数$\alpha$权衡了训练数据的拟合程度和模型复杂度。</p><ul><li>$\alpha$大，决策树简单，拟合不好</li><li>$\alpha$小，决策树复杂，过拟合 </li></ul><p><strong>剪枝步骤</strong></p><ol><li>计算每个节点的经验熵</li><li>递归从树的叶节点向上回缩。叶节点回缩到父节点：整体树：回缩前$T_1$ ，回缩后$T_2$<ul><li>$C_\alpha(T_2) \le C_\alpha(T_1)$， 则<code>回缩到父节点</code>， <code>父节点变成新的叶节点</code>。</li></ul></li></ol><p><img src="http://plm-images.oss-cn-hongkong.aliyuncs.com/image/ds/tree/cut-tree.jpeg" style="display:block; margin:auto" width="35%"></p><h2 id="CART-回归树"><a href="#CART-回归树" class="headerlink" title="CART-回归树"></a>CART-回归树</h2><p><code>Classification and regression tree</code>分类与回归树。 </p><ul><li>回归-平方误差最小</li><li>分类-基尼指数最小</li><li><code>二叉树</code></li><li>内部节点：是 - 否。如特征$A \le a $或 $A &gt; a$</li></ul><p><strong>模型</strong></p><p>把输入空间划分为<code>M个单元</code>$R_1,R_2,\cdots, R_M$， 每个单元有<code>多个样本</code>，有一个<code>固定的输出值</code>$c_m$。<br>$$<br>\hat c_m = \rm{avg} (y_i), \; y_i \in R_m<br>$$<br><code>树模型</code> ：<br>$$<br>f(x) = \sum_{m=1}^M c_m I(x \in R_m)<br>$$<br><strong>划分单元</strong></p><p>寻找<code>最优切分变量j</code>和<code>最优切分点s</code> 。</p><p>选择第$j$个变量$x^{(j)}$和其取值$s$， 作为<code>切分变量</code>和<code>切分点</code>，划分为<code>两个空间</code> $R_1, R_2$，输出分别为<strong>$c_1, c_2$</strong> :<br>$$<br>R_1(j, s) = {x \mid x^{(j)} \le s }, \quad \quad R_2(j, s) = {x \mid x^{(j)} &gt; s }<br>$$<br>求<code>最优</code>，<code>平方误差最小</code> ：<br>$$<br>\min_\limits{j, s} \left[<br>\min_\limits{c_1} \sum_{x_i \in R_1(j, s)} (y_i - c_1)^2 +<br>\min_\limits{c_2} \sum_{x_i \in R_1(j, s)} (y_i - c_1)^2<br>\right]<br>$$<br> 对每个区域重复划分过程，直到停止。也叫作<code>最小二乘回归树</code>。</p><h2 id="CART-分类树"><a href="#CART-分类树" class="headerlink" title="CART-分类树"></a>CART-分类树</h2><p><code>基尼指数最小原则</code> 。</p><p>对每一个数据集D，对每一个特征A，对每一个A的取值$A=a$ 是或者否，划分两个自己$D_1$和$D_2$</p><ul><li>计算在特征$A=a$条件下的基尼指数$\color{blue} {\rm{Gini}(D, A=a)}$ </li><li>选择<code>基尼指数最小</code>特征A及其取值a，作为<code>最优特征</code>和<code>最优切分点</code></li><li>从现节点<code>划分为两个子节点</code></li></ul><h2 id="CART剪枝"><a href="#CART剪枝" class="headerlink" title="CART剪枝"></a>CART剪枝</h2><p><strong>剪枝总体步骤</strong> </p><ul><li>从生成的决策树$T_0$开始， 从底端向上开始剪枝，直到$T_0$的根节点。<code>损失函数决定是否剪枝</code> </li></ul><ul><li>形成子树序列${T_0, T_1, \cdots, T_n}$</li><li><code>交叉验证</code>子树序列，选择最优子树</li></ul><p><strong>K-折交叉验证法</strong></p><p>数据集划分为K个子集。每个子集分别做一次验证集，其余K-1组作为训练集。得到K个模型。</p><p><strong>剪枝损失函数</strong><br>$$<br>C_\alpha(T) = C(T) + \alpha \vert T\vert<br>$$<br>$C(T)$为<code>所有叶节点的经验熵和</code> ：<br>$$<br>C(T) = \sum_{t=1}^{\vert T \vert} N_tH_t(T)<br>$$<br>$\alpha$权衡<code>训练数据拟合程度</code>和<code>模型复杂度</code>。 </p><p>整体树$T_0$的任意<code>内部节点t</code>， $\alpha$从0开始，每次一个小区间$[\alpha_i, \alpha_{i+1})$ ：</p><ul><li><code>t为单节点树时损失</code>：$C\alpha(t) = C(t) + \alpha$</li><li><code>t为根节点子树时损失</code>：$C_\alpha(T_t) = C(T_t) + \alpha \vert T_t\vert$</li><li>$\alpha=0$时，  $C\alpha(t) &lt; C_\alpha(T_t)$ 。因为，树大，精确，损失小。</li><li>随着$\alpha$的增大，会达到： $C\alpha(t) = C_\alpha(T_t)$</li></ul><p>求得<code>临界点</code>$\alpha​$<br>$$<br>\alpha = \frac{C(T) - C(T_t)} {\vert T_t\vert - 1}<br>$$<br>对每个内部节点求：<br>$$<br>g(t) = \frac{C(T) - C(T_t)} {\vert T_t\vert - 1}<br>$$</p><ul><li>在$T_0$中减去<code>最小的</code>$g(t)$<code>对应的子树</code>$T_t$ ， 作为$T_1$ </li><li>t节点作为叶子节点，类标记为<code>majority class</code></li><li>最后再交叉验证所有的子树序列即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;决策树的特征选择、生成、剪枝。熵、信息增益、基尼指数。ID3、C4.5、CART。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;决策树背景&quot;&gt;&lt;a href=&quot;#决策树背景&quot; class=&quot;headerlink&quot; title=&quot;决策树背景&quot;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://plmsmile.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="决策树" scheme="http://plmsmile.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
      <category term="ID3" scheme="http://plmsmile.github.io/tags/ID3/"/>
    
      <category term="C4.5" scheme="http://plmsmile.github.io/tags/C4-5/"/>
    
      <category term="CART" scheme="http://plmsmile.github.io/tags/CART/"/>
    
      <category term="熵" scheme="http://plmsmile.github.io/tags/%E7%86%B5/"/>
    
      <category term="信息增益" scheme="http://plmsmile.github.io/tags/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A/"/>
    
      <category term="基尼指数" scheme="http://plmsmile.github.io/tags/%E5%9F%BA%E5%B0%BC%E6%8C%87%E6%95%B0/"/>
    
  </entry>
  
</feed>
